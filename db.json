{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1521689274993},{"_id":"themes/landscape/README.md","hash":"c7e83cfe8f2c724fc9cac32bd71bb5faf9ceeddb","modified":1521689274994},{"_id":"themes/landscape/package.json","hash":"85358dc34311c6662e841584e206a4679183943f","modified":1521689274994},{"_id":"themes/landscape/.npmignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1521689274994},{"_id":"themes/landscape/_config.yml","hash":"fb8c98a0f6ff9f962637f329c22699721854cd73","modified":1521689275008},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1521689274994},{"_id":"source/_posts/first.md","hash":"a00cd3d72976ff25181e395e33a282c322e0f1f1","modified":1522758008700},{"_id":"themes/landscape/languages/fr.yml","hash":"84ab164b37c6abf625473e9a0c18f6f815dd5fd9","modified":1521689275011},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1521689275014},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1521689275011},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1521689275011},{"_id":"source/_posts/hello-world.md","hash":"8a02477044e2b77f1b262da2c48c01429e4a32e4","modified":1521689274993},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1521689275012},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1521689275012},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1521689275014},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1521689275014},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1521689275015},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1521689275014},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1521689275014},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1521689275019},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1521689275014},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1521689275018},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1521689275044},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1521689275044},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"931aaaffa0910a48199388ede576184ff15793ee","modified":1521689275044},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"93518893cf91287e797ebac543c560e2a63b8d0e","modified":1521689275044},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"82a30f81c0e8ba4a8af17acd6cc99e93834e4d5e","modified":1521689275049},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":1521689275046},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1521689275046},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"c21ca56f419d01a9f49c27b6be9f4a98402b2aa3","modified":1521689275046},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"4fe8853e864d192701c03e5cd3a5390287b90612","modified":1521689275044},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1521689275045},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1521689275049},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1521689275045},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1521689275050},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1521689275050},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1521689275049},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1521689275050},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1521689275052},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1521689275051},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1521689275051},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1521689275050},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1521689275052},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1521689275052},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1521689275051},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1521689275051},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1521689275052},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1521689275053},{"_id":"themes/landscape/source/css/_variables.styl","hash":"5e37a6571caf87149af83ac1cc0cdef99f117350","modified":1521689275050},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1521689275053},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1521689275052},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1521689275080},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1521689275078},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1521689275078},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1521689275077},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1521689275078},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1521689275077},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1521689275081},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1521689275078},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1521689275080},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1521689275079},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1521689275079},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1521689275079},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":1521689275078},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1521689275080},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1521689275079},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1521689275079},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1521689275080},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1521689275080},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1521689275080},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1521689275080},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1521689275082},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1521689275081},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1521689275081},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1521689275081},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1521689275081},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1521689275082},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1521689275081},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1521689275082},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1521689275082},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1521689275082},{"_id":"public/2018/03/22/first/index.html","hash":"8e3c9d4c8afc0395cd9eadc54fde16c26c5d9e33","modified":1522758173042},{"_id":"public/2018/03/22/hello-world/index.html","hash":"31e90215f9dd8337b34931084d3202f01b5e8da4","modified":1522758173043},{"_id":"public/archives/index.html","hash":"251c06ef15d054dd98a3846279f94ebc6873fdde","modified":1522758173043},{"_id":"public/index.html","hash":"e7bfc4988b4eb694e979f99a15b60f30ed98840d","modified":1522758173043},{"_id":"public/archives/2018/03/index.html","hash":"0322b33a0da4d026fbaa0352b3801404c41a193b","modified":1522758173043},{"_id":"public/archives/2018/index.html","hash":"7bd05195b2ed306b6ea580594ed29784d2126e74","modified":1522758173043}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"dva的基本使用以及核心源码分析","date":"2018-03-22T12:02:01.000Z","_content":"## dva基本思想 ##\ndva是对redux、redux-router和redux-saga进行了封装，未引入其他新的概念。在处理redux异步控制上实现了优化。按照作者sorrycc的定义：dva 是 react 和 redux 的最佳实践。\n## dva的demo分析 ##\n语言基础：es6和react\n主要工具：\n\n- 开发工具（vscode，subline）\n- 包管理工具（npm）\n- es6编译工具（babel https://my.oschina.net/dkvirus/blog/1517941）\n- 项目启动打包工具（Roadhog https://github.com/sorrycc/roadhog）\n- 模拟后台接口（mockjs）\n- 版本控制工具（git）\n- 代码检查工具（ESLint https://my.oschina.net/dkvirus/blog/1506899）\n\n项目结构：\n![](https://i.imgur.com/PYfnS2T.png)\n脚手架做的几件事情：\n- 自动创建一个包含package.json的项目\n- 自动创建成体系的目录结构\n- 自动安装项目需要的基础包\n- 集成代码检查工具ESLint\n- 集成模拟接口工具mock\n- 集成服务启动打包工具Roadhog\n- 集成版本控制工具Git\n\n### 各文件目录主要的作用 ###\n- package.json 项目的配置文件\n- public 文件夹中存放静态资源，比如图片，静态页面html等\n- src 文件夹是项目代码存放文件夹，是项目最核心的代码，具体在后面进行详细介绍。\n- node_modules 放置所有项目引入的依赖包\n- .eslintrc 代码检查的配置文件\n- mock 文件夹、.roadhogrc.mock.js文件 是项目中的模拟接口\n- .roadhogrc 集成服务启动打包工具Roadhog（主要作用：与其他插件集成、启动服务、打包项目）\n- .gitingore 配置git相关设置\n\n### 具体的代码分析 ###\n#### 从入口文件index.js开始 ####\n初始化：`const app = dva({\n    history: browserHistory\n});`\n\n    function dva(hooks={}){\n\t\tconst history = hooks.history || defaultHistory;\n\t\tconst initialState = hooks.initialState || {};\n\t\tdelete hooks.history;\n\t\tdelete hooks.initialState;\n\n\t\tconst plugin = new Plugin();\n\t\tplugin.use(hooks);\n\n\t\tconst app = {\n\t\t\t//properties\n\t\t\t_models:[],\n\t\t\t_router:null,\n\t\t\t_history:null,\n\t\t\t_plugin:plugin,\n\t\t\t_getProvider:null,\n\t\t\t//methods\n\t\t\tuse,\n\t\t\tmodels,\n\t\t\trouter,\n\t\t\tstart,\n\t\t};\n\t\treturn app;\n\t}\n\nhooks:传入的配置，如history，这里可以知道dva默认采用的是hashHistory；\nplugin:插件，此处暂不分析；\napp.router()：指定路由，需要传入一个函数，一般类似于({history})=>(<Router>...</Router>);\napp.use():添加插件；\napp.model():添加model，也就是对应的添加一个store下的数据，该方法做的就是对传入的model进行检查，对reducers添加命名空间，而后将其push到_models中\napp.start():初始化应用，接受参数为选择器或者dom节点\n需要注意的是： \n- reducers和effects的key不需要用namespace/action的形式了，因为dva会自动将其加上，dispatch的时候，saga需要加上namespace，而saga中的put不需要加入namespace，原因是dva对put进行了重载\n\n\n### start函数 ###\n    function start(container) {\n    // 允许 container 是字符串，然后用 querySelector 找元素\n    \tif (isString(container)) {\n      \t\tcontainer = document.querySelector(container);\n      \t\tinvariant(\n        \t  container,\n        \t`[app.start] container ${container} not found`,\n      \t\t);\n    \t}\n\n    // 并且是 HTMLElement\n    \tinvariant(\n      \t\t!container || isHTMLElement(container),\n      \t\t`[app.start] container should be HTMLElement`,\n    \t);\n\n    // 路由必须提前注册\n    \tinvariant(\n      \t\tapp._router,\n      \t\t`[app.start] router must be registered before app.start()`,\n    \t);\n\n    \tif (!app._store) {\n      \t\toldAppStart.call(app);\n    \t}\n    \tconst store = app._store;\n\n    // export _getProvider for HMR\n    // ref: https://github.com/dvajs/dva/issues/469\n    \tapp._getProvider = getProvider.bind(null, store, app);\n\n    // If has container, render; else, return react component\n    \t**if (container) {\n      \t\trender(container, store, app, app._router);\n      \t\tapp._plugin.apply('onHmr')(render.bind(null, container, store, app));\n    \t} else {\n      \treturn getProvider(store, this, this._router);\n    \t}**\n  \t}\n\n比较关心的页面初始渲染的函数\n    \n\tfunction render(container, store, app, router) {\n  \t\tconst ReactDOM = require('react-dom');  // eslint-disable-line\n  \t\tReactDOM.render(React.createElement(getProvider(store, app, router)), container);\n\t}\n\n比较重要的路由模块\n  `function getProvider(store, app, router) {\n  \t\treturn extraProps => (\n    \t<Provider store={store}>\n      \t{ router({ app, history: app._history, ...extraProps }) }\n    \t</Provider>\n  \t)；\n\t}`\n\n此时建议看一下一般项目中的入口文件index.js和路由文件router.js\n\nindex.js\n   \t\n\t`// 1. Initialize\n\t\tconst app = dva({\n  \t\t\thistory: browserHistory(),\n\t\t});\n\t// 2. Plugins\n\t// app.use({});\n\n\t// 3. Register global model\n\tapp.model(require('./models/global'));\n\n\t// 4. Router\n\tapp.router(router);\n\n\t// 5. Start\n\tapp.start('#root');\n\n\texport const store = app._store;`\n\nrouter.js\n\n    `function RouterConfig({ history, app }) {\n  \t\tconst navData = getNavData(app);\n  \t\tconst BasicLayout = getLayout(navData, 'BasicLayout').component;\n\n  \t\tconst passProps = {\n    \t\tapp,\n    \t\tnavData,\n    \t\tgetRouteData: (path) => {\n      \t\treturn getRouteData(navData, path);\n    \t\t},\n  \t\t};\n\n  \t\treturn (\n    \t\t<LocaleProvider locale={zhCN}>\n      \t\t\t<Router history={history}>\n        \t\t\t<Switch>\n          \t\t\t\t<Route path=\"/\" render={props => <BasicLayout {...props} {...passProps} />} />\n        \t\t\t</Switch>\n      \t\t\t</Router>\n    \t\t</LocaleProvider>\n  \t\t\t);\n\t}\n\n\texport default RouterConfig;`\n\n以上可以基本明白一个dva的初始化页面是如何实现的，需要注意的是：\n1、LocaleProvider是antd提供的国际化组件\n2、Provider是react-redux提供的组件，其本质是一个react组件，具体参看源码，其核心是getChildContext方法\n \n\t`import { Component, Children } from 'react'\n\t import PropTypes from 'prop-types'\n\t import storeShape from '../utils/storeShape'\n\t import warning from '../utils/warning'\n\n\texport default class Provider extends Component {\n  \t\tgetChildContext() {\n    \treturn { store: this.store }\n  \t}\n\n  \tconstructor(props, context) {\n    \tsuper(props, context)\n    \tthis.store = props.store\n  \t}\n\n  \trender() {\n    \treturn Children.only(this.props.children)\n  \t\t}\n\t}`\n\n\n\n\n\n","source":"_posts/first.md","raw":"---\ntitle: dva的基本使用以及核心源码分析\ndate: 2018-03-22 20:02:01\ntags:\n---\n## dva基本思想 ##\ndva是对redux、redux-router和redux-saga进行了封装，未引入其他新的概念。在处理redux异步控制上实现了优化。按照作者sorrycc的定义：dva 是 react 和 redux 的最佳实践。\n## dva的demo分析 ##\n语言基础：es6和react\n主要工具：\n\n- 开发工具（vscode，subline）\n- 包管理工具（npm）\n- es6编译工具（babel https://my.oschina.net/dkvirus/blog/1517941）\n- 项目启动打包工具（Roadhog https://github.com/sorrycc/roadhog）\n- 模拟后台接口（mockjs）\n- 版本控制工具（git）\n- 代码检查工具（ESLint https://my.oschina.net/dkvirus/blog/1506899）\n\n项目结构：\n![](https://i.imgur.com/PYfnS2T.png)\n脚手架做的几件事情：\n- 自动创建一个包含package.json的项目\n- 自动创建成体系的目录结构\n- 自动安装项目需要的基础包\n- 集成代码检查工具ESLint\n- 集成模拟接口工具mock\n- 集成服务启动打包工具Roadhog\n- 集成版本控制工具Git\n\n### 各文件目录主要的作用 ###\n- package.json 项目的配置文件\n- public 文件夹中存放静态资源，比如图片，静态页面html等\n- src 文件夹是项目代码存放文件夹，是项目最核心的代码，具体在后面进行详细介绍。\n- node_modules 放置所有项目引入的依赖包\n- .eslintrc 代码检查的配置文件\n- mock 文件夹、.roadhogrc.mock.js文件 是项目中的模拟接口\n- .roadhogrc 集成服务启动打包工具Roadhog（主要作用：与其他插件集成、启动服务、打包项目）\n- .gitingore 配置git相关设置\n\n### 具体的代码分析 ###\n#### 从入口文件index.js开始 ####\n初始化：`const app = dva({\n    history: browserHistory\n});`\n\n    function dva(hooks={}){\n\t\tconst history = hooks.history || defaultHistory;\n\t\tconst initialState = hooks.initialState || {};\n\t\tdelete hooks.history;\n\t\tdelete hooks.initialState;\n\n\t\tconst plugin = new Plugin();\n\t\tplugin.use(hooks);\n\n\t\tconst app = {\n\t\t\t//properties\n\t\t\t_models:[],\n\t\t\t_router:null,\n\t\t\t_history:null,\n\t\t\t_plugin:plugin,\n\t\t\t_getProvider:null,\n\t\t\t//methods\n\t\t\tuse,\n\t\t\tmodels,\n\t\t\trouter,\n\t\t\tstart,\n\t\t};\n\t\treturn app;\n\t}\n\nhooks:传入的配置，如history，这里可以知道dva默认采用的是hashHistory；\nplugin:插件，此处暂不分析；\napp.router()：指定路由，需要传入一个函数，一般类似于({history})=>(<Router>...</Router>);\napp.use():添加插件；\napp.model():添加model，也就是对应的添加一个store下的数据，该方法做的就是对传入的model进行检查，对reducers添加命名空间，而后将其push到_models中\napp.start():初始化应用，接受参数为选择器或者dom节点\n需要注意的是： \n- reducers和effects的key不需要用namespace/action的形式了，因为dva会自动将其加上，dispatch的时候，saga需要加上namespace，而saga中的put不需要加入namespace，原因是dva对put进行了重载\n\n\n### start函数 ###\n    function start(container) {\n    // 允许 container 是字符串，然后用 querySelector 找元素\n    \tif (isString(container)) {\n      \t\tcontainer = document.querySelector(container);\n      \t\tinvariant(\n        \t  container,\n        \t`[app.start] container ${container} not found`,\n      \t\t);\n    \t}\n\n    // 并且是 HTMLElement\n    \tinvariant(\n      \t\t!container || isHTMLElement(container),\n      \t\t`[app.start] container should be HTMLElement`,\n    \t);\n\n    // 路由必须提前注册\n    \tinvariant(\n      \t\tapp._router,\n      \t\t`[app.start] router must be registered before app.start()`,\n    \t);\n\n    \tif (!app._store) {\n      \t\toldAppStart.call(app);\n    \t}\n    \tconst store = app._store;\n\n    // export _getProvider for HMR\n    // ref: https://github.com/dvajs/dva/issues/469\n    \tapp._getProvider = getProvider.bind(null, store, app);\n\n    // If has container, render; else, return react component\n    \t**if (container) {\n      \t\trender(container, store, app, app._router);\n      \t\tapp._plugin.apply('onHmr')(render.bind(null, container, store, app));\n    \t} else {\n      \treturn getProvider(store, this, this._router);\n    \t}**\n  \t}\n\n比较关心的页面初始渲染的函数\n    \n\tfunction render(container, store, app, router) {\n  \t\tconst ReactDOM = require('react-dom');  // eslint-disable-line\n  \t\tReactDOM.render(React.createElement(getProvider(store, app, router)), container);\n\t}\n\n比较重要的路由模块\n  `function getProvider(store, app, router) {\n  \t\treturn extraProps => (\n    \t<Provider store={store}>\n      \t{ router({ app, history: app._history, ...extraProps }) }\n    \t</Provider>\n  \t)；\n\t}`\n\n此时建议看一下一般项目中的入口文件index.js和路由文件router.js\n\nindex.js\n   \t\n\t`// 1. Initialize\n\t\tconst app = dva({\n  \t\t\thistory: browserHistory(),\n\t\t});\n\t// 2. Plugins\n\t// app.use({});\n\n\t// 3. Register global model\n\tapp.model(require('./models/global'));\n\n\t// 4. Router\n\tapp.router(router);\n\n\t// 5. Start\n\tapp.start('#root');\n\n\texport const store = app._store;`\n\nrouter.js\n\n    `function RouterConfig({ history, app }) {\n  \t\tconst navData = getNavData(app);\n  \t\tconst BasicLayout = getLayout(navData, 'BasicLayout').component;\n\n  \t\tconst passProps = {\n    \t\tapp,\n    \t\tnavData,\n    \t\tgetRouteData: (path) => {\n      \t\treturn getRouteData(navData, path);\n    \t\t},\n  \t\t};\n\n  \t\treturn (\n    \t\t<LocaleProvider locale={zhCN}>\n      \t\t\t<Router history={history}>\n        \t\t\t<Switch>\n          \t\t\t\t<Route path=\"/\" render={props => <BasicLayout {...props} {...passProps} />} />\n        \t\t\t</Switch>\n      \t\t\t</Router>\n    \t\t</LocaleProvider>\n  \t\t\t);\n\t}\n\n\texport default RouterConfig;`\n\n以上可以基本明白一个dva的初始化页面是如何实现的，需要注意的是：\n1、LocaleProvider是antd提供的国际化组件\n2、Provider是react-redux提供的组件，其本质是一个react组件，具体参看源码，其核心是getChildContext方法\n \n\t`import { Component, Children } from 'react'\n\t import PropTypes from 'prop-types'\n\t import storeShape from '../utils/storeShape'\n\t import warning from '../utils/warning'\n\n\texport default class Provider extends Component {\n  \t\tgetChildContext() {\n    \treturn { store: this.store }\n  \t}\n\n  \tconstructor(props, context) {\n    \tsuper(props, context)\n    \tthis.store = props.store\n  \t}\n\n  \trender() {\n    \treturn Children.only(this.props.children)\n  \t\t}\n\t}`\n\n\n\n\n\n","slug":"first","published":1,"updated":"2018-04-03T12:20:08.700Z","_id":"cjf86gump0000rcvwqttarc8z","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"dva基本思想\"><a href=\"#dva基本思想\" class=\"headerlink\" title=\"dva基本思想\"></a>dva基本思想</h2><p>dva是对redux、redux-router和redux-saga进行了封装，未引入其他新的概念。在处理redux异步控制上实现了优化。按照作者sorrycc的定义：dva 是 react 和 redux 的最佳实践。</p>\n<h2 id=\"dva的demo分析\"><a href=\"#dva的demo分析\" class=\"headerlink\" title=\"dva的demo分析\"></a>dva的demo分析</h2><p>语言基础：es6和react<br>主要工具：</p>\n<ul>\n<li>开发工具（vscode，subline）</li>\n<li>包管理工具（npm）</li>\n<li>es6编译工具（babel <a href=\"https://my.oschina.net/dkvirus/blog/1517941）\" target=\"_blank\" rel=\"noopener\">https://my.oschina.net/dkvirus/blog/1517941）</a></li>\n<li>项目启动打包工具（Roadhog <a href=\"https://github.com/sorrycc/roadhog）\" target=\"_blank\" rel=\"noopener\">https://github.com/sorrycc/roadhog）</a></li>\n<li>模拟后台接口（mockjs）</li>\n<li>版本控制工具（git）</li>\n<li>代码检查工具（ESLint <a href=\"https://my.oschina.net/dkvirus/blog/1506899）\" target=\"_blank\" rel=\"noopener\">https://my.oschina.net/dkvirus/blog/1506899）</a></li>\n</ul>\n<p>项目结构：<br><img src=\"https://i.imgur.com/PYfnS2T.png\" alt=\"\"><br>脚手架做的几件事情：</p>\n<ul>\n<li>自动创建一个包含package.json的项目</li>\n<li>自动创建成体系的目录结构</li>\n<li>自动安装项目需要的基础包</li>\n<li>集成代码检查工具ESLint</li>\n<li>集成模拟接口工具mock</li>\n<li>集成服务启动打包工具Roadhog</li>\n<li>集成版本控制工具Git</li>\n</ul>\n<h3 id=\"各文件目录主要的作用\"><a href=\"#各文件目录主要的作用\" class=\"headerlink\" title=\"各文件目录主要的作用\"></a>各文件目录主要的作用</h3><ul>\n<li>package.json 项目的配置文件</li>\n<li>public 文件夹中存放静态资源，比如图片，静态页面html等</li>\n<li>src 文件夹是项目代码存放文件夹，是项目最核心的代码，具体在后面进行详细介绍。</li>\n<li>node_modules 放置所有项目引入的依赖包</li>\n<li>.eslintrc 代码检查的配置文件</li>\n<li>mock 文件夹、.roadhogrc.mock.js文件 是项目中的模拟接口</li>\n<li>.roadhogrc 集成服务启动打包工具Roadhog（主要作用：与其他插件集成、启动服务、打包项目）</li>\n<li>.gitingore 配置git相关设置</li>\n</ul>\n<h3 id=\"具体的代码分析\"><a href=\"#具体的代码分析\" class=\"headerlink\" title=\"具体的代码分析\"></a>具体的代码分析</h3><h4 id=\"从入口文件index-js开始\"><a href=\"#从入口文件index-js开始\" class=\"headerlink\" title=\"从入口文件index.js开始\"></a>从入口文件index.js开始</h4><p>初始化：<code>const app = dva({\n    history: browserHistory\n});</code></p>\n<pre><code>function dva(hooks={}){\n    const history = hooks.history || defaultHistory;\n    const initialState = hooks.initialState || {};\n    delete hooks.history;\n    delete hooks.initialState;\n\n    const plugin = new Plugin();\n    plugin.use(hooks);\n\n    const app = {\n        //properties\n        _models:[],\n        _router:null,\n        _history:null,\n        _plugin:plugin,\n        _getProvider:null,\n        //methods\n        use,\n        models,\n        router,\n        start,\n    };\n    return app;\n}\n</code></pre><p>hooks:传入的配置，如history，这里可以知道dva默认采用的是hashHistory；<br>plugin:插件，此处暂不分析；<br>app.router()：指定路由，需要传入一个函数，一般类似于({history})=&gt;(<router>…</router>);<br>app.use():添加插件；<br>app.model():添加model，也就是对应的添加一个store下的数据，该方法做的就是对传入的model进行检查，对reducers添加命名空间，而后将其push到_models中<br>app.start():初始化应用，接受参数为选择器或者dom节点<br>需要注意的是： </p>\n<ul>\n<li>reducers和effects的key不需要用namespace/action的形式了，因为dva会自动将其加上，dispatch的时候，saga需要加上namespace，而saga中的put不需要加入namespace，原因是dva对put进行了重载</li>\n</ul>\n<h3 id=\"start函数\"><a href=\"#start函数\" class=\"headerlink\" title=\"start函数\"></a>start函数</h3><pre><code>function start(container) {\n// 允许 container 是字符串，然后用 querySelector 找元素\n    if (isString(container)) {\n          container = document.querySelector(container);\n          invariant(\n          container,\n        `[app.start] container ${container} not found`,\n          );\n    }\n\n// 并且是 HTMLElement\n    invariant(\n          !container || isHTMLElement(container),\n          `[app.start] container should be HTMLElement`,\n    );\n\n// 路由必须提前注册\n    invariant(\n          app._router,\n          `[app.start] router must be registered before app.start()`,\n    );\n\n    if (!app._store) {\n          oldAppStart.call(app);\n    }\n    const store = app._store;\n\n// export _getProvider for HMR\n// ref: https://github.com/dvajs/dva/issues/469\n    app._getProvider = getProvider.bind(null, store, app);\n\n// If has container, render; else, return react component\n    **if (container) {\n          render(container, store, app, app._router);\n          app._plugin.apply(&apos;onHmr&apos;)(render.bind(null, container, store, app));\n    } else {\n      return getProvider(store, this, this._router);\n    }**\n  }\n</code></pre><p>比较关心的页面初始渲染的函数</p>\n<pre><code>function render(container, store, app, router) {\n      const ReactDOM = require(&apos;react-dom&apos;);  // eslint-disable-line\n      ReactDOM.render(React.createElement(getProvider(store, app, router)), container);\n}\n</code></pre><p>比较重要的路由模块<br>  <code>function getProvider(store, app, router) {\n          return extraProps =&gt; (\n        &lt;Provider store={store}&gt;\n          { router({ app, history: app._history, ...extraProps }) }\n        &lt;/Provider&gt;\n      )；\n    }</code></p>\n<p>此时建议看一下一般项目中的入口文件index.js和路由文件router.js</p>\n<p>index.js</p>\n<pre><code>`// 1. Initialize\n    const app = dva({\n          history: browserHistory(),\n    });\n// 2. Plugins\n// app.use({});\n\n// 3. Register global model\napp.model(require(&apos;./models/global&apos;));\n\n// 4. Router\napp.router(router);\n\n// 5. Start\napp.start(&apos;#root&apos;);\n\nexport const store = app._store;`\n</code></pre><p>router.js</p>\n<pre><code>`function RouterConfig({ history, app }) {\n      const navData = getNavData(app);\n      const BasicLayout = getLayout(navData, &apos;BasicLayout&apos;).component;\n\n      const passProps = {\n        app,\n        navData,\n        getRouteData: (path) =&gt; {\n          return getRouteData(navData, path);\n        },\n      };\n\n      return (\n        &lt;LocaleProvider locale={zhCN}&gt;\n              &lt;Router history={history}&gt;\n                &lt;Switch&gt;\n                      &lt;Route path=&quot;/&quot; render={props =&gt; &lt;BasicLayout {...props} {...passProps} /&gt;} /&gt;\n                &lt;/Switch&gt;\n              &lt;/Router&gt;\n        &lt;/LocaleProvider&gt;\n          );\n}\n\nexport default RouterConfig;`\n</code></pre><p>以上可以基本明白一个dva的初始化页面是如何实现的，需要注意的是：<br>1、LocaleProvider是antd提供的国际化组件<br>2、Provider是react-redux提供的组件，其本质是一个react组件，具体参看源码，其核心是getChildContext方法</p>\n<pre><code>`import { Component, Children } from &apos;react&apos;\n import PropTypes from &apos;prop-types&apos;\n import storeShape from &apos;../utils/storeShape&apos;\n import warning from &apos;../utils/warning&apos;\n\nexport default class Provider extends Component {\n      getChildContext() {\n    return { store: this.store }\n  }\n\n  constructor(props, context) {\n    super(props, context)\n    this.store = props.store\n  }\n\n  render() {\n    return Children.only(this.props.children)\n      }\n}`\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"dva基本思想\"><a href=\"#dva基本思想\" class=\"headerlink\" title=\"dva基本思想\"></a>dva基本思想</h2><p>dva是对redux、redux-router和redux-saga进行了封装，未引入其他新的概念。在处理redux异步控制上实现了优化。按照作者sorrycc的定义：dva 是 react 和 redux 的最佳实践。</p>\n<h2 id=\"dva的demo分析\"><a href=\"#dva的demo分析\" class=\"headerlink\" title=\"dva的demo分析\"></a>dva的demo分析</h2><p>语言基础：es6和react<br>主要工具：</p>\n<ul>\n<li>开发工具（vscode，subline）</li>\n<li>包管理工具（npm）</li>\n<li>es6编译工具（babel <a href=\"https://my.oschina.net/dkvirus/blog/1517941）\" target=\"_blank\" rel=\"noopener\">https://my.oschina.net/dkvirus/blog/1517941）</a></li>\n<li>项目启动打包工具（Roadhog <a href=\"https://github.com/sorrycc/roadhog）\" target=\"_blank\" rel=\"noopener\">https://github.com/sorrycc/roadhog）</a></li>\n<li>模拟后台接口（mockjs）</li>\n<li>版本控制工具（git）</li>\n<li>代码检查工具（ESLint <a href=\"https://my.oschina.net/dkvirus/blog/1506899）\" target=\"_blank\" rel=\"noopener\">https://my.oschina.net/dkvirus/blog/1506899）</a></li>\n</ul>\n<p>项目结构：<br><img src=\"https://i.imgur.com/PYfnS2T.png\" alt=\"\"><br>脚手架做的几件事情：</p>\n<ul>\n<li>自动创建一个包含package.json的项目</li>\n<li>自动创建成体系的目录结构</li>\n<li>自动安装项目需要的基础包</li>\n<li>集成代码检查工具ESLint</li>\n<li>集成模拟接口工具mock</li>\n<li>集成服务启动打包工具Roadhog</li>\n<li>集成版本控制工具Git</li>\n</ul>\n<h3 id=\"各文件目录主要的作用\"><a href=\"#各文件目录主要的作用\" class=\"headerlink\" title=\"各文件目录主要的作用\"></a>各文件目录主要的作用</h3><ul>\n<li>package.json 项目的配置文件</li>\n<li>public 文件夹中存放静态资源，比如图片，静态页面html等</li>\n<li>src 文件夹是项目代码存放文件夹，是项目最核心的代码，具体在后面进行详细介绍。</li>\n<li>node_modules 放置所有项目引入的依赖包</li>\n<li>.eslintrc 代码检查的配置文件</li>\n<li>mock 文件夹、.roadhogrc.mock.js文件 是项目中的模拟接口</li>\n<li>.roadhogrc 集成服务启动打包工具Roadhog（主要作用：与其他插件集成、启动服务、打包项目）</li>\n<li>.gitingore 配置git相关设置</li>\n</ul>\n<h3 id=\"具体的代码分析\"><a href=\"#具体的代码分析\" class=\"headerlink\" title=\"具体的代码分析\"></a>具体的代码分析</h3><h4 id=\"从入口文件index-js开始\"><a href=\"#从入口文件index-js开始\" class=\"headerlink\" title=\"从入口文件index.js开始\"></a>从入口文件index.js开始</h4><p>初始化：<code>const app = dva({\n    history: browserHistory\n});</code></p>\n<pre><code>function dva(hooks={}){\n    const history = hooks.history || defaultHistory;\n    const initialState = hooks.initialState || {};\n    delete hooks.history;\n    delete hooks.initialState;\n\n    const plugin = new Plugin();\n    plugin.use(hooks);\n\n    const app = {\n        //properties\n        _models:[],\n        _router:null,\n        _history:null,\n        _plugin:plugin,\n        _getProvider:null,\n        //methods\n        use,\n        models,\n        router,\n        start,\n    };\n    return app;\n}\n</code></pre><p>hooks:传入的配置，如history，这里可以知道dva默认采用的是hashHistory；<br>plugin:插件，此处暂不分析；<br>app.router()：指定路由，需要传入一个函数，一般类似于({history})=&gt;(<router>…</router>);<br>app.use():添加插件；<br>app.model():添加model，也就是对应的添加一个store下的数据，该方法做的就是对传入的model进行检查，对reducers添加命名空间，而后将其push到_models中<br>app.start():初始化应用，接受参数为选择器或者dom节点<br>需要注意的是： </p>\n<ul>\n<li>reducers和effects的key不需要用namespace/action的形式了，因为dva会自动将其加上，dispatch的时候，saga需要加上namespace，而saga中的put不需要加入namespace，原因是dva对put进行了重载</li>\n</ul>\n<h3 id=\"start函数\"><a href=\"#start函数\" class=\"headerlink\" title=\"start函数\"></a>start函数</h3><pre><code>function start(container) {\n// 允许 container 是字符串，然后用 querySelector 找元素\n    if (isString(container)) {\n          container = document.querySelector(container);\n          invariant(\n          container,\n        `[app.start] container ${container} not found`,\n          );\n    }\n\n// 并且是 HTMLElement\n    invariant(\n          !container || isHTMLElement(container),\n          `[app.start] container should be HTMLElement`,\n    );\n\n// 路由必须提前注册\n    invariant(\n          app._router,\n          `[app.start] router must be registered before app.start()`,\n    );\n\n    if (!app._store) {\n          oldAppStart.call(app);\n    }\n    const store = app._store;\n\n// export _getProvider for HMR\n// ref: https://github.com/dvajs/dva/issues/469\n    app._getProvider = getProvider.bind(null, store, app);\n\n// If has container, render; else, return react component\n    **if (container) {\n          render(container, store, app, app._router);\n          app._plugin.apply(&apos;onHmr&apos;)(render.bind(null, container, store, app));\n    } else {\n      return getProvider(store, this, this._router);\n    }**\n  }\n</code></pre><p>比较关心的页面初始渲染的函数</p>\n<pre><code>function render(container, store, app, router) {\n      const ReactDOM = require(&apos;react-dom&apos;);  // eslint-disable-line\n      ReactDOM.render(React.createElement(getProvider(store, app, router)), container);\n}\n</code></pre><p>比较重要的路由模块<br>  <code>function getProvider(store, app, router) {\n          return extraProps =&gt; (\n        &lt;Provider store={store}&gt;\n          { router({ app, history: app._history, ...extraProps }) }\n        &lt;/Provider&gt;\n      )；\n    }</code></p>\n<p>此时建议看一下一般项目中的入口文件index.js和路由文件router.js</p>\n<p>index.js</p>\n<pre><code>`// 1. Initialize\n    const app = dva({\n          history: browserHistory(),\n    });\n// 2. Plugins\n// app.use({});\n\n// 3. Register global model\napp.model(require(&apos;./models/global&apos;));\n\n// 4. Router\napp.router(router);\n\n// 5. Start\napp.start(&apos;#root&apos;);\n\nexport const store = app._store;`\n</code></pre><p>router.js</p>\n<pre><code>`function RouterConfig({ history, app }) {\n      const navData = getNavData(app);\n      const BasicLayout = getLayout(navData, &apos;BasicLayout&apos;).component;\n\n      const passProps = {\n        app,\n        navData,\n        getRouteData: (path) =&gt; {\n          return getRouteData(navData, path);\n        },\n      };\n\n      return (\n        &lt;LocaleProvider locale={zhCN}&gt;\n              &lt;Router history={history}&gt;\n                &lt;Switch&gt;\n                      &lt;Route path=&quot;/&quot; render={props =&gt; &lt;BasicLayout {...props} {...passProps} /&gt;} /&gt;\n                &lt;/Switch&gt;\n              &lt;/Router&gt;\n        &lt;/LocaleProvider&gt;\n          );\n}\n\nexport default RouterConfig;`\n</code></pre><p>以上可以基本明白一个dva的初始化页面是如何实现的，需要注意的是：<br>1、LocaleProvider是antd提供的国际化组件<br>2、Provider是react-redux提供的组件，其本质是一个react组件，具体参看源码，其核心是getChildContext方法</p>\n<pre><code>`import { Component, Children } from &apos;react&apos;\n import PropTypes from &apos;prop-types&apos;\n import storeShape from &apos;../utils/storeShape&apos;\n import warning from &apos;../utils/warning&apos;\n\nexport default class Provider extends Component {\n      getChildContext() {\n    return { store: this.store }\n  }\n\n  constructor(props, context) {\n    super(props, context)\n    this.store = props.store\n  }\n\n  render() {\n    return Children.only(this.props.children)\n      }\n}`\n</code></pre>"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2018-03-22T03:29:44.239Z","updated":"2018-03-22T03:27:54.993Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjf86gumv0001rcvwma3giqj8","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}