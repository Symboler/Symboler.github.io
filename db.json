{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/landscape/Gruntfile.js","hash":"412e30530784993c8997aa8b1319c669b83b91c2","modified":1524038886052},{"_id":"themes/landscape/README.md","hash":"e7cc82dc79596f36ba05a8139e7d6b2dfc4ae5f9","modified":1524038886054},{"_id":"themes/landscape/package.json","hash":"d07f326588fef82f1d23ae3101c9ddfff34c132f","modified":1524038886096},{"_id":"themes/landscape/.npmignore","hash":"ea2b285a29690f1eabbad0f3a158e34e9ccd1d86","modified":1524038886051},{"_id":"themes/landscape/_config.yml","hash":"218c5fb76666696c42dc86e2de4711e6b80befbf","modified":1524038886055},{"_id":"themes/landscape/LICENSE","hash":"82ce1e15ddeabeaaca60e2186b5a3ce42b1a9c49","modified":1524038886053},{"_id":"themes/landscape/languages/no.yml","hash":"ddf2035e920a5ecb9076138c184257d9f51896a7","modified":1524038886060},{"_id":"themes/landscape/languages/fr.yml","hash":"b4be1c1592a72012e48df2b3ec41cc9685573e50","modified":1524038886058},{"_id":"themes/landscape/languages/default.yml","hash":"f26a34a7983d4bc17c65c7f0f14da598e62ce66d","modified":1524038886057},{"_id":"themes/landscape/languages/nl.yml","hash":"3d82ec703d0b3287739d7cb4750a715ae83bfcb3","modified":1524038886059},{"_id":"source/_posts/alipay-questiones.md","hash":"d25788f6ca0fd1a3335bd356b8700568ee28688b","modified":1524538922723},{"_id":"source/_posts/first.md","hash":"071d782fe7f73bd9590779906049a21e9854258c","modified":1524038886047},{"_id":"source/_posts/redux.md","hash":"4b4cbeea06ecf32f75f86b5e281b3fd3e4ffbda7","modified":1524646802507},{"_id":"source/_posts/hello-world.md","hash":"029f91fccbe8f87c0f3ea10c4042300d2fa7edc0","modified":1524038886048},{"_id":"source/_posts/js-kuayu.md","hash":"edf7b4a4eea9e84fbecf4693e3e4325d1215710b","modified":1524038886049},{"_id":"source/_posts/reta.md","hash":"2674969f8edf819c37357e52fcb92d486973da1e","modified":1524539054012},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"b057f389c6713010f97d461e48ec959b0b6f3b44","modified":1524038886062},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"f5f0ca88185da7a8457760d84bf221781473bd7c","modified":1524038886064},{"_id":"themes/landscape/languages/ru.yml","hash":"2a476b4c6e04900914c81378941640ac5d58a1f0","modified":1524038886061},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1524038886091},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1524038886090},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1524038886089},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1524038886094},{"_id":"themes/landscape/scripts/fancybox.js","hash":"4c130fc242cf9b59b5df6ca5eae3b14302311e8c","modified":1524038886098},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1524038886095},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1524038886096},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"5062c723721d8497eebad372f57092ade45041f4","modified":1524038886067},{"_id":"themes/landscape/layout/layout.ejs","hash":"5d86bc48b0f1bdce9a2bb548c2f8e7a4f50d499a","modified":1524038886092},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"a7faab4f3601b28107af5b1095b3966c2f88fec8","modified":1524038886066},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"3beb0d164acacb6f21e1ca2038158a74ab4a73e4","modified":1524038886068},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"6faefe07f3d64e21c7743276e0f55ee1544f9d86","modified":1524038886070},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"347cf1befd2ea637c24bd5901929d8e36e359e75","modified":1524038886075},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"5cf2b8a1148e6f8c4bd9ca9e3b84c7e5a59d56bc","modified":1524038886069},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1524038886071},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"148bdf714dd1a7bf55e571f13808ceae079200cc","modified":1524038886073},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"89998e6b2929c4ff5093bbf6b86d611d7420be52","modified":1524038886072},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"0fe1e52c291c9499bd05b966e0b9aac5be351c58","modified":1524038886084},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"c70869569749a8f48cce202fa57926c06b55fdab","modified":1524038886082},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"866790acc13fed44b7ef74c3e19c300a3d6180d8","modified":1524038886085},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"6017c54a8c3c8ff8db491cfbea3100c139da75d6","modified":1524038886087},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"7259c179aa0c41c02e467ad892292e90430aaabc","modified":1524038886088},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"16800f85ffb036d2644a26e02facd61acb3706e9","modified":1524038886086},{"_id":"themes/landscape/source/css/_extend.styl","hash":"8ab1ad313bd6707d248c5ca1ee9a5eab8d815e42","modified":1524038886099},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1524038886158},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1524038886159},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1524038886161},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1524038886162},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1524038886162},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1524038886163},{"_id":"themes/landscape/source/css/style.styl","hash":"4a3e64ee8dad5834860c30b4176882eff628ca6b","modified":1524038886156},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"2da892a02778236b64076e5e8802ef0566e1d9e8","modified":1524038886173},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"58193c802f307ec9bc9e586c0e8a13ebef45d2f8","modified":1524038886172},{"_id":"themes/landscape/source/js/script.js","hash":"c0d368681c687258b628bacc84cc30d353de6d47","modified":1524038886174},{"_id":"themes/landscape/source/css/_variables.styl","hash":"8b63ea3c7199524b9a1541075c6f8fb2c0d0ea3d","modified":1524038886114},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"2e54d51d21e68ebc4bb870f6e57d3bfb660d4f9c","modified":1524038886170},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"947f513f7a85fbcf085624e46dc2ae6de8185eec","modified":1524038886077},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"cbb3819ce512bd24db8bad41b8617d46eba82fdc","modified":1524038886079},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1524038886081},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"16128d2422645e18d1b6882d4c4df17d895bd76e","modified":1524038886076},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"b0bf3f5d923c261ca2b5fabab513f1ec2708c8ca","modified":1524038886078},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"9e574d8eb1a5285ec3b4346607414770d2f7e0ff","modified":1524038886101},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"2834870661e490775f9154d71638bfdc72e640a6","modified":1524038886103},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"694b5101bcc44c9f9c1cc62e5ad2fdfb4b7c7a07","modified":1524038886080},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"6f7aa810f296d6a1a4486637b5a853d35a198938","modified":1524038886104},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"67e59feb18eee6026717cb440d86ab9551782628","modified":1524038886105},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"e291bc8c5f0c21080baa549d5d9ef2f39a871ea7","modified":1524038886102},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"ac19f1621305ca9f6a7b74acd211a4c0d88690bd","modified":1524038886106},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"680c7b809b62cd3ad294e822793fbd0b1a32cc33","modified":1524038886108},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"1fb15f13ba70d5b954f62920c6b63d26e2fb2985","modified":1524038886109},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"8d971a00e644a600179b04815688d188f094012e","modified":1524038886111},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"4132e25ba9680c4b911a01abc75f501cda3fa4f1","modified":1524038886110},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"429bad87fc156eacf226c5e35b0eafc277f2504b","modified":1524038886113},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"1aa883ab432d9e4139c89dcbd40ae2bd1528d029","modified":1524038886112},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1524038886116},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1524038886123},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1524038886165},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"4c9c395d705d22af7da06870d18f434e2a2eeaf9","modified":1524038886167},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"e14c32cc6823b81b2f758512f13ed8eb9ef2b454","modified":1524038886168},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1524038886166},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"83cdfea43632b613771691a11f56f99d85fb6dbd","modified":1524038886169},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1524038886118},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1524038886122},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1524038886168},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"a275426daefd3716c53561fad121d258a7f05b47","modified":1524038886120},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1524038886155},{"_id":"public/2018/04/18/hello-world/index.html","hash":"19ce0d62a494f13942fbb8c7408512ec039a4f47","modified":1524646833701},{"_id":"public/2018/04/15/js-kuayu/index.html","hash":"b024b3deb79e85f781c56460d289e4b80d6329f8","modified":1524646833708},{"_id":"public/archives/index.html","hash":"b759114ad34b64e8042dcc5babd812889904100f","modified":1524646833710},{"_id":"public/archives/2018/index.html","hash":"78c2a631fb0780a68971930cedb019566503dbdc","modified":1524646833710},{"_id":"public/archives/2018/03/index.html","hash":"642222c31ec2a6baff664520e79446c2ed5b28cf","modified":1524646833710},{"_id":"public/archives/2018/04/index.html","hash":"cff588060e5648da4199ae499cb15bfd16c0336e","modified":1524646833710},{"_id":"public/2018/04/24/reta/index.html","hash":"dce665ecf8d6e3ec47ed03020677a4e9abc1ef25","modified":1524646833710},{"_id":"public/2018/04/17/alipay-questiones/index.html","hash":"fa67798ef4132f2061a1a0084e17d5249ab8e319","modified":1524646833710},{"_id":"public/2018/03/22/first/index.html","hash":"d48b319107e8a4e67cda9aa12dbc59940072ec48","modified":1524646833710},{"_id":"public/2018/04/25/redux/index.html","hash":"deab6d1a0c6d6163b87756995c126b482c17bcdb","modified":1524646833711},{"_id":"public/index.html","hash":"981a48a6d9091374df7c5bee1c402719accb1848","modified":1524646833711}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"阿里2018面试题总结","date":"2018-04-17T12:18:46.000Z","_content":"## 动画实现方式\nHTML5/CSS3时代，我们要在web里做动画选择其实已经很多了:\n\n### 你可以用CSS3的animattion+keyframes;\n例子：\n\n`\n\n\tanimation:mymove 5s infinite;\n\t@keyframe mymove {\n  \t\tfrom {top:0;}\n  \t\tto{top:200px;}\n \t}\n`\n\n### 你也可以用css3的transition;\n例子：\n`\n\n\tdiv{\n\t\twidth:100px;\n\t\ttransition: width 2s;\n\t\t-moz-transition: width 2s; /* Firefox 4 */\n\t\t-webkit-transition: width 2s; /* Safari 和 Chrome */\n\t\t-o-transition: width 2s; /* Opera */\n\t}\n`\n\n#### 你还可以用通过在canvas上作图来实现动画，也可以借助jQuery动画相关的API方便地实现;\n\n#### 当然最原始的你还可以使用window.setTimout()或者window.setInterval()通过不断更新元素的状态位置等来实现动画，前提是画面的更新频率要达到每秒60次才能让肉眼看到流畅的动画效果。\n\n### window.requestAnimationFrame()方法。\nMDN上关于requestAnimationFrame的定义：\nThe window.requestAnimationFrame() method tells the browser that you wish to perform an animation and requests that the browser call a specified function to update an animation before the next repaint. The method takes as an argument a callback to be invoked before the repaint.\n\nwindow.requestAnimationFrame() 将告知浏览器你马上要开始动画效果了，后者需要在下次动画前调用相应方法来更新画面。这个方法就是传递给window.requestAnimationFrame()的回调函数。\n也可理解这个方法原理其实也就跟setTimeout/setInterval差不多，通过递归调用同一方法来不断更新画面以达到动起来的效果\n#### 基本用法\n可以直接调用，也可以通过window来调用，接收一个函数作为回调，返回一个ID值，通过把这个ID值传给window.cancelAnimationFrame()可以取消该次动画。\n\n    `requestAnimationFrame(callback)//callback为回调函数`\n例子：模拟一个进度条动画，初始div宽度为1px,在step函数中将进度加1然后再更新到div宽度上，在进度达到100之前，一直重复这一过程。\n\n`\n\n   \t<div id=\"test\" style=\"width:1px;height:17px;background:#0f0;\">0%</div>\n\t   <input type=\"button\" value=\"Run\" id=\"run\"/>\n\t\t//复制代码\n\twindow.requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame;\n\tvar start = null;\n\tvar ele = document.getElementById(\"test\");\n\tvar progress = 0;\n\n\tfunction step(timestamp) {\n    progress += 1;\n    ele.style.width = progress + \"%\";\n    ele.innerHTML=progress + \"%\";\n    if (progress < 100) {\n        requestAnimationFrame(step);\n    }\n\t}\n\trequestAnimationFrame(step);\n\tdocument.getElementById(\"run\").addEventListener(\"click\", function() {\n    ele.style.width = \"1px\";\n    progress = 0;\n    requestAnimationFrame(step);\n\t}, false);\n  `\n目前主流浏览器均支持，ie10+\n\n优点：\n  浏览器可以优化并行的动画动作，更合理的重新排列动作序列，并把能够合并的动作放在一个渲染周期内完成，从而呈现出更流畅的动画效果\n  解决毫秒的不准确性\n  避免过度渲染（渲染频率太高、tab不可见暂停等等）\n  优于setTimeout/setInterval的地方在于它是由浏览器专门为动画提供的API，在运行时浏览器会自动优化方法的调用，并且如果页面不是激活状态下的话，动画会自动暂停，有效节省了CPU开销。\n\n## 常用布局实现\n### 右边宽度固定，左边自适应\n第一种实现方式：flex定位\n    ` \n        \n        <style>\n          body{\n          display: flex;\n          }\n        .left{\n          background-color: rebeccapurple;\n          height: 200px;\n          flex: 1;\n        }\n        .right{\n          background-color: red;\n          height: 200px;\n          width: 100px;\n        }\n      </style>\n      <body>\n        <div class=\"left\"></div>\n        <div class=\"right\"></div>\n      </body>`\n第二种实现方式：浮动定位实现\n\n ` \n        \n       <style>\n          div {\n            height: 200px;\n          }\n          .left {\n            float: right;\n            width: 200px;\n            background-color: rebeccapurple;\n          }\n          .right {\n            margin-right: 200px;\n            background-color: red;\n          }\n      </style>\n      <body>\n        <div class=\"left\"></div>\n        <div class=\"right\"></div>\n      </body>`\n\n### 水平垂直居中\n第一种实现方式：绝对定位+transform\n` \n        \n       #container{\n          position:relative;\n          }\n       #center{\n          width:100px;\n          height:100px;\n          position:absolute;\n          top:50%;\n          left:50%;\n          transform: translate(-50%,-50%);\n        }`\n第二种实现方式：绝对定位+margin\n` \n        \n       #container{\n          position:relative;\n        }\n       #center{\n          width:100px;\n          height:100px;\n          position:absolute;\n          top:50%;\n          left:50%;\n          margin:-50px 0 0 -50px;\n      }`\n      \n第三种实现方式：绝对定位\n` \n        \n       #container{\n          position:relative;\n        }\n       #center{\n          position:absolute;\n          margin:auto;\n          top:0;\n          bottom:0;\n          left:0;\n          right:0;\n       }`\n第四种实现方式：flex定位\n` \n        \n       #container{\n          display:flex;\n          justify-content:center;\n          align-items: center;\n        }`\n        \n### 四种地位方式的区别\nstatic 是默认值；\nrelative 相对定位 相对于自身原有位置进行偏移，仍处于标准文档流中；\nabsolute 绝对定位 相对于最近的已定位的祖先元素, 有已定位(指 position不是 static的元素)祖先元素, 以最近的祖先元素为参考标准。如果无已定位祖先元素, 以 body元素为偏移参照基准, 完全脱离了标准文档流；\nfixed 固定定位的元素会相对于视窗来定位,这意味着即便页面滚动，它还是会停留在相同的位置。一个固定定位元素不会保留它原本在页面应有的空隙。\n## es6小问题\n### let和var的区别\nvar 声明的变量，其作用域为该语句所在的函数内，且存在变量提升现象\nlet 声明的变量，其作用域为该语句所在的代码块内，不存在变量提升，且不允许重复声明\n### 为什么var可以重复声明\n当我们执行代码时，我们可以简单的理解为新变量分配一块儿内存，命名为 a，并赋值为 2，但在运行的时候编译器与引擎还会进行两项额外的操作：判断变量是否已经声明：\n\n首先编译器对代码进行分析拆解，从左至右遇见 var a，则编译器会询问作用域是否已经存在叫 a 的变量了，如果不存在，则招呼作用域声明一个新的变量 a，若已经存在，则忽略 var 继续向下编译，这时 a = 2被编译成可执行的代码供引擎使用。\n引擎遇见 a=2时同样会询问在当前的作用域下是否有变量 a，若存在，则将 a赋值为\n2（由于第一步编译器忽略了重复声明的var，且作用域中已经有 a，所以重复声明会发生值的覆盖而并不会报错）。若不存在，则顺着作用域链向上查找，若最终找到了变量 a则将其赋值 2，若没有找到，则招呼作用域声明一个变量 a并赋值为 2。\n### 封装一个函数，参数是定时器的时间，.then执行回掉函数\n` \n        \n       function sleep (time) {\n        return new Promise((resolve) => setTimeout(resolve, time));\n      }`\n      \n### 关于this指向的问题\n` \n        \n      obj = {\n        name: 'a',\n        getName : function () {\n          console.log(this.name);\n        }\n      }\n      var fn = obj.getName\n      obj.getName()//a\n      var fn2 = obj.getName()//a\n      fn()//undefined\n      fn2()`//报错\n### CommonJS 中的 require/exports 和 ES6 中的 import/export 区别？\nCommonJS 模块的重要特性是加载时执行，即脚本代码在 require 的时候，就会全部执行。一旦出现某个模块被”循环加载”，就只输出已经执行的部分，还未执行的部分不会输出；\n\nES6 模块是动态引用，如果使用 import 从一个模块加载变量，那些变量不会被缓存，而是成为一个指向被加载模块的引用，需要开发者自己保证，真正取值的时候能够取到值；\nimport/export 最终都是编译为 require/exports 来执行的；\n\nCommonJS 规范规定，每个模块内部， module 变量代表当前模块。这个变量是一个对象，它的 exports 属性（即module.exports ）是对外的接口。加载某个模块，其实是加载该模块的 module.exports 属性；\n\nexport 命令规定的是对外的接口，必须与模块内部的变量建立一一对应关系。\n### 一行代码实现数组去重\n` \n    [...new Set([1,2,3,1,'a',1,'a'])]`\n### 使用addEventListener点击li弹出内容，并且动态添加li之后有效\n` \n        \n        <ul>\n          <li>1</li>\n          <li>2</li>\n          <li>3</li>\n          <li>4</li>\n        </ul>\n        var ulNode = document.getElementById(\"ul\");\n        ulNode.addEventListener('click', function (e) {\n          if (e.target && e.target.nodeName.toUpperCase() == \"LI\") {\n            alert(e.target.innerHTML);\n          }\n        }, false);`\n        \n### 怎么判断两个对象相等\n可以通过JSON.stringify将两个对象专成字符串再进行比较\n### 项目中性能优化的常用方式\n减少 HTTP 请求数\n减少 DNS 查询\n使用 CDN\n避免重定向\n图片懒加载\n减少 DOM 元素数量\n减少 DOM 操作\n使用外部 JavaScript 和 CSS\n压缩 JavaScript 、 CSS 、字体、图片等\n优化 CSS Sprite\n使用 iconfont\n字体裁剪\n多域名分发划分内容到不同域名\n尽量减少 iframe 使用\n避免图片 src 为空\n把脚本放在页面底部 \n### 模块化开发是怎么做的\n 使用命名空间\n### Set和Map的数据结构\nES6 提供了新的数据结构 Set 它类似于数组，但是成员的值都是唯一的，没有重复的值。\nES6 提供了 Map 数据结构。它类似于对象，也是键值对的集合，但是“键”的范围不限于字符串，各种类型的值（包括对象）都可以当作键。也就是说， Object 结构提供了“字符串—值”的对应， Map 结构提供了“值—值”的对应，是一种更完善的 Hash结构实现。\n### weakMap和Map的区别\nWeakMap 结构与 Map 结构基本类似，唯一的区别是它只接受对象作为键名（ null 除外），不接受其他类型的值作为键名，而且键名所指向的对象，不计入垃圾回收机制。\nWeakMap 最大的好处是可以避免内存泄漏。一个仅被 WeakMap 作为 key 而引用的对象，会被垃圾回收器回收掉。\nWeakMap 拥有和 Map 类似的 set(key, value) 、 get(key)、has(key)、 delete(key) 和 clear() 方法, 没有任何与迭代有关的属性和方法。\n### 重排和重绘\n部分渲染树（或者整个渲染树）需要重新分析并且节点尺寸需要重新计算。这被称为重排。注意这里至少会有一次重排-初始化页面布局。\n由于节点的几何属性发生改变或者由于样式发生改变，例如改变元素背景色时，屏幕上的部分内容需要更新。这样的更新被称为重绘。\n### 什么情况会触发重排和重绘？\n添加、删除、更新 DOM 节点\n通过 display: none 隐藏一个 DOM 节点-触发重排和重绘\n通过 visibility: hidden 隐藏一个 DOM 节点-只触发重绘，因为没有几何变化\n移动或者给页面中的 DOM 节点添加动画\n添加一个样式表，调整样式属性\n用户行为，例如调整窗口大小，改变字号，或者滚动。\n## 前端框架的小问题\n### webpack和gulp的基本了解\n### vue router跳转和location.href 有什么区别\nrouter是hash改变，location.href是页面跳转，刷新页面\n### vue双向绑定实现原理\n通过object.defineProperty实现的\n### 你能实现一下双向绑定吗？\n` \n        \n        <body>\n          <div id=\"app\">\n            <input type=\"text\" id=\"txt\">\n            <p id=\"show-txt\"></p>\n          </div>\n          <script>\n            var obj = {}\n            Object.defineProperty(obj, 'txt', {\n              get: function () {\n                return obj\n              },\n              set: function (newValue) {\n                document.getElementById('txt').value = newValue\n                document.getElementById('show-txt').innerHTML = newValue\n              }\n            })\n            document.addEventListener('keyup', function (e) {\n              obj.txt = e.target.value\n            })\n          </script>\n        </body>`\n## 浏览器缓存\n浏览器缓存分为强缓存和协商缓存。当客户端请求某个资源时，获取缓存的流程如下：\n\n先根据这个资源的一些 http header 判断它是否命中强缓存，如果命中，则直接从本地获取缓存资源，不会发请求到服务器；\n当强缓存没有命中时，客户端会发送请求到服务器，服务器通过另一些 request header验证这个资源是否命中协商缓存，称为 http再验证，如果命中，服务器将请求返回，但不返回资源，而是告诉客户端直接从缓存中获取，客户端收到返回后就会从缓存中获取资源；\n强缓存和协商缓存共同之处在于，如果命中缓存，服务器都不会返回资源；\n区别是，强缓存不对发送请求到服务器，但协商缓存会。\n当协商缓存也没命中时，服务器就会将资源发送回客户端。\n当 ctrl+f5 强制刷新网页时，直接从服务器加载，跳过强缓存和协商缓存；\n当 f5 刷新网页时，跳过强缓存，但是会检查协商缓存；\n强缓存\n\nExpires（该字段是 http1.0 时的规范，值为一个绝对时间的 GMT 格式的时间字符串，代表缓存资源的过期时间）\nCache-Control:max-age（该字段是 http1.1 的规范，强缓存利用其 max-age 值来判断缓存资源的最大生命周期，它的值单位为秒）\n协商缓存\n\nLast-Modified（值为资源最后更新时间，随服务器response返回）\nIf-Modified-Since（通过比较两个时间来判断资源在两次请求期间是否有过修改，如果没有修改，则命中协商缓存）\nETag（表示资源内容的唯一标识，随服务器response返回）\nIf-None-Match（服务器通过比较请求头部的If-None-Match与当前资源的ETag是否一致来判断资源是否在两次请求之间有过修改，如果没有修改，则命中协商缓存）  ","source":"_posts/alipay-questiones.md","raw":"---\ntitle: 阿里2018面试题总结\ndate: 2018-04-17 20:18:46\ntags:\n---\n## 动画实现方式\nHTML5/CSS3时代，我们要在web里做动画选择其实已经很多了:\n\n### 你可以用CSS3的animattion+keyframes;\n例子：\n\n`\n\n\tanimation:mymove 5s infinite;\n\t@keyframe mymove {\n  \t\tfrom {top:0;}\n  \t\tto{top:200px;}\n \t}\n`\n\n### 你也可以用css3的transition;\n例子：\n`\n\n\tdiv{\n\t\twidth:100px;\n\t\ttransition: width 2s;\n\t\t-moz-transition: width 2s; /* Firefox 4 */\n\t\t-webkit-transition: width 2s; /* Safari 和 Chrome */\n\t\t-o-transition: width 2s; /* Opera */\n\t}\n`\n\n#### 你还可以用通过在canvas上作图来实现动画，也可以借助jQuery动画相关的API方便地实现;\n\n#### 当然最原始的你还可以使用window.setTimout()或者window.setInterval()通过不断更新元素的状态位置等来实现动画，前提是画面的更新频率要达到每秒60次才能让肉眼看到流畅的动画效果。\n\n### window.requestAnimationFrame()方法。\nMDN上关于requestAnimationFrame的定义：\nThe window.requestAnimationFrame() method tells the browser that you wish to perform an animation and requests that the browser call a specified function to update an animation before the next repaint. The method takes as an argument a callback to be invoked before the repaint.\n\nwindow.requestAnimationFrame() 将告知浏览器你马上要开始动画效果了，后者需要在下次动画前调用相应方法来更新画面。这个方法就是传递给window.requestAnimationFrame()的回调函数。\n也可理解这个方法原理其实也就跟setTimeout/setInterval差不多，通过递归调用同一方法来不断更新画面以达到动起来的效果\n#### 基本用法\n可以直接调用，也可以通过window来调用，接收一个函数作为回调，返回一个ID值，通过把这个ID值传给window.cancelAnimationFrame()可以取消该次动画。\n\n    `requestAnimationFrame(callback)//callback为回调函数`\n例子：模拟一个进度条动画，初始div宽度为1px,在step函数中将进度加1然后再更新到div宽度上，在进度达到100之前，一直重复这一过程。\n\n`\n\n   \t<div id=\"test\" style=\"width:1px;height:17px;background:#0f0;\">0%</div>\n\t   <input type=\"button\" value=\"Run\" id=\"run\"/>\n\t\t//复制代码\n\twindow.requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame;\n\tvar start = null;\n\tvar ele = document.getElementById(\"test\");\n\tvar progress = 0;\n\n\tfunction step(timestamp) {\n    progress += 1;\n    ele.style.width = progress + \"%\";\n    ele.innerHTML=progress + \"%\";\n    if (progress < 100) {\n        requestAnimationFrame(step);\n    }\n\t}\n\trequestAnimationFrame(step);\n\tdocument.getElementById(\"run\").addEventListener(\"click\", function() {\n    ele.style.width = \"1px\";\n    progress = 0;\n    requestAnimationFrame(step);\n\t}, false);\n  `\n目前主流浏览器均支持，ie10+\n\n优点：\n  浏览器可以优化并行的动画动作，更合理的重新排列动作序列，并把能够合并的动作放在一个渲染周期内完成，从而呈现出更流畅的动画效果\n  解决毫秒的不准确性\n  避免过度渲染（渲染频率太高、tab不可见暂停等等）\n  优于setTimeout/setInterval的地方在于它是由浏览器专门为动画提供的API，在运行时浏览器会自动优化方法的调用，并且如果页面不是激活状态下的话，动画会自动暂停，有效节省了CPU开销。\n\n## 常用布局实现\n### 右边宽度固定，左边自适应\n第一种实现方式：flex定位\n    ` \n        \n        <style>\n          body{\n          display: flex;\n          }\n        .left{\n          background-color: rebeccapurple;\n          height: 200px;\n          flex: 1;\n        }\n        .right{\n          background-color: red;\n          height: 200px;\n          width: 100px;\n        }\n      </style>\n      <body>\n        <div class=\"left\"></div>\n        <div class=\"right\"></div>\n      </body>`\n第二种实现方式：浮动定位实现\n\n ` \n        \n       <style>\n          div {\n            height: 200px;\n          }\n          .left {\n            float: right;\n            width: 200px;\n            background-color: rebeccapurple;\n          }\n          .right {\n            margin-right: 200px;\n            background-color: red;\n          }\n      </style>\n      <body>\n        <div class=\"left\"></div>\n        <div class=\"right\"></div>\n      </body>`\n\n### 水平垂直居中\n第一种实现方式：绝对定位+transform\n` \n        \n       #container{\n          position:relative;\n          }\n       #center{\n          width:100px;\n          height:100px;\n          position:absolute;\n          top:50%;\n          left:50%;\n          transform: translate(-50%,-50%);\n        }`\n第二种实现方式：绝对定位+margin\n` \n        \n       #container{\n          position:relative;\n        }\n       #center{\n          width:100px;\n          height:100px;\n          position:absolute;\n          top:50%;\n          left:50%;\n          margin:-50px 0 0 -50px;\n      }`\n      \n第三种实现方式：绝对定位\n` \n        \n       #container{\n          position:relative;\n        }\n       #center{\n          position:absolute;\n          margin:auto;\n          top:0;\n          bottom:0;\n          left:0;\n          right:0;\n       }`\n第四种实现方式：flex定位\n` \n        \n       #container{\n          display:flex;\n          justify-content:center;\n          align-items: center;\n        }`\n        \n### 四种地位方式的区别\nstatic 是默认值；\nrelative 相对定位 相对于自身原有位置进行偏移，仍处于标准文档流中；\nabsolute 绝对定位 相对于最近的已定位的祖先元素, 有已定位(指 position不是 static的元素)祖先元素, 以最近的祖先元素为参考标准。如果无已定位祖先元素, 以 body元素为偏移参照基准, 完全脱离了标准文档流；\nfixed 固定定位的元素会相对于视窗来定位,这意味着即便页面滚动，它还是会停留在相同的位置。一个固定定位元素不会保留它原本在页面应有的空隙。\n## es6小问题\n### let和var的区别\nvar 声明的变量，其作用域为该语句所在的函数内，且存在变量提升现象\nlet 声明的变量，其作用域为该语句所在的代码块内，不存在变量提升，且不允许重复声明\n### 为什么var可以重复声明\n当我们执行代码时，我们可以简单的理解为新变量分配一块儿内存，命名为 a，并赋值为 2，但在运行的时候编译器与引擎还会进行两项额外的操作：判断变量是否已经声明：\n\n首先编译器对代码进行分析拆解，从左至右遇见 var a，则编译器会询问作用域是否已经存在叫 a 的变量了，如果不存在，则招呼作用域声明一个新的变量 a，若已经存在，则忽略 var 继续向下编译，这时 a = 2被编译成可执行的代码供引擎使用。\n引擎遇见 a=2时同样会询问在当前的作用域下是否有变量 a，若存在，则将 a赋值为\n2（由于第一步编译器忽略了重复声明的var，且作用域中已经有 a，所以重复声明会发生值的覆盖而并不会报错）。若不存在，则顺着作用域链向上查找，若最终找到了变量 a则将其赋值 2，若没有找到，则招呼作用域声明一个变量 a并赋值为 2。\n### 封装一个函数，参数是定时器的时间，.then执行回掉函数\n` \n        \n       function sleep (time) {\n        return new Promise((resolve) => setTimeout(resolve, time));\n      }`\n      \n### 关于this指向的问题\n` \n        \n      obj = {\n        name: 'a',\n        getName : function () {\n          console.log(this.name);\n        }\n      }\n      var fn = obj.getName\n      obj.getName()//a\n      var fn2 = obj.getName()//a\n      fn()//undefined\n      fn2()`//报错\n### CommonJS 中的 require/exports 和 ES6 中的 import/export 区别？\nCommonJS 模块的重要特性是加载时执行，即脚本代码在 require 的时候，就会全部执行。一旦出现某个模块被”循环加载”，就只输出已经执行的部分，还未执行的部分不会输出；\n\nES6 模块是动态引用，如果使用 import 从一个模块加载变量，那些变量不会被缓存，而是成为一个指向被加载模块的引用，需要开发者自己保证，真正取值的时候能够取到值；\nimport/export 最终都是编译为 require/exports 来执行的；\n\nCommonJS 规范规定，每个模块内部， module 变量代表当前模块。这个变量是一个对象，它的 exports 属性（即module.exports ）是对外的接口。加载某个模块，其实是加载该模块的 module.exports 属性；\n\nexport 命令规定的是对外的接口，必须与模块内部的变量建立一一对应关系。\n### 一行代码实现数组去重\n` \n    [...new Set([1,2,3,1,'a',1,'a'])]`\n### 使用addEventListener点击li弹出内容，并且动态添加li之后有效\n` \n        \n        <ul>\n          <li>1</li>\n          <li>2</li>\n          <li>3</li>\n          <li>4</li>\n        </ul>\n        var ulNode = document.getElementById(\"ul\");\n        ulNode.addEventListener('click', function (e) {\n          if (e.target && e.target.nodeName.toUpperCase() == \"LI\") {\n            alert(e.target.innerHTML);\n          }\n        }, false);`\n        \n### 怎么判断两个对象相等\n可以通过JSON.stringify将两个对象专成字符串再进行比较\n### 项目中性能优化的常用方式\n减少 HTTP 请求数\n减少 DNS 查询\n使用 CDN\n避免重定向\n图片懒加载\n减少 DOM 元素数量\n减少 DOM 操作\n使用外部 JavaScript 和 CSS\n压缩 JavaScript 、 CSS 、字体、图片等\n优化 CSS Sprite\n使用 iconfont\n字体裁剪\n多域名分发划分内容到不同域名\n尽量减少 iframe 使用\n避免图片 src 为空\n把脚本放在页面底部 \n### 模块化开发是怎么做的\n 使用命名空间\n### Set和Map的数据结构\nES6 提供了新的数据结构 Set 它类似于数组，但是成员的值都是唯一的，没有重复的值。\nES6 提供了 Map 数据结构。它类似于对象，也是键值对的集合，但是“键”的范围不限于字符串，各种类型的值（包括对象）都可以当作键。也就是说， Object 结构提供了“字符串—值”的对应， Map 结构提供了“值—值”的对应，是一种更完善的 Hash结构实现。\n### weakMap和Map的区别\nWeakMap 结构与 Map 结构基本类似，唯一的区别是它只接受对象作为键名（ null 除外），不接受其他类型的值作为键名，而且键名所指向的对象，不计入垃圾回收机制。\nWeakMap 最大的好处是可以避免内存泄漏。一个仅被 WeakMap 作为 key 而引用的对象，会被垃圾回收器回收掉。\nWeakMap 拥有和 Map 类似的 set(key, value) 、 get(key)、has(key)、 delete(key) 和 clear() 方法, 没有任何与迭代有关的属性和方法。\n### 重排和重绘\n部分渲染树（或者整个渲染树）需要重新分析并且节点尺寸需要重新计算。这被称为重排。注意这里至少会有一次重排-初始化页面布局。\n由于节点的几何属性发生改变或者由于样式发生改变，例如改变元素背景色时，屏幕上的部分内容需要更新。这样的更新被称为重绘。\n### 什么情况会触发重排和重绘？\n添加、删除、更新 DOM 节点\n通过 display: none 隐藏一个 DOM 节点-触发重排和重绘\n通过 visibility: hidden 隐藏一个 DOM 节点-只触发重绘，因为没有几何变化\n移动或者给页面中的 DOM 节点添加动画\n添加一个样式表，调整样式属性\n用户行为，例如调整窗口大小，改变字号，或者滚动。\n## 前端框架的小问题\n### webpack和gulp的基本了解\n### vue router跳转和location.href 有什么区别\nrouter是hash改变，location.href是页面跳转，刷新页面\n### vue双向绑定实现原理\n通过object.defineProperty实现的\n### 你能实现一下双向绑定吗？\n` \n        \n        <body>\n          <div id=\"app\">\n            <input type=\"text\" id=\"txt\">\n            <p id=\"show-txt\"></p>\n          </div>\n          <script>\n            var obj = {}\n            Object.defineProperty(obj, 'txt', {\n              get: function () {\n                return obj\n              },\n              set: function (newValue) {\n                document.getElementById('txt').value = newValue\n                document.getElementById('show-txt').innerHTML = newValue\n              }\n            })\n            document.addEventListener('keyup', function (e) {\n              obj.txt = e.target.value\n            })\n          </script>\n        </body>`\n## 浏览器缓存\n浏览器缓存分为强缓存和协商缓存。当客户端请求某个资源时，获取缓存的流程如下：\n\n先根据这个资源的一些 http header 判断它是否命中强缓存，如果命中，则直接从本地获取缓存资源，不会发请求到服务器；\n当强缓存没有命中时，客户端会发送请求到服务器，服务器通过另一些 request header验证这个资源是否命中协商缓存，称为 http再验证，如果命中，服务器将请求返回，但不返回资源，而是告诉客户端直接从缓存中获取，客户端收到返回后就会从缓存中获取资源；\n强缓存和协商缓存共同之处在于，如果命中缓存，服务器都不会返回资源；\n区别是，强缓存不对发送请求到服务器，但协商缓存会。\n当协商缓存也没命中时，服务器就会将资源发送回客户端。\n当 ctrl+f5 强制刷新网页时，直接从服务器加载，跳过强缓存和协商缓存；\n当 f5 刷新网页时，跳过强缓存，但是会检查协商缓存；\n强缓存\n\nExpires（该字段是 http1.0 时的规范，值为一个绝对时间的 GMT 格式的时间字符串，代表缓存资源的过期时间）\nCache-Control:max-age（该字段是 http1.1 的规范，强缓存利用其 max-age 值来判断缓存资源的最大生命周期，它的值单位为秒）\n协商缓存\n\nLast-Modified（值为资源最后更新时间，随服务器response返回）\nIf-Modified-Since（通过比较两个时间来判断资源在两次请求期间是否有过修改，如果没有修改，则命中协商缓存）\nETag（表示资源内容的唯一标识，随服务器response返回）\nIf-None-Match（服务器通过比较请求头部的If-None-Match与当前资源的ETag是否一致来判断资源是否在两次请求之间有过修改，如果没有修改，则命中协商缓存）  ","slug":"alipay-questiones","published":1,"updated":"2018-04-24T03:02:02.723Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgevaurx0000e0vwocm5koj9","content":"<h2 id=\"动画实现方式\"><a href=\"#动画实现方式\" class=\"headerlink\" title=\"动画实现方式\"></a>动画实现方式</h2><p>HTML5/CSS3时代，我们要在web里做动画选择其实已经很多了:</p>\n<h3 id=\"你可以用CSS3的animattion-keyframes\"><a href=\"#你可以用CSS3的animattion-keyframes\" class=\"headerlink\" title=\"你可以用CSS3的animattion+keyframes;\"></a>你可以用CSS3的animattion+keyframes;</h3><p>例子：</p>\n<p>`</p>\n<pre><code>animation:mymove 5s infinite;\n@keyframe mymove {\n      from {top:0;}\n      to{top:200px;}\n }\n</code></pre><p>`</p>\n<h3 id=\"你也可以用css3的transition\"><a href=\"#你也可以用css3的transition\" class=\"headerlink\" title=\"你也可以用css3的transition;\"></a>你也可以用css3的transition;</h3><p>例子：<br>`</p>\n<pre><code>div{\n    width:100px;\n    transition: width 2s;\n    -moz-transition: width 2s; /* Firefox 4 */\n    -webkit-transition: width 2s; /* Safari 和 Chrome */\n    -o-transition: width 2s; /* Opera */\n}\n</code></pre><p>`</p>\n<h4 id=\"你还可以用通过在canvas上作图来实现动画，也可以借助jQuery动画相关的API方便地实现\"><a href=\"#你还可以用通过在canvas上作图来实现动画，也可以借助jQuery动画相关的API方便地实现\" class=\"headerlink\" title=\"你还可以用通过在canvas上作图来实现动画，也可以借助jQuery动画相关的API方便地实现;\"></a>你还可以用通过在canvas上作图来实现动画，也可以借助jQuery动画相关的API方便地实现;</h4><h4 id=\"当然最原始的你还可以使用window-setTimout-或者window-setInterval-通过不断更新元素的状态位置等来实现动画，前提是画面的更新频率要达到每秒60次才能让肉眼看到流畅的动画效果。\"><a href=\"#当然最原始的你还可以使用window-setTimout-或者window-setInterval-通过不断更新元素的状态位置等来实现动画，前提是画面的更新频率要达到每秒60次才能让肉眼看到流畅的动画效果。\" class=\"headerlink\" title=\"当然最原始的你还可以使用window.setTimout()或者window.setInterval()通过不断更新元素的状态位置等来实现动画，前提是画面的更新频率要达到每秒60次才能让肉眼看到流畅的动画效果。\"></a>当然最原始的你还可以使用window.setTimout()或者window.setInterval()通过不断更新元素的状态位置等来实现动画，前提是画面的更新频率要达到每秒60次才能让肉眼看到流畅的动画效果。</h4><h3 id=\"window-requestAnimationFrame-方法。\"><a href=\"#window-requestAnimationFrame-方法。\" class=\"headerlink\" title=\"window.requestAnimationFrame()方法。\"></a>window.requestAnimationFrame()方法。</h3><p>MDN上关于requestAnimationFrame的定义：<br>The window.requestAnimationFrame() method tells the browser that you wish to perform an animation and requests that the browser call a specified function to update an animation before the next repaint. The method takes as an argument a callback to be invoked before the repaint.</p>\n<p>window.requestAnimationFrame() 将告知浏览器你马上要开始动画效果了，后者需要在下次动画前调用相应方法来更新画面。这个方法就是传递给window.requestAnimationFrame()的回调函数。<br>也可理解这个方法原理其实也就跟setTimeout/setInterval差不多，通过递归调用同一方法来不断更新画面以达到动起来的效果</p>\n<h4 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h4><p>可以直接调用，也可以通过window来调用，接收一个函数作为回调，返回一个ID值，通过把这个ID值传给window.cancelAnimationFrame()可以取消该次动画。</p>\n<pre><code>`requestAnimationFrame(callback)//callback为回调函数`\n</code></pre><p>例子：模拟一个进度条动画，初始div宽度为1px,在step函数中将进度加1然后再更新到div宽度上，在进度达到100之前，一直重复这一过程。</p>\n<p>`</p>\n<pre><code>   &lt;div id=&quot;test&quot; style=&quot;width:1px;height:17px;background:#0f0;&quot;&gt;0%&lt;/div&gt;\n   &lt;input type=&quot;button&quot; value=&quot;Run&quot; id=&quot;run&quot;/&gt;\n    //复制代码\nwindow.requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame;\nvar start = null;\nvar ele = document.getElementById(&quot;test&quot;);\nvar progress = 0;\n\nfunction step(timestamp) {\nprogress += 1;\nele.style.width = progress + &quot;%&quot;;\nele.innerHTML=progress + &quot;%&quot;;\nif (progress &lt; 100) {\n    requestAnimationFrame(step);\n}\n}\nrequestAnimationFrame(step);\ndocument.getElementById(&quot;run&quot;).addEventListener(&quot;click&quot;, function() {\nele.style.width = &quot;1px&quot;;\nprogress = 0;\nrequestAnimationFrame(step);\n}, false);\n</code></pre><p>  `<br>目前主流浏览器均支持，ie10+</p>\n<p>优点：<br>  浏览器可以优化并行的动画动作，更合理的重新排列动作序列，并把能够合并的动作放在一个渲染周期内完成，从而呈现出更流畅的动画效果<br>  解决毫秒的不准确性<br>  避免过度渲染（渲染频率太高、tab不可见暂停等等）<br>  优于setTimeout/setInterval的地方在于它是由浏览器专门为动画提供的API，在运行时浏览器会自动优化方法的调用，并且如果页面不是激活状态下的话，动画会自动暂停，有效节省了CPU开销。</p>\n<h2 id=\"常用布局实现\"><a href=\"#常用布局实现\" class=\"headerlink\" title=\"常用布局实现\"></a>常用布局实现</h2><h3 id=\"右边宽度固定，左边自适应\"><a href=\"#右边宽度固定，左边自适应\" class=\"headerlink\" title=\"右边宽度固定，左边自适应\"></a>右边宽度固定，左边自适应</h3><p>第一种实现方式：flex定位<br>    ` </p>\n<pre><code>  &lt;style&gt;\n    body{\n    display: flex;\n    }\n  .left{\n    background-color: rebeccapurple;\n    height: 200px;\n    flex: 1;\n  }\n  .right{\n    background-color: red;\n    height: 200px;\n    width: 100px;\n  }\n&lt;/style&gt;\n&lt;body&gt;\n  &lt;div class=&quot;left&quot;&gt;&lt;/div&gt;\n  &lt;div class=&quot;right&quot;&gt;&lt;/div&gt;\n&lt;/body&gt;`\n</code></pre><p>第二种实现方式：浮动定位实现</p>\n<p> ` </p>\n<pre><code> &lt;style&gt;\n    div {\n      height: 200px;\n    }\n    .left {\n      float: right;\n      width: 200px;\n      background-color: rebeccapurple;\n    }\n    .right {\n      margin-right: 200px;\n      background-color: red;\n    }\n&lt;/style&gt;\n&lt;body&gt;\n  &lt;div class=&quot;left&quot;&gt;&lt;/div&gt;\n  &lt;div class=&quot;right&quot;&gt;&lt;/div&gt;\n&lt;/body&gt;`\n</code></pre><h3 id=\"水平垂直居中\"><a href=\"#水平垂直居中\" class=\"headerlink\" title=\"水平垂直居中\"></a>水平垂直居中</h3><p>第一种实现方式：绝对定位+transform<br>` </p>\n<pre><code>#container{\n   position:relative;\n   }\n#center{\n   width:100px;\n   height:100px;\n   position:absolute;\n   top:50%;\n   left:50%;\n   transform: translate(-50%,-50%);\n }`\n</code></pre><p>第二种实现方式：绝对定位+margin<br>` </p>\n<pre><code> #container{\n    position:relative;\n  }\n #center{\n    width:100px;\n    height:100px;\n    position:absolute;\n    top:50%;\n    left:50%;\n    margin:-50px 0 0 -50px;\n}`\n</code></pre><p>第三种实现方式：绝对定位<br>` </p>\n<pre><code>#container{\n   position:relative;\n }\n#center{\n   position:absolute;\n   margin:auto;\n   top:0;\n   bottom:0;\n   left:0;\n   right:0;\n}`\n</code></pre><p>第四种实现方式：flex定位<br>` </p>\n<pre><code>#container{\n   display:flex;\n   justify-content:center;\n   align-items: center;\n }`\n</code></pre><h3 id=\"四种地位方式的区别\"><a href=\"#四种地位方式的区别\" class=\"headerlink\" title=\"四种地位方式的区别\"></a>四种地位方式的区别</h3><p>static 是默认值；<br>relative 相对定位 相对于自身原有位置进行偏移，仍处于标准文档流中；<br>absolute 绝对定位 相对于最近的已定位的祖先元素, 有已定位(指 position不是 static的元素)祖先元素, 以最近的祖先元素为参考标准。如果无已定位祖先元素, 以 body元素为偏移参照基准, 完全脱离了标准文档流；<br>fixed 固定定位的元素会相对于视窗来定位,这意味着即便页面滚动，它还是会停留在相同的位置。一个固定定位元素不会保留它原本在页面应有的空隙。</p>\n<h2 id=\"es6小问题\"><a href=\"#es6小问题\" class=\"headerlink\" title=\"es6小问题\"></a>es6小问题</h2><h3 id=\"let和var的区别\"><a href=\"#let和var的区别\" class=\"headerlink\" title=\"let和var的区别\"></a>let和var的区别</h3><p>var 声明的变量，其作用域为该语句所在的函数内，且存在变量提升现象<br>let 声明的变量，其作用域为该语句所在的代码块内，不存在变量提升，且不允许重复声明</p>\n<h3 id=\"为什么var可以重复声明\"><a href=\"#为什么var可以重复声明\" class=\"headerlink\" title=\"为什么var可以重复声明\"></a>为什么var可以重复声明</h3><p>当我们执行代码时，我们可以简单的理解为新变量分配一块儿内存，命名为 a，并赋值为 2，但在运行的时候编译器与引擎还会进行两项额外的操作：判断变量是否已经声明：</p>\n<p>首先编译器对代码进行分析拆解，从左至右遇见 var a，则编译器会询问作用域是否已经存在叫 a 的变量了，如果不存在，则招呼作用域声明一个新的变量 a，若已经存在，则忽略 var 继续向下编译，这时 a = 2被编译成可执行的代码供引擎使用。<br>引擎遇见 a=2时同样会询问在当前的作用域下是否有变量 a，若存在，则将 a赋值为<br>2（由于第一步编译器忽略了重复声明的var，且作用域中已经有 a，所以重复声明会发生值的覆盖而并不会报错）。若不存在，则顺着作用域链向上查找，若最终找到了变量 a则将其赋值 2，若没有找到，则招呼作用域声明一个变量 a并赋值为 2。</p>\n<h3 id=\"封装一个函数，参数是定时器的时间，-then执行回掉函数\"><a href=\"#封装一个函数，参数是定时器的时间，-then执行回掉函数\" class=\"headerlink\" title=\"封装一个函数，参数是定时器的时间，.then执行回掉函数\"></a>封装一个函数，参数是定时器的时间，.then执行回掉函数</h3><p>` </p>\n<pre><code> function sleep (time) {\n  return new Promise((resolve) =&gt; setTimeout(resolve, time));\n}`\n</code></pre><h3 id=\"关于this指向的问题\"><a href=\"#关于this指向的问题\" class=\"headerlink\" title=\"关于this指向的问题\"></a>关于this指向的问题</h3><p>` </p>\n<pre><code>obj = {\n  name: &apos;a&apos;,\n  getName : function () {\n    console.log(this.name);\n  }\n}\nvar fn = obj.getName\nobj.getName()//a\nvar fn2 = obj.getName()//a\nfn()//undefined\nfn2()`//报错\n</code></pre><h3 id=\"CommonJS-中的-require-exports-和-ES6-中的-import-export-区别？\"><a href=\"#CommonJS-中的-require-exports-和-ES6-中的-import-export-区别？\" class=\"headerlink\" title=\"CommonJS 中的 require/exports 和 ES6 中的 import/export 区别？\"></a>CommonJS 中的 require/exports 和 ES6 中的 import/export 区别？</h3><p>CommonJS 模块的重要特性是加载时执行，即脚本代码在 require 的时候，就会全部执行。一旦出现某个模块被”循环加载”，就只输出已经执行的部分，还未执行的部分不会输出；</p>\n<p>ES6 模块是动态引用，如果使用 import 从一个模块加载变量，那些变量不会被缓存，而是成为一个指向被加载模块的引用，需要开发者自己保证，真正取值的时候能够取到值；<br>import/export 最终都是编译为 require/exports 来执行的；</p>\n<p>CommonJS 规范规定，每个模块内部， module 变量代表当前模块。这个变量是一个对象，它的 exports 属性（即module.exports ）是对外的接口。加载某个模块，其实是加载该模块的 module.exports 属性；</p>\n<p>export 命令规定的是对外的接口，必须与模块内部的变量建立一一对应关系。</p>\n<h3 id=\"一行代码实现数组去重\"><a href=\"#一行代码实现数组去重\" class=\"headerlink\" title=\"一行代码实现数组去重\"></a>一行代码实现数组去重</h3><p><code>[...new Set([1,2,3,1,&#39;a&#39;,1,&#39;a&#39;])]</code></p>\n<h3 id=\"使用addEventListener点击li弹出内容，并且动态添加li之后有效\"><a href=\"#使用addEventListener点击li弹出内容，并且动态添加li之后有效\" class=\"headerlink\" title=\"使用addEventListener点击li弹出内容，并且动态添加li之后有效\"></a>使用addEventListener点击li弹出内容，并且动态添加li之后有效</h3><p>` </p>\n<pre><code>&lt;ul&gt;\n  &lt;li&gt;1&lt;/li&gt;\n  &lt;li&gt;2&lt;/li&gt;\n  &lt;li&gt;3&lt;/li&gt;\n  &lt;li&gt;4&lt;/li&gt;\n&lt;/ul&gt;\nvar ulNode = document.getElementById(&quot;ul&quot;);\nulNode.addEventListener(&apos;click&apos;, function (e) {\n  if (e.target &amp;&amp; e.target.nodeName.toUpperCase() == &quot;LI&quot;) {\n    alert(e.target.innerHTML);\n  }\n}, false);`\n</code></pre><h3 id=\"怎么判断两个对象相等\"><a href=\"#怎么判断两个对象相等\" class=\"headerlink\" title=\"怎么判断两个对象相等\"></a>怎么判断两个对象相等</h3><p>可以通过JSON.stringify将两个对象专成字符串再进行比较</p>\n<h3 id=\"项目中性能优化的常用方式\"><a href=\"#项目中性能优化的常用方式\" class=\"headerlink\" title=\"项目中性能优化的常用方式\"></a>项目中性能优化的常用方式</h3><p>减少 HTTP 请求数<br>减少 DNS 查询<br>使用 CDN<br>避免重定向<br>图片懒加载<br>减少 DOM 元素数量<br>减少 DOM 操作<br>使用外部 JavaScript 和 CSS<br>压缩 JavaScript 、 CSS 、字体、图片等<br>优化 CSS Sprite<br>使用 iconfont<br>字体裁剪<br>多域名分发划分内容到不同域名<br>尽量减少 iframe 使用<br>避免图片 src 为空<br>把脚本放在页面底部 </p>\n<h3 id=\"模块化开发是怎么做的\"><a href=\"#模块化开发是怎么做的\" class=\"headerlink\" title=\"模块化开发是怎么做的\"></a>模块化开发是怎么做的</h3><p> 使用命名空间</p>\n<h3 id=\"Set和Map的数据结构\"><a href=\"#Set和Map的数据结构\" class=\"headerlink\" title=\"Set和Map的数据结构\"></a>Set和Map的数据结构</h3><p>ES6 提供了新的数据结构 Set 它类似于数组，但是成员的值都是唯一的，没有重复的值。<br>ES6 提供了 Map 数据结构。它类似于对象，也是键值对的集合，但是“键”的范围不限于字符串，各种类型的值（包括对象）都可以当作键。也就是说， Object 结构提供了“字符串—值”的对应， Map 结构提供了“值—值”的对应，是一种更完善的 Hash结构实现。</p>\n<h3 id=\"weakMap和Map的区别\"><a href=\"#weakMap和Map的区别\" class=\"headerlink\" title=\"weakMap和Map的区别\"></a>weakMap和Map的区别</h3><p>WeakMap 结构与 Map 结构基本类似，唯一的区别是它只接受对象作为键名（ null 除外），不接受其他类型的值作为键名，而且键名所指向的对象，不计入垃圾回收机制。<br>WeakMap 最大的好处是可以避免内存泄漏。一个仅被 WeakMap 作为 key 而引用的对象，会被垃圾回收器回收掉。<br>WeakMap 拥有和 Map 类似的 set(key, value) 、 get(key)、has(key)、 delete(key) 和 clear() 方法, 没有任何与迭代有关的属性和方法。</p>\n<h3 id=\"重排和重绘\"><a href=\"#重排和重绘\" class=\"headerlink\" title=\"重排和重绘\"></a>重排和重绘</h3><p>部分渲染树（或者整个渲染树）需要重新分析并且节点尺寸需要重新计算。这被称为重排。注意这里至少会有一次重排-初始化页面布局。<br>由于节点的几何属性发生改变或者由于样式发生改变，例如改变元素背景色时，屏幕上的部分内容需要更新。这样的更新被称为重绘。</p>\n<h3 id=\"什么情况会触发重排和重绘？\"><a href=\"#什么情况会触发重排和重绘？\" class=\"headerlink\" title=\"什么情况会触发重排和重绘？\"></a>什么情况会触发重排和重绘？</h3><p>添加、删除、更新 DOM 节点<br>通过 display: none 隐藏一个 DOM 节点-触发重排和重绘<br>通过 visibility: hidden 隐藏一个 DOM 节点-只触发重绘，因为没有几何变化<br>移动或者给页面中的 DOM 节点添加动画<br>添加一个样式表，调整样式属性<br>用户行为，例如调整窗口大小，改变字号，或者滚动。</p>\n<h2 id=\"前端框架的小问题\"><a href=\"#前端框架的小问题\" class=\"headerlink\" title=\"前端框架的小问题\"></a>前端框架的小问题</h2><h3 id=\"webpack和gulp的基本了解\"><a href=\"#webpack和gulp的基本了解\" class=\"headerlink\" title=\"webpack和gulp的基本了解\"></a>webpack和gulp的基本了解</h3><h3 id=\"vue-router跳转和location-href-有什么区别\"><a href=\"#vue-router跳转和location-href-有什么区别\" class=\"headerlink\" title=\"vue router跳转和location.href 有什么区别\"></a>vue router跳转和location.href 有什么区别</h3><p>router是hash改变，location.href是页面跳转，刷新页面</p>\n<h3 id=\"vue双向绑定实现原理\"><a href=\"#vue双向绑定实现原理\" class=\"headerlink\" title=\"vue双向绑定实现原理\"></a>vue双向绑定实现原理</h3><p>通过object.defineProperty实现的</p>\n<h3 id=\"你能实现一下双向绑定吗？\"><a href=\"#你能实现一下双向绑定吗？\" class=\"headerlink\" title=\"你能实现一下双向绑定吗？\"></a>你能实现一下双向绑定吗？</h3><p>` </p>\n<pre><code>&lt;body&gt;\n  &lt;div id=&quot;app&quot;&gt;\n    &lt;input type=&quot;text&quot; id=&quot;txt&quot;&gt;\n    &lt;p id=&quot;show-txt&quot;&gt;&lt;/p&gt;\n  &lt;/div&gt;\n  &lt;script&gt;\n    var obj = {}\n    Object.defineProperty(obj, &apos;txt&apos;, {\n      get: function () {\n        return obj\n      },\n      set: function (newValue) {\n        document.getElementById(&apos;txt&apos;).value = newValue\n        document.getElementById(&apos;show-txt&apos;).innerHTML = newValue\n      }\n    })\n    document.addEventListener(&apos;keyup&apos;, function (e) {\n      obj.txt = e.target.value\n    })\n  &lt;/script&gt;\n&lt;/body&gt;`\n</code></pre><h2 id=\"浏览器缓存\"><a href=\"#浏览器缓存\" class=\"headerlink\" title=\"浏览器缓存\"></a>浏览器缓存</h2><p>浏览器缓存分为强缓存和协商缓存。当客户端请求某个资源时，获取缓存的流程如下：</p>\n<p>先根据这个资源的一些 http header 判断它是否命中强缓存，如果命中，则直接从本地获取缓存资源，不会发请求到服务器；<br>当强缓存没有命中时，客户端会发送请求到服务器，服务器通过另一些 request header验证这个资源是否命中协商缓存，称为 http再验证，如果命中，服务器将请求返回，但不返回资源，而是告诉客户端直接从缓存中获取，客户端收到返回后就会从缓存中获取资源；<br>强缓存和协商缓存共同之处在于，如果命中缓存，服务器都不会返回资源；<br>区别是，强缓存不对发送请求到服务器，但协商缓存会。<br>当协商缓存也没命中时，服务器就会将资源发送回客户端。<br>当 ctrl+f5 强制刷新网页时，直接从服务器加载，跳过强缓存和协商缓存；<br>当 f5 刷新网页时，跳过强缓存，但是会检查协商缓存；<br>强缓存</p>\n<p>Expires（该字段是 http1.0 时的规范，值为一个绝对时间的 GMT 格式的时间字符串，代表缓存资源的过期时间）<br>Cache-Control:max-age（该字段是 http1.1 的规范，强缓存利用其 max-age 值来判断缓存资源的最大生命周期，它的值单位为秒）<br>协商缓存</p>\n<p>Last-Modified（值为资源最后更新时间，随服务器response返回）<br>If-Modified-Since（通过比较两个时间来判断资源在两次请求期间是否有过修改，如果没有修改，则命中协商缓存）<br>ETag（表示资源内容的唯一标识，随服务器response返回）<br>If-None-Match（服务器通过比较请求头部的If-None-Match与当前资源的ETag是否一致来判断资源是否在两次请求之间有过修改，如果没有修改，则命中协商缓存）  </p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"动画实现方式\"><a href=\"#动画实现方式\" class=\"headerlink\" title=\"动画实现方式\"></a>动画实现方式</h2><p>HTML5/CSS3时代，我们要在web里做动画选择其实已经很多了:</p>\n<h3 id=\"你可以用CSS3的animattion-keyframes\"><a href=\"#你可以用CSS3的animattion-keyframes\" class=\"headerlink\" title=\"你可以用CSS3的animattion+keyframes;\"></a>你可以用CSS3的animattion+keyframes;</h3><p>例子：</p>\n<p>`</p>\n<pre><code>animation:mymove 5s infinite;\n@keyframe mymove {\n      from {top:0;}\n      to{top:200px;}\n }\n</code></pre><p>`</p>\n<h3 id=\"你也可以用css3的transition\"><a href=\"#你也可以用css3的transition\" class=\"headerlink\" title=\"你也可以用css3的transition;\"></a>你也可以用css3的transition;</h3><p>例子：<br>`</p>\n<pre><code>div{\n    width:100px;\n    transition: width 2s;\n    -moz-transition: width 2s; /* Firefox 4 */\n    -webkit-transition: width 2s; /* Safari 和 Chrome */\n    -o-transition: width 2s; /* Opera */\n}\n</code></pre><p>`</p>\n<h4 id=\"你还可以用通过在canvas上作图来实现动画，也可以借助jQuery动画相关的API方便地实现\"><a href=\"#你还可以用通过在canvas上作图来实现动画，也可以借助jQuery动画相关的API方便地实现\" class=\"headerlink\" title=\"你还可以用通过在canvas上作图来实现动画，也可以借助jQuery动画相关的API方便地实现;\"></a>你还可以用通过在canvas上作图来实现动画，也可以借助jQuery动画相关的API方便地实现;</h4><h4 id=\"当然最原始的你还可以使用window-setTimout-或者window-setInterval-通过不断更新元素的状态位置等来实现动画，前提是画面的更新频率要达到每秒60次才能让肉眼看到流畅的动画效果。\"><a href=\"#当然最原始的你还可以使用window-setTimout-或者window-setInterval-通过不断更新元素的状态位置等来实现动画，前提是画面的更新频率要达到每秒60次才能让肉眼看到流畅的动画效果。\" class=\"headerlink\" title=\"当然最原始的你还可以使用window.setTimout()或者window.setInterval()通过不断更新元素的状态位置等来实现动画，前提是画面的更新频率要达到每秒60次才能让肉眼看到流畅的动画效果。\"></a>当然最原始的你还可以使用window.setTimout()或者window.setInterval()通过不断更新元素的状态位置等来实现动画，前提是画面的更新频率要达到每秒60次才能让肉眼看到流畅的动画效果。</h4><h3 id=\"window-requestAnimationFrame-方法。\"><a href=\"#window-requestAnimationFrame-方法。\" class=\"headerlink\" title=\"window.requestAnimationFrame()方法。\"></a>window.requestAnimationFrame()方法。</h3><p>MDN上关于requestAnimationFrame的定义：<br>The window.requestAnimationFrame() method tells the browser that you wish to perform an animation and requests that the browser call a specified function to update an animation before the next repaint. The method takes as an argument a callback to be invoked before the repaint.</p>\n<p>window.requestAnimationFrame() 将告知浏览器你马上要开始动画效果了，后者需要在下次动画前调用相应方法来更新画面。这个方法就是传递给window.requestAnimationFrame()的回调函数。<br>也可理解这个方法原理其实也就跟setTimeout/setInterval差不多，通过递归调用同一方法来不断更新画面以达到动起来的效果</p>\n<h4 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h4><p>可以直接调用，也可以通过window来调用，接收一个函数作为回调，返回一个ID值，通过把这个ID值传给window.cancelAnimationFrame()可以取消该次动画。</p>\n<pre><code>`requestAnimationFrame(callback)//callback为回调函数`\n</code></pre><p>例子：模拟一个进度条动画，初始div宽度为1px,在step函数中将进度加1然后再更新到div宽度上，在进度达到100之前，一直重复这一过程。</p>\n<p>`</p>\n<pre><code>   &lt;div id=&quot;test&quot; style=&quot;width:1px;height:17px;background:#0f0;&quot;&gt;0%&lt;/div&gt;\n   &lt;input type=&quot;button&quot; value=&quot;Run&quot; id=&quot;run&quot;/&gt;\n    //复制代码\nwindow.requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame;\nvar start = null;\nvar ele = document.getElementById(&quot;test&quot;);\nvar progress = 0;\n\nfunction step(timestamp) {\nprogress += 1;\nele.style.width = progress + &quot;%&quot;;\nele.innerHTML=progress + &quot;%&quot;;\nif (progress &lt; 100) {\n    requestAnimationFrame(step);\n}\n}\nrequestAnimationFrame(step);\ndocument.getElementById(&quot;run&quot;).addEventListener(&quot;click&quot;, function() {\nele.style.width = &quot;1px&quot;;\nprogress = 0;\nrequestAnimationFrame(step);\n}, false);\n</code></pre><p>  `<br>目前主流浏览器均支持，ie10+</p>\n<p>优点：<br>  浏览器可以优化并行的动画动作，更合理的重新排列动作序列，并把能够合并的动作放在一个渲染周期内完成，从而呈现出更流畅的动画效果<br>  解决毫秒的不准确性<br>  避免过度渲染（渲染频率太高、tab不可见暂停等等）<br>  优于setTimeout/setInterval的地方在于它是由浏览器专门为动画提供的API，在运行时浏览器会自动优化方法的调用，并且如果页面不是激活状态下的话，动画会自动暂停，有效节省了CPU开销。</p>\n<h2 id=\"常用布局实现\"><a href=\"#常用布局实现\" class=\"headerlink\" title=\"常用布局实现\"></a>常用布局实现</h2><h3 id=\"右边宽度固定，左边自适应\"><a href=\"#右边宽度固定，左边自适应\" class=\"headerlink\" title=\"右边宽度固定，左边自适应\"></a>右边宽度固定，左边自适应</h3><p>第一种实现方式：flex定位<br>    ` </p>\n<pre><code>  &lt;style&gt;\n    body{\n    display: flex;\n    }\n  .left{\n    background-color: rebeccapurple;\n    height: 200px;\n    flex: 1;\n  }\n  .right{\n    background-color: red;\n    height: 200px;\n    width: 100px;\n  }\n&lt;/style&gt;\n&lt;body&gt;\n  &lt;div class=&quot;left&quot;&gt;&lt;/div&gt;\n  &lt;div class=&quot;right&quot;&gt;&lt;/div&gt;\n&lt;/body&gt;`\n</code></pre><p>第二种实现方式：浮动定位实现</p>\n<p> ` </p>\n<pre><code> &lt;style&gt;\n    div {\n      height: 200px;\n    }\n    .left {\n      float: right;\n      width: 200px;\n      background-color: rebeccapurple;\n    }\n    .right {\n      margin-right: 200px;\n      background-color: red;\n    }\n&lt;/style&gt;\n&lt;body&gt;\n  &lt;div class=&quot;left&quot;&gt;&lt;/div&gt;\n  &lt;div class=&quot;right&quot;&gt;&lt;/div&gt;\n&lt;/body&gt;`\n</code></pre><h3 id=\"水平垂直居中\"><a href=\"#水平垂直居中\" class=\"headerlink\" title=\"水平垂直居中\"></a>水平垂直居中</h3><p>第一种实现方式：绝对定位+transform<br>` </p>\n<pre><code>#container{\n   position:relative;\n   }\n#center{\n   width:100px;\n   height:100px;\n   position:absolute;\n   top:50%;\n   left:50%;\n   transform: translate(-50%,-50%);\n }`\n</code></pre><p>第二种实现方式：绝对定位+margin<br>` </p>\n<pre><code> #container{\n    position:relative;\n  }\n #center{\n    width:100px;\n    height:100px;\n    position:absolute;\n    top:50%;\n    left:50%;\n    margin:-50px 0 0 -50px;\n}`\n</code></pre><p>第三种实现方式：绝对定位<br>` </p>\n<pre><code>#container{\n   position:relative;\n }\n#center{\n   position:absolute;\n   margin:auto;\n   top:0;\n   bottom:0;\n   left:0;\n   right:0;\n}`\n</code></pre><p>第四种实现方式：flex定位<br>` </p>\n<pre><code>#container{\n   display:flex;\n   justify-content:center;\n   align-items: center;\n }`\n</code></pre><h3 id=\"四种地位方式的区别\"><a href=\"#四种地位方式的区别\" class=\"headerlink\" title=\"四种地位方式的区别\"></a>四种地位方式的区别</h3><p>static 是默认值；<br>relative 相对定位 相对于自身原有位置进行偏移，仍处于标准文档流中；<br>absolute 绝对定位 相对于最近的已定位的祖先元素, 有已定位(指 position不是 static的元素)祖先元素, 以最近的祖先元素为参考标准。如果无已定位祖先元素, 以 body元素为偏移参照基准, 完全脱离了标准文档流；<br>fixed 固定定位的元素会相对于视窗来定位,这意味着即便页面滚动，它还是会停留在相同的位置。一个固定定位元素不会保留它原本在页面应有的空隙。</p>\n<h2 id=\"es6小问题\"><a href=\"#es6小问题\" class=\"headerlink\" title=\"es6小问题\"></a>es6小问题</h2><h3 id=\"let和var的区别\"><a href=\"#let和var的区别\" class=\"headerlink\" title=\"let和var的区别\"></a>let和var的区别</h3><p>var 声明的变量，其作用域为该语句所在的函数内，且存在变量提升现象<br>let 声明的变量，其作用域为该语句所在的代码块内，不存在变量提升，且不允许重复声明</p>\n<h3 id=\"为什么var可以重复声明\"><a href=\"#为什么var可以重复声明\" class=\"headerlink\" title=\"为什么var可以重复声明\"></a>为什么var可以重复声明</h3><p>当我们执行代码时，我们可以简单的理解为新变量分配一块儿内存，命名为 a，并赋值为 2，但在运行的时候编译器与引擎还会进行两项额外的操作：判断变量是否已经声明：</p>\n<p>首先编译器对代码进行分析拆解，从左至右遇见 var a，则编译器会询问作用域是否已经存在叫 a 的变量了，如果不存在，则招呼作用域声明一个新的变量 a，若已经存在，则忽略 var 继续向下编译，这时 a = 2被编译成可执行的代码供引擎使用。<br>引擎遇见 a=2时同样会询问在当前的作用域下是否有变量 a，若存在，则将 a赋值为<br>2（由于第一步编译器忽略了重复声明的var，且作用域中已经有 a，所以重复声明会发生值的覆盖而并不会报错）。若不存在，则顺着作用域链向上查找，若最终找到了变量 a则将其赋值 2，若没有找到，则招呼作用域声明一个变量 a并赋值为 2。</p>\n<h3 id=\"封装一个函数，参数是定时器的时间，-then执行回掉函数\"><a href=\"#封装一个函数，参数是定时器的时间，-then执行回掉函数\" class=\"headerlink\" title=\"封装一个函数，参数是定时器的时间，.then执行回掉函数\"></a>封装一个函数，参数是定时器的时间，.then执行回掉函数</h3><p>` </p>\n<pre><code> function sleep (time) {\n  return new Promise((resolve) =&gt; setTimeout(resolve, time));\n}`\n</code></pre><h3 id=\"关于this指向的问题\"><a href=\"#关于this指向的问题\" class=\"headerlink\" title=\"关于this指向的问题\"></a>关于this指向的问题</h3><p>` </p>\n<pre><code>obj = {\n  name: &apos;a&apos;,\n  getName : function () {\n    console.log(this.name);\n  }\n}\nvar fn = obj.getName\nobj.getName()//a\nvar fn2 = obj.getName()//a\nfn()//undefined\nfn2()`//报错\n</code></pre><h3 id=\"CommonJS-中的-require-exports-和-ES6-中的-import-export-区别？\"><a href=\"#CommonJS-中的-require-exports-和-ES6-中的-import-export-区别？\" class=\"headerlink\" title=\"CommonJS 中的 require/exports 和 ES6 中的 import/export 区别？\"></a>CommonJS 中的 require/exports 和 ES6 中的 import/export 区别？</h3><p>CommonJS 模块的重要特性是加载时执行，即脚本代码在 require 的时候，就会全部执行。一旦出现某个模块被”循环加载”，就只输出已经执行的部分，还未执行的部分不会输出；</p>\n<p>ES6 模块是动态引用，如果使用 import 从一个模块加载变量，那些变量不会被缓存，而是成为一个指向被加载模块的引用，需要开发者自己保证，真正取值的时候能够取到值；<br>import/export 最终都是编译为 require/exports 来执行的；</p>\n<p>CommonJS 规范规定，每个模块内部， module 变量代表当前模块。这个变量是一个对象，它的 exports 属性（即module.exports ）是对外的接口。加载某个模块，其实是加载该模块的 module.exports 属性；</p>\n<p>export 命令规定的是对外的接口，必须与模块内部的变量建立一一对应关系。</p>\n<h3 id=\"一行代码实现数组去重\"><a href=\"#一行代码实现数组去重\" class=\"headerlink\" title=\"一行代码实现数组去重\"></a>一行代码实现数组去重</h3><p><code>[...new Set([1,2,3,1,&#39;a&#39;,1,&#39;a&#39;])]</code></p>\n<h3 id=\"使用addEventListener点击li弹出内容，并且动态添加li之后有效\"><a href=\"#使用addEventListener点击li弹出内容，并且动态添加li之后有效\" class=\"headerlink\" title=\"使用addEventListener点击li弹出内容，并且动态添加li之后有效\"></a>使用addEventListener点击li弹出内容，并且动态添加li之后有效</h3><p>` </p>\n<pre><code>&lt;ul&gt;\n  &lt;li&gt;1&lt;/li&gt;\n  &lt;li&gt;2&lt;/li&gt;\n  &lt;li&gt;3&lt;/li&gt;\n  &lt;li&gt;4&lt;/li&gt;\n&lt;/ul&gt;\nvar ulNode = document.getElementById(&quot;ul&quot;);\nulNode.addEventListener(&apos;click&apos;, function (e) {\n  if (e.target &amp;&amp; e.target.nodeName.toUpperCase() == &quot;LI&quot;) {\n    alert(e.target.innerHTML);\n  }\n}, false);`\n</code></pre><h3 id=\"怎么判断两个对象相等\"><a href=\"#怎么判断两个对象相等\" class=\"headerlink\" title=\"怎么判断两个对象相等\"></a>怎么判断两个对象相等</h3><p>可以通过JSON.stringify将两个对象专成字符串再进行比较</p>\n<h3 id=\"项目中性能优化的常用方式\"><a href=\"#项目中性能优化的常用方式\" class=\"headerlink\" title=\"项目中性能优化的常用方式\"></a>项目中性能优化的常用方式</h3><p>减少 HTTP 请求数<br>减少 DNS 查询<br>使用 CDN<br>避免重定向<br>图片懒加载<br>减少 DOM 元素数量<br>减少 DOM 操作<br>使用外部 JavaScript 和 CSS<br>压缩 JavaScript 、 CSS 、字体、图片等<br>优化 CSS Sprite<br>使用 iconfont<br>字体裁剪<br>多域名分发划分内容到不同域名<br>尽量减少 iframe 使用<br>避免图片 src 为空<br>把脚本放在页面底部 </p>\n<h3 id=\"模块化开发是怎么做的\"><a href=\"#模块化开发是怎么做的\" class=\"headerlink\" title=\"模块化开发是怎么做的\"></a>模块化开发是怎么做的</h3><p> 使用命名空间</p>\n<h3 id=\"Set和Map的数据结构\"><a href=\"#Set和Map的数据结构\" class=\"headerlink\" title=\"Set和Map的数据结构\"></a>Set和Map的数据结构</h3><p>ES6 提供了新的数据结构 Set 它类似于数组，但是成员的值都是唯一的，没有重复的值。<br>ES6 提供了 Map 数据结构。它类似于对象，也是键值对的集合，但是“键”的范围不限于字符串，各种类型的值（包括对象）都可以当作键。也就是说， Object 结构提供了“字符串—值”的对应， Map 结构提供了“值—值”的对应，是一种更完善的 Hash结构实现。</p>\n<h3 id=\"weakMap和Map的区别\"><a href=\"#weakMap和Map的区别\" class=\"headerlink\" title=\"weakMap和Map的区别\"></a>weakMap和Map的区别</h3><p>WeakMap 结构与 Map 结构基本类似，唯一的区别是它只接受对象作为键名（ null 除外），不接受其他类型的值作为键名，而且键名所指向的对象，不计入垃圾回收机制。<br>WeakMap 最大的好处是可以避免内存泄漏。一个仅被 WeakMap 作为 key 而引用的对象，会被垃圾回收器回收掉。<br>WeakMap 拥有和 Map 类似的 set(key, value) 、 get(key)、has(key)、 delete(key) 和 clear() 方法, 没有任何与迭代有关的属性和方法。</p>\n<h3 id=\"重排和重绘\"><a href=\"#重排和重绘\" class=\"headerlink\" title=\"重排和重绘\"></a>重排和重绘</h3><p>部分渲染树（或者整个渲染树）需要重新分析并且节点尺寸需要重新计算。这被称为重排。注意这里至少会有一次重排-初始化页面布局。<br>由于节点的几何属性发生改变或者由于样式发生改变，例如改变元素背景色时，屏幕上的部分内容需要更新。这样的更新被称为重绘。</p>\n<h3 id=\"什么情况会触发重排和重绘？\"><a href=\"#什么情况会触发重排和重绘？\" class=\"headerlink\" title=\"什么情况会触发重排和重绘？\"></a>什么情况会触发重排和重绘？</h3><p>添加、删除、更新 DOM 节点<br>通过 display: none 隐藏一个 DOM 节点-触发重排和重绘<br>通过 visibility: hidden 隐藏一个 DOM 节点-只触发重绘，因为没有几何变化<br>移动或者给页面中的 DOM 节点添加动画<br>添加一个样式表，调整样式属性<br>用户行为，例如调整窗口大小，改变字号，或者滚动。</p>\n<h2 id=\"前端框架的小问题\"><a href=\"#前端框架的小问题\" class=\"headerlink\" title=\"前端框架的小问题\"></a>前端框架的小问题</h2><h3 id=\"webpack和gulp的基本了解\"><a href=\"#webpack和gulp的基本了解\" class=\"headerlink\" title=\"webpack和gulp的基本了解\"></a>webpack和gulp的基本了解</h3><h3 id=\"vue-router跳转和location-href-有什么区别\"><a href=\"#vue-router跳转和location-href-有什么区别\" class=\"headerlink\" title=\"vue router跳转和location.href 有什么区别\"></a>vue router跳转和location.href 有什么区别</h3><p>router是hash改变，location.href是页面跳转，刷新页面</p>\n<h3 id=\"vue双向绑定实现原理\"><a href=\"#vue双向绑定实现原理\" class=\"headerlink\" title=\"vue双向绑定实现原理\"></a>vue双向绑定实现原理</h3><p>通过object.defineProperty实现的</p>\n<h3 id=\"你能实现一下双向绑定吗？\"><a href=\"#你能实现一下双向绑定吗？\" class=\"headerlink\" title=\"你能实现一下双向绑定吗？\"></a>你能实现一下双向绑定吗？</h3><p>` </p>\n<pre><code>&lt;body&gt;\n  &lt;div id=&quot;app&quot;&gt;\n    &lt;input type=&quot;text&quot; id=&quot;txt&quot;&gt;\n    &lt;p id=&quot;show-txt&quot;&gt;&lt;/p&gt;\n  &lt;/div&gt;\n  &lt;script&gt;\n    var obj = {}\n    Object.defineProperty(obj, &apos;txt&apos;, {\n      get: function () {\n        return obj\n      },\n      set: function (newValue) {\n        document.getElementById(&apos;txt&apos;).value = newValue\n        document.getElementById(&apos;show-txt&apos;).innerHTML = newValue\n      }\n    })\n    document.addEventListener(&apos;keyup&apos;, function (e) {\n      obj.txt = e.target.value\n    })\n  &lt;/script&gt;\n&lt;/body&gt;`\n</code></pre><h2 id=\"浏览器缓存\"><a href=\"#浏览器缓存\" class=\"headerlink\" title=\"浏览器缓存\"></a>浏览器缓存</h2><p>浏览器缓存分为强缓存和协商缓存。当客户端请求某个资源时，获取缓存的流程如下：</p>\n<p>先根据这个资源的一些 http header 判断它是否命中强缓存，如果命中，则直接从本地获取缓存资源，不会发请求到服务器；<br>当强缓存没有命中时，客户端会发送请求到服务器，服务器通过另一些 request header验证这个资源是否命中协商缓存，称为 http再验证，如果命中，服务器将请求返回，但不返回资源，而是告诉客户端直接从缓存中获取，客户端收到返回后就会从缓存中获取资源；<br>强缓存和协商缓存共同之处在于，如果命中缓存，服务器都不会返回资源；<br>区别是，强缓存不对发送请求到服务器，但协商缓存会。<br>当协商缓存也没命中时，服务器就会将资源发送回客户端。<br>当 ctrl+f5 强制刷新网页时，直接从服务器加载，跳过强缓存和协商缓存；<br>当 f5 刷新网页时，跳过强缓存，但是会检查协商缓存；<br>强缓存</p>\n<p>Expires（该字段是 http1.0 时的规范，值为一个绝对时间的 GMT 格式的时间字符串，代表缓存资源的过期时间）<br>Cache-Control:max-age（该字段是 http1.1 的规范，强缓存利用其 max-age 值来判断缓存资源的最大生命周期，它的值单位为秒）<br>协商缓存</p>\n<p>Last-Modified（值为资源最后更新时间，随服务器response返回）<br>If-Modified-Since（通过比较两个时间来判断资源在两次请求期间是否有过修改，如果没有修改，则命中协商缓存）<br>ETag（表示资源内容的唯一标识，随服务器response返回）<br>If-None-Match（服务器通过比较请求头部的If-None-Match与当前资源的ETag是否一致来判断资源是否在两次请求之间有过修改，如果没有修改，则命中协商缓存）  </p>\n"},{"title":"dva的基本使用以及核心源码分析","date":"2018-03-22T12:02:01.000Z","_content":"## dva基本思想 ##\ndva是对redux、redux-router和redux-saga进行了封装，未引入其他新的概念。在处理redux异步控制上实现了优化。按照作者sorrycc的定义：dva 是 react 和 redux 的最佳实践。\n## dva的demo分析 ##\n语言基础：es6和react\n主要工具：\n\n- 开发工具（vscode，subline）\n- 包管理工具（npm）\n- es6编译工具（babel https://my.oschina.net/dkvirus/blog/1517941）\n- 项目启动打包工具（Roadhog https://github.com/sorrycc/roadhog）\n- 模拟后台接口（mockjs）\n- 版本控制工具（git）\n- 代码检查工具（ESLint https://my.oschina.net/dkvirus/blog/1506899）\n\n项目结构：\n![](https://i.imgur.com/PYfnS2T.png)\n脚手架做的几件事情：\n- 自动创建一个包含package.json的项目\n- 自动创建成体系的目录结构\n- 自动安装项目需要的基础包\n- 集成代码检查工具ESLint\n- 集成模拟接口工具mock\n- 集成服务启动打包工具Roadhog\n- 集成版本控制工具Git\n\n### 各文件目录主要的作用 ###\n- package.json 项目的配置文件\n- public 文件夹中存放静态资源，比如图片，静态页面html等\n- src 文件夹是项目代码存放文件夹，是项目最核心的代码，具体在后面进行详细介绍。\n- node_modules 放置所有项目引入的依赖包\n- .eslintrc 代码检查的配置文件\n- mock 文件夹、.roadhogrc.mock.js文件 是项目中的模拟接口\n- .roadhogrc 集成服务启动打包工具Roadhog（主要作用：与其他插件集成、启动服务、打包项目）\n- .gitingore 配置git相关设置\n\n### 具体的代码分析 ###\n#### 从入口文件index.js开始 ####\n初始化：`const app = dva({\n    history: browserHistory\n});`\n\n    function dva(hooks={}){\n\t\tconst history = hooks.history || defaultHistory;\n\t\tconst initialState = hooks.initialState || {};\n\t\tdelete hooks.history;\n\t\tdelete hooks.initialState;\n\n\t\tconst plugin = new Plugin();\n\t\tplugin.use(hooks);\n\n\t\tconst app = {\n\t\t\t//properties\n\t\t\t_models:[],\n\t\t\t_router:null,\n\t\t\t_history:null,\n\t\t\t_plugin:plugin,\n\t\t\t_getProvider:null,\n\t\t\t//methods\n\t\t\tuse,\n\t\t\tmodels,\n\t\t\trouter,\n\t\t\tstart,\n\t\t};\n\t\treturn app;\n\t}\n\nhooks:传入的配置，如history，这里可以知道dva默认采用的是hashHistory；\nplugin:插件，此处暂不分析；\napp.router()：指定路由，需要传入一个函数，一般类似于({history})=>(<Router>...</Router>);\napp.use():添加插件；\napp.model():添加model，也就是对应的添加一个store下的数据，该方法做的就是对传入的model进行检查，对reducers添加命名空间，而后将其push到_models中\napp.start():初始化应用，接受参数为选择器或者dom节点\n需要注意的是： \n- reducers和effects的key不需要用namespace/action的形式了，因为dva会自动将其加上，dispatch的时候，saga需要加上namespace，而saga中的put不需要加入namespace，原因是dva对put进行了重载\n\n\n### start函数 ###\n    function start(container) {\n    // 允许 container 是字符串，然后用 querySelector 找元素\n    \tif (isString(container)) {\n      \t\tcontainer = document.querySelector(container);\n      \t\tinvariant(\n        \t  container,\n        \t`[app.start] container ${container} not found`,\n      \t\t);\n    \t}\n\n    // 并且是 HTMLElement\n    \tinvariant(\n      \t\t!container || isHTMLElement(container),\n      \t\t`[app.start] container should be HTMLElement`,\n    \t);\n\n    // 路由必须提前注册\n    \tinvariant(\n      \t\tapp._router,\n      \t\t`[app.start] router must be registered before app.start()`,\n    \t);\n\n    \tif (!app._store) {\n      \t\toldAppStart.call(app);\n    \t}\n    \tconst store = app._store;\n\n    // export _getProvider for HMR\n    // ref: https://github.com/dvajs/dva/issues/469\n    \tapp._getProvider = getProvider.bind(null, store, app);\n\n    // If has container, render; else, return react component\n    \t**if (container) {\n      \t\trender(container, store, app, app._router);\n      \t\tapp._plugin.apply('onHmr')(render.bind(null, container, store, app));\n    \t} else {\n      \treturn getProvider(store, this, this._router);\n    \t}**\n  \t}\n\n比较关心的页面初始渲染的函数\n    \n\tfunction render(container, store, app, router) {\n  \t\tconst ReactDOM = require('react-dom');  // eslint-disable-line\n  \t\tReactDOM.render(React.createElement(getProvider(store, app, router)), container);\n\t}\n\n比较重要的路由模块\n  `function getProvider(store, app, router) {\n  \t\treturn extraProps => (\n    \t<Provider store={store}>\n      \t{ router({ app, history: app._history, ...extraProps }) }\n    \t</Provider>\n  \t)；\n\t}`\n\n此时建议看一下一般项目中的入口文件index.js和路由文件router.js\n\nindex.js\n   \t\n\t`// 1. Initialize\n\t\tconst app = dva({\n  \t\t\thistory: browserHistory(),\n\t\t});\n\t// 2. Plugins\n\t// app.use({});\n\n\t// 3. Register global model\n\tapp.model(require('./models/global'));\n\n\t// 4. Router\n\tapp.router(router);\n\n\t// 5. Start\n\tapp.start('#root');\n\n\texport const store = app._store;`\n\nrouter.js\n\n    `function RouterConfig({ history, app }) {\n  \t\tconst navData = getNavData(app);\n  \t\tconst BasicLayout = getLayout(navData, 'BasicLayout').component;\n\n  \t\tconst passProps = {\n    \t\tapp,\n    \t\tnavData,\n    \t\tgetRouteData: (path) => {\n      \t\treturn getRouteData(navData, path);\n    \t\t},\n  \t\t};\n\n  \t\treturn (\n    \t\t<LocaleProvider locale={zhCN}>\n      \t\t\t<Router history={history}>\n        \t\t\t<Switch>\n          \t\t\t\t<Route path=\"/\" render={props => <BasicLayout {...props} {...passProps} />} />\n        \t\t\t</Switch>\n      \t\t\t</Router>\n    \t\t</LocaleProvider>\n  \t\t\t);\n\t}\n\n\texport default RouterConfig;`\n\n以上可以基本明白一个dva的初始化页面是如何实现的，需要注意的是：\n1、LocaleProvider是antd提供的国际化组件\n2、Provider是react-redux提供的组件，其本质是一个react组件，具体参看源码，其核心是getChildContext方法\n \n\t`import { Component, Children } from 'react'\n\t import PropTypes from 'prop-types'\n\t import storeShape from '../utils/storeShape'\n\t import warning from '../utils/warning'\n\n\texport default class Provider extends Component {\n  \t\tgetChildContext() {\n    \treturn { store: this.store }\n  \t}\n\n  \tconstructor(props, context) {\n    \tsuper(props, context)\n    \tthis.store = props.store\n  \t}\n\n  \trender() {\n    \treturn Children.only(this.props.children)\n  \t\t}\n\t}`\n接下来是dva的核心部分，就是如何完成状态管理，必须看明白model的作用\n\n\t` /**\n   \t* Register model before app is started.\n   \t*\n   \t* @param m {Object} model to register\n   \t*/\n  \tfunction model(m) {\n\t\t//开发模式下，需要对model的格式进行检查\n    \tif (process.env.NODE_ENV !== 'production') {\n      \tcheckModel(m, app._models);\n    \t}\n\t\t//通过model方法将model注入_models属性，把 reducer, initialState, action, saga 封装到一起\n   \t app._models.push(prefixNamespace(m));\n  \t}`\n\n    `function prefix(obj, namespace, type) {\n  \t\treturn Object.keys(obj).reduce((memo, key) => {\n    \t\twarning(\n      \t\tkey.indexOf(`${namespace}${NAMESPACE_SEP}`) !== 0,\n      \t\t`[prefixNamespace]: ${type} ${key} should not be prefixed with namespace ${namespace}`,\n    \t\t);\n    \t\tconst newKey = `${namespace}${NAMESPACE_SEP}${key}`;\n    \t\tmemo[newKey] = obj[key];\n    \t\treturn memo;\n  \t\t}, {});\n\t}\n\n\texport default function prefixNamespace(model) {\n  \t\tconst {\n    \t\tnamespace,\n    \t\treducers,\n    \t\teffects,\n  \t\t} = model;\n\n  \tif (reducers) {\n    \tif (isArray(reducers)) {\n      \t\tmodel.reducers[0] = prefix(reducers[0], namespace, 'reducer');\n    \t} else {\n      \t\tmodel.reducers = prefix(reducers, namespace, 'reducer');\n    \t}\n  \t}\n  \tif (effects) {\n    \tmodel.effects = prefix(effects, namespace, 'effect');\n  \t}\n  \treturn model;\n\t}\n\timport warning from 'warning';\n\timport { isArray } from './utils';//const isArray = Array.isArray.bind(Array);\n\timport { NAMESPACE_SEP } from './constants';//const NAMESPACE_SEP = '/';\n\n\tfunction prefix(obj, namespace, type) {\n  \t\treturn Object.keys(obj).reduce((memo, key) => {\n    \t\twarning(\n      \t\tkey.indexOf(`${namespace}${NAMESPACE_SEP}`) !== 0,\n      \t\t`[prefixNamespace]: ${type} ${key} should not be prefixed with namespace ${namespace}`,\n    \t);\n    \tconst newKey = `${namespace}${NAMESPACE_SEP}${key}`;\n    \tmemo[newKey] = obj[key];\n    \treturn memo;\n  \t}, {});\n\t}\n\n\texport default function prefixNamespace(model) {\n  \t\tconst {\n    \t\tnamespace,\n    \t\treducers,\n    \t\teffects,\n  \t\t} = model;\n\n  \t\tif (reducers) {\n\t\t//此处是将所有的reducers和effects添加为完整路径，前面加上\"namespace/**\"\n    \t\tif (isArray(reducers)) {\n      \t\tmodel.reducers[0] = prefix(reducers[0], namespace, 'reducer');\n    \t\t} else {\n      \t\tmodel.reducers = prefix(reducers, namespace, 'reducer');\n    \t\t}\n  \t\t}\n  \t\tif (effects) {\n    \t\tmodel.effects = prefix(effects, namespace, 'effect');\n  \t\t}\n  \t\treturn model;\n\t}`\n\n此处可结合model的实例进行分析：\n\n\t`import { queryNotices } from 'Services/notices';\n\t import { getWebCig } from 'Services/global';\n\t import { webCig, headerMenu } from '../common/constants/initState.js';\n\n\t export default {\n  \t\tnamespace: 'global',\n\n  \t\tstate: {\n    \t\tnotices: [],\n    \t\tfetchingNotices: false,\n    \t\twebCig,\n    \t\theaderMenu: headerMenu,\n  \t\t},\n\n  \t\teffects: {\n    \t\t*fetchNotices({ query }, { call, put }) {\n      \t\t\tyield put({\n        \t\t\ttype: 'changeNoticeLoading',\n        \t\t\tpayload: true,\n      \t\t\t});\n      \t\t\tconst res = yield call(queryNotices, query);\n      \t\t\tyield put({\n        \t\t\ttype: 'saveNotices',\n        \t\t\tpayload: res.data.list,\n      \t\t\t});\n    \t\t},\n    \t\t*clearNotices({ payload }, { put, select }) {\n      \t\t\tconst count = yield select(state => state.global.notices.length);\n      \t\t\tyield put({\n        \t\t\ttype: 'user/changeNotifyCount',\n        \t\t\tpayload: count,\n      \t\t\t});\n\n      \t\t\tyield put({\n        \t\t\ttype: 'saveClearedNotices',\n        \t\t\tpayload,\n      \t\t\t});\n    \t\t},\n    \t\t*fetchWebCig(_, { call, put }) {\n      \t\t\ttry {\n        \t\t\tconst res = yield call(getWebCig);\n        \t\t\tif (res.status === 'success') {\n          \t\t\t\tyield put({\n            \t\t\t\ttype: 'saveWebCig',\n            \t\t\t\tpayload: res.data,\n          \t\t\t\t});\n        \t\t\t}\n      \t\t\t} catch(e) {\n\n      \t\t\t}\n    \t\t},\n  \t},\n\n  \treducers: {\n    \tsaveNotices(state, { payload }) {\n      \treturn {\n        \t...state,\n        \tnotices: payload,\n        \tfetchingNotices: false,\n      \t};\n    \t},\n    \tsaveClearedNotices(state, { payload }) {\n      \treturn {\n        \t...state,\n        \tnotices: state.notices.filter(item => item.type !== payload),\n      \t};\n    \t},\n    \tchangeNoticeLoading(state, { payload }) {\n      \treturn {\n        \t...state,\n        \tfetchingNotices: payload,\n      \t};\n    \t},\n    \tcleanNotices(state, _) {\n      \treturn {\n        \t...state,\n        \tnotices: [],\n      \t};\n    \t},\n    \tsaveWebCig(state, { payload }) {\n      \treturn {\n        \t...state,\n        \twebCig: payload,\n      \t};\n    \t},\n  \t},\n\n  \tsubscriptions: {\n    \tsetup({ history }) {\n      \t// Subscribe history(url) change, trigger `load` action if pathname is `/`\n      \treturn history.listen(({ pathname, search }) => {\n        \tif (typeof window.ga !== 'undefined') {\n          \t\twindow.ga('send', 'pageview', pathname + search);\n        \t}\n      \t});\n    \t},\n  \t},\n\t};`\n\n关注一下dva里面的store来源\n\n\t`const store = app._store = createStore({ // eslint-disable-line\n      \t\treducers: createReducer(),\n      \t\tinitialState: hooksAndOpts.initialState || {},\n      \t\tplugin,\n      \t\tcreateOpts,\n      \t\tsagaMiddleware,\n      \t\tpromiseMiddleware,\n    \t});\n\t这里的createStore是对redux的createStore方法进行了扩展封装\n\timport { createStore, applyMiddleware, compose } from 'redux';\n\timport flatten from 'flatten';\n\timport invariant from 'invariant';\n\timport window from 'global/window';\n\timport { returnSelf, isArray } from './utils';\n\n\texport default function ({\n  \treducers,\n  \tinitialState,\n  \tplugin,\n  \tsagaMiddleware,\n  \tpromiseMiddleware,\n  \tcreateOpts: {\n    \tsetupMiddlewares = returnSelf,\n  \t},\n\t}) {\n  \t\t// extra enhancers\n  \t\tconst extraEnhancers = plugin.get('extraEnhancers');\n  \t\tinvariant(\n    \t\tisArray(extraEnhancers),\n    \t\t`[app.start] extraEnhancers should be array, but got ${typeof extraEnhancers}`,\n  \t\t);\n\n  \tconst extraMiddlewares = plugin.get('onAction');\n  \tconst middlewares = setupMiddlewares([\n    \tsagaMiddleware,\n    \tpromiseMiddleware,\n    \t...flatten(extraMiddlewares),\n  \t]);\n\n  \tlet devtools = () => noop => noop;\n  \tif (process.env.NODE_ENV !== 'production' && \twindow.__REDUX_DEVTOOLS_EXTENSION__) {\n    \tdevtools = window.__REDUX_DEVTOOLS_EXTENSION__;\n  \t}\n\n  \tconst enhancers = [\n    \tapplyMiddleware(...middlewares),\n    \t...extraEnhancers,\n    \tdevtools(window.__REDUX_DEVTOOLS_EXTENSION__OPTIONS),\n  \t];\n\n  \treturn createStore(reducers, initialState, compose(...enhancers));\n\t}`\n\n关于redux的部分可以深入了解https://zhuanlan.zhihu.com/p/22809799，http://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_one_basic_usages.html 我们这里不再展开\n\nflux———redux————react-redux————sage————dva\n\n\n\n\n","source":"_posts/first.md","raw":"---\ntitle: dva的基本使用以及核心源码分析\ndate: 2018-03-22 20:02:01\ntags:\n---\n## dva基本思想 ##\ndva是对redux、redux-router和redux-saga进行了封装，未引入其他新的概念。在处理redux异步控制上实现了优化。按照作者sorrycc的定义：dva 是 react 和 redux 的最佳实践。\n## dva的demo分析 ##\n语言基础：es6和react\n主要工具：\n\n- 开发工具（vscode，subline）\n- 包管理工具（npm）\n- es6编译工具（babel https://my.oschina.net/dkvirus/blog/1517941）\n- 项目启动打包工具（Roadhog https://github.com/sorrycc/roadhog）\n- 模拟后台接口（mockjs）\n- 版本控制工具（git）\n- 代码检查工具（ESLint https://my.oschina.net/dkvirus/blog/1506899）\n\n项目结构：\n![](https://i.imgur.com/PYfnS2T.png)\n脚手架做的几件事情：\n- 自动创建一个包含package.json的项目\n- 自动创建成体系的目录结构\n- 自动安装项目需要的基础包\n- 集成代码检查工具ESLint\n- 集成模拟接口工具mock\n- 集成服务启动打包工具Roadhog\n- 集成版本控制工具Git\n\n### 各文件目录主要的作用 ###\n- package.json 项目的配置文件\n- public 文件夹中存放静态资源，比如图片，静态页面html等\n- src 文件夹是项目代码存放文件夹，是项目最核心的代码，具体在后面进行详细介绍。\n- node_modules 放置所有项目引入的依赖包\n- .eslintrc 代码检查的配置文件\n- mock 文件夹、.roadhogrc.mock.js文件 是项目中的模拟接口\n- .roadhogrc 集成服务启动打包工具Roadhog（主要作用：与其他插件集成、启动服务、打包项目）\n- .gitingore 配置git相关设置\n\n### 具体的代码分析 ###\n#### 从入口文件index.js开始 ####\n初始化：`const app = dva({\n    history: browserHistory\n});`\n\n    function dva(hooks={}){\n\t\tconst history = hooks.history || defaultHistory;\n\t\tconst initialState = hooks.initialState || {};\n\t\tdelete hooks.history;\n\t\tdelete hooks.initialState;\n\n\t\tconst plugin = new Plugin();\n\t\tplugin.use(hooks);\n\n\t\tconst app = {\n\t\t\t//properties\n\t\t\t_models:[],\n\t\t\t_router:null,\n\t\t\t_history:null,\n\t\t\t_plugin:plugin,\n\t\t\t_getProvider:null,\n\t\t\t//methods\n\t\t\tuse,\n\t\t\tmodels,\n\t\t\trouter,\n\t\t\tstart,\n\t\t};\n\t\treturn app;\n\t}\n\nhooks:传入的配置，如history，这里可以知道dva默认采用的是hashHistory；\nplugin:插件，此处暂不分析；\napp.router()：指定路由，需要传入一个函数，一般类似于({history})=>(<Router>...</Router>);\napp.use():添加插件；\napp.model():添加model，也就是对应的添加一个store下的数据，该方法做的就是对传入的model进行检查，对reducers添加命名空间，而后将其push到_models中\napp.start():初始化应用，接受参数为选择器或者dom节点\n需要注意的是： \n- reducers和effects的key不需要用namespace/action的形式了，因为dva会自动将其加上，dispatch的时候，saga需要加上namespace，而saga中的put不需要加入namespace，原因是dva对put进行了重载\n\n\n### start函数 ###\n    function start(container) {\n    // 允许 container 是字符串，然后用 querySelector 找元素\n    \tif (isString(container)) {\n      \t\tcontainer = document.querySelector(container);\n      \t\tinvariant(\n        \t  container,\n        \t`[app.start] container ${container} not found`,\n      \t\t);\n    \t}\n\n    // 并且是 HTMLElement\n    \tinvariant(\n      \t\t!container || isHTMLElement(container),\n      \t\t`[app.start] container should be HTMLElement`,\n    \t);\n\n    // 路由必须提前注册\n    \tinvariant(\n      \t\tapp._router,\n      \t\t`[app.start] router must be registered before app.start()`,\n    \t);\n\n    \tif (!app._store) {\n      \t\toldAppStart.call(app);\n    \t}\n    \tconst store = app._store;\n\n    // export _getProvider for HMR\n    // ref: https://github.com/dvajs/dva/issues/469\n    \tapp._getProvider = getProvider.bind(null, store, app);\n\n    // If has container, render; else, return react component\n    \t**if (container) {\n      \t\trender(container, store, app, app._router);\n      \t\tapp._plugin.apply('onHmr')(render.bind(null, container, store, app));\n    \t} else {\n      \treturn getProvider(store, this, this._router);\n    \t}**\n  \t}\n\n比较关心的页面初始渲染的函数\n    \n\tfunction render(container, store, app, router) {\n  \t\tconst ReactDOM = require('react-dom');  // eslint-disable-line\n  \t\tReactDOM.render(React.createElement(getProvider(store, app, router)), container);\n\t}\n\n比较重要的路由模块\n  `function getProvider(store, app, router) {\n  \t\treturn extraProps => (\n    \t<Provider store={store}>\n      \t{ router({ app, history: app._history, ...extraProps }) }\n    \t</Provider>\n  \t)；\n\t}`\n\n此时建议看一下一般项目中的入口文件index.js和路由文件router.js\n\nindex.js\n   \t\n\t`// 1. Initialize\n\t\tconst app = dva({\n  \t\t\thistory: browserHistory(),\n\t\t});\n\t// 2. Plugins\n\t// app.use({});\n\n\t// 3. Register global model\n\tapp.model(require('./models/global'));\n\n\t// 4. Router\n\tapp.router(router);\n\n\t// 5. Start\n\tapp.start('#root');\n\n\texport const store = app._store;`\n\nrouter.js\n\n    `function RouterConfig({ history, app }) {\n  \t\tconst navData = getNavData(app);\n  \t\tconst BasicLayout = getLayout(navData, 'BasicLayout').component;\n\n  \t\tconst passProps = {\n    \t\tapp,\n    \t\tnavData,\n    \t\tgetRouteData: (path) => {\n      \t\treturn getRouteData(navData, path);\n    \t\t},\n  \t\t};\n\n  \t\treturn (\n    \t\t<LocaleProvider locale={zhCN}>\n      \t\t\t<Router history={history}>\n        \t\t\t<Switch>\n          \t\t\t\t<Route path=\"/\" render={props => <BasicLayout {...props} {...passProps} />} />\n        \t\t\t</Switch>\n      \t\t\t</Router>\n    \t\t</LocaleProvider>\n  \t\t\t);\n\t}\n\n\texport default RouterConfig;`\n\n以上可以基本明白一个dva的初始化页面是如何实现的，需要注意的是：\n1、LocaleProvider是antd提供的国际化组件\n2、Provider是react-redux提供的组件，其本质是一个react组件，具体参看源码，其核心是getChildContext方法\n \n\t`import { Component, Children } from 'react'\n\t import PropTypes from 'prop-types'\n\t import storeShape from '../utils/storeShape'\n\t import warning from '../utils/warning'\n\n\texport default class Provider extends Component {\n  \t\tgetChildContext() {\n    \treturn { store: this.store }\n  \t}\n\n  \tconstructor(props, context) {\n    \tsuper(props, context)\n    \tthis.store = props.store\n  \t}\n\n  \trender() {\n    \treturn Children.only(this.props.children)\n  \t\t}\n\t}`\n接下来是dva的核心部分，就是如何完成状态管理，必须看明白model的作用\n\n\t` /**\n   \t* Register model before app is started.\n   \t*\n   \t* @param m {Object} model to register\n   \t*/\n  \tfunction model(m) {\n\t\t//开发模式下，需要对model的格式进行检查\n    \tif (process.env.NODE_ENV !== 'production') {\n      \tcheckModel(m, app._models);\n    \t}\n\t\t//通过model方法将model注入_models属性，把 reducer, initialState, action, saga 封装到一起\n   \t app._models.push(prefixNamespace(m));\n  \t}`\n\n    `function prefix(obj, namespace, type) {\n  \t\treturn Object.keys(obj).reduce((memo, key) => {\n    \t\twarning(\n      \t\tkey.indexOf(`${namespace}${NAMESPACE_SEP}`) !== 0,\n      \t\t`[prefixNamespace]: ${type} ${key} should not be prefixed with namespace ${namespace}`,\n    \t\t);\n    \t\tconst newKey = `${namespace}${NAMESPACE_SEP}${key}`;\n    \t\tmemo[newKey] = obj[key];\n    \t\treturn memo;\n  \t\t}, {});\n\t}\n\n\texport default function prefixNamespace(model) {\n  \t\tconst {\n    \t\tnamespace,\n    \t\treducers,\n    \t\teffects,\n  \t\t} = model;\n\n  \tif (reducers) {\n    \tif (isArray(reducers)) {\n      \t\tmodel.reducers[0] = prefix(reducers[0], namespace, 'reducer');\n    \t} else {\n      \t\tmodel.reducers = prefix(reducers, namespace, 'reducer');\n    \t}\n  \t}\n  \tif (effects) {\n    \tmodel.effects = prefix(effects, namespace, 'effect');\n  \t}\n  \treturn model;\n\t}\n\timport warning from 'warning';\n\timport { isArray } from './utils';//const isArray = Array.isArray.bind(Array);\n\timport { NAMESPACE_SEP } from './constants';//const NAMESPACE_SEP = '/';\n\n\tfunction prefix(obj, namespace, type) {\n  \t\treturn Object.keys(obj).reduce((memo, key) => {\n    \t\twarning(\n      \t\tkey.indexOf(`${namespace}${NAMESPACE_SEP}`) !== 0,\n      \t\t`[prefixNamespace]: ${type} ${key} should not be prefixed with namespace ${namespace}`,\n    \t);\n    \tconst newKey = `${namespace}${NAMESPACE_SEP}${key}`;\n    \tmemo[newKey] = obj[key];\n    \treturn memo;\n  \t}, {});\n\t}\n\n\texport default function prefixNamespace(model) {\n  \t\tconst {\n    \t\tnamespace,\n    \t\treducers,\n    \t\teffects,\n  \t\t} = model;\n\n  \t\tif (reducers) {\n\t\t//此处是将所有的reducers和effects添加为完整路径，前面加上\"namespace/**\"\n    \t\tif (isArray(reducers)) {\n      \t\tmodel.reducers[0] = prefix(reducers[0], namespace, 'reducer');\n    \t\t} else {\n      \t\tmodel.reducers = prefix(reducers, namespace, 'reducer');\n    \t\t}\n  \t\t}\n  \t\tif (effects) {\n    \t\tmodel.effects = prefix(effects, namespace, 'effect');\n  \t\t}\n  \t\treturn model;\n\t}`\n\n此处可结合model的实例进行分析：\n\n\t`import { queryNotices } from 'Services/notices';\n\t import { getWebCig } from 'Services/global';\n\t import { webCig, headerMenu } from '../common/constants/initState.js';\n\n\t export default {\n  \t\tnamespace: 'global',\n\n  \t\tstate: {\n    \t\tnotices: [],\n    \t\tfetchingNotices: false,\n    \t\twebCig,\n    \t\theaderMenu: headerMenu,\n  \t\t},\n\n  \t\teffects: {\n    \t\t*fetchNotices({ query }, { call, put }) {\n      \t\t\tyield put({\n        \t\t\ttype: 'changeNoticeLoading',\n        \t\t\tpayload: true,\n      \t\t\t});\n      \t\t\tconst res = yield call(queryNotices, query);\n      \t\t\tyield put({\n        \t\t\ttype: 'saveNotices',\n        \t\t\tpayload: res.data.list,\n      \t\t\t});\n    \t\t},\n    \t\t*clearNotices({ payload }, { put, select }) {\n      \t\t\tconst count = yield select(state => state.global.notices.length);\n      \t\t\tyield put({\n        \t\t\ttype: 'user/changeNotifyCount',\n        \t\t\tpayload: count,\n      \t\t\t});\n\n      \t\t\tyield put({\n        \t\t\ttype: 'saveClearedNotices',\n        \t\t\tpayload,\n      \t\t\t});\n    \t\t},\n    \t\t*fetchWebCig(_, { call, put }) {\n      \t\t\ttry {\n        \t\t\tconst res = yield call(getWebCig);\n        \t\t\tif (res.status === 'success') {\n          \t\t\t\tyield put({\n            \t\t\t\ttype: 'saveWebCig',\n            \t\t\t\tpayload: res.data,\n          \t\t\t\t});\n        \t\t\t}\n      \t\t\t} catch(e) {\n\n      \t\t\t}\n    \t\t},\n  \t},\n\n  \treducers: {\n    \tsaveNotices(state, { payload }) {\n      \treturn {\n        \t...state,\n        \tnotices: payload,\n        \tfetchingNotices: false,\n      \t};\n    \t},\n    \tsaveClearedNotices(state, { payload }) {\n      \treturn {\n        \t...state,\n        \tnotices: state.notices.filter(item => item.type !== payload),\n      \t};\n    \t},\n    \tchangeNoticeLoading(state, { payload }) {\n      \treturn {\n        \t...state,\n        \tfetchingNotices: payload,\n      \t};\n    \t},\n    \tcleanNotices(state, _) {\n      \treturn {\n        \t...state,\n        \tnotices: [],\n      \t};\n    \t},\n    \tsaveWebCig(state, { payload }) {\n      \treturn {\n        \t...state,\n        \twebCig: payload,\n      \t};\n    \t},\n  \t},\n\n  \tsubscriptions: {\n    \tsetup({ history }) {\n      \t// Subscribe history(url) change, trigger `load` action if pathname is `/`\n      \treturn history.listen(({ pathname, search }) => {\n        \tif (typeof window.ga !== 'undefined') {\n          \t\twindow.ga('send', 'pageview', pathname + search);\n        \t}\n      \t});\n    \t},\n  \t},\n\t};`\n\n关注一下dva里面的store来源\n\n\t`const store = app._store = createStore({ // eslint-disable-line\n      \t\treducers: createReducer(),\n      \t\tinitialState: hooksAndOpts.initialState || {},\n      \t\tplugin,\n      \t\tcreateOpts,\n      \t\tsagaMiddleware,\n      \t\tpromiseMiddleware,\n    \t});\n\t这里的createStore是对redux的createStore方法进行了扩展封装\n\timport { createStore, applyMiddleware, compose } from 'redux';\n\timport flatten from 'flatten';\n\timport invariant from 'invariant';\n\timport window from 'global/window';\n\timport { returnSelf, isArray } from './utils';\n\n\texport default function ({\n  \treducers,\n  \tinitialState,\n  \tplugin,\n  \tsagaMiddleware,\n  \tpromiseMiddleware,\n  \tcreateOpts: {\n    \tsetupMiddlewares = returnSelf,\n  \t},\n\t}) {\n  \t\t// extra enhancers\n  \t\tconst extraEnhancers = plugin.get('extraEnhancers');\n  \t\tinvariant(\n    \t\tisArray(extraEnhancers),\n    \t\t`[app.start] extraEnhancers should be array, but got ${typeof extraEnhancers}`,\n  \t\t);\n\n  \tconst extraMiddlewares = plugin.get('onAction');\n  \tconst middlewares = setupMiddlewares([\n    \tsagaMiddleware,\n    \tpromiseMiddleware,\n    \t...flatten(extraMiddlewares),\n  \t]);\n\n  \tlet devtools = () => noop => noop;\n  \tif (process.env.NODE_ENV !== 'production' && \twindow.__REDUX_DEVTOOLS_EXTENSION__) {\n    \tdevtools = window.__REDUX_DEVTOOLS_EXTENSION__;\n  \t}\n\n  \tconst enhancers = [\n    \tapplyMiddleware(...middlewares),\n    \t...extraEnhancers,\n    \tdevtools(window.__REDUX_DEVTOOLS_EXTENSION__OPTIONS),\n  \t];\n\n  \treturn createStore(reducers, initialState, compose(...enhancers));\n\t}`\n\n关于redux的部分可以深入了解https://zhuanlan.zhihu.com/p/22809799，http://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_one_basic_usages.html 我们这里不再展开\n\nflux———redux————react-redux————sage————dva\n\n\n\n\n","slug":"first","published":1,"updated":"2018-04-18T08:08:06.047Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgevaus40001e0vw8685ipc7","content":"<h2 id=\"dva基本思想\"><a href=\"#dva基本思想\" class=\"headerlink\" title=\"dva基本思想\"></a>dva基本思想</h2><p>dva是对redux、redux-router和redux-saga进行了封装，未引入其他新的概念。在处理redux异步控制上实现了优化。按照作者sorrycc的定义：dva 是 react 和 redux 的最佳实践。</p>\n<h2 id=\"dva的demo分析\"><a href=\"#dva的demo分析\" class=\"headerlink\" title=\"dva的demo分析\"></a>dva的demo分析</h2><p>语言基础：es6和react<br>主要工具：</p>\n<ul>\n<li>开发工具（vscode，subline）</li>\n<li>包管理工具（npm）</li>\n<li>es6编译工具（babel <a href=\"https://my.oschina.net/dkvirus/blog/1517941）\" target=\"_blank\" rel=\"noopener\">https://my.oschina.net/dkvirus/blog/1517941）</a></li>\n<li>项目启动打包工具（Roadhog <a href=\"https://github.com/sorrycc/roadhog）\" target=\"_blank\" rel=\"noopener\">https://github.com/sorrycc/roadhog）</a></li>\n<li>模拟后台接口（mockjs）</li>\n<li>版本控制工具（git）</li>\n<li>代码检查工具（ESLint <a href=\"https://my.oschina.net/dkvirus/blog/1506899）\" target=\"_blank\" rel=\"noopener\">https://my.oschina.net/dkvirus/blog/1506899）</a></li>\n</ul>\n<p>项目结构：<br><img src=\"https://i.imgur.com/PYfnS2T.png\" alt=\"\"><br>脚手架做的几件事情：</p>\n<ul>\n<li>自动创建一个包含package.json的项目</li>\n<li>自动创建成体系的目录结构</li>\n<li>自动安装项目需要的基础包</li>\n<li>集成代码检查工具ESLint</li>\n<li>集成模拟接口工具mock</li>\n<li>集成服务启动打包工具Roadhog</li>\n<li>集成版本控制工具Git</li>\n</ul>\n<h3 id=\"各文件目录主要的作用\"><a href=\"#各文件目录主要的作用\" class=\"headerlink\" title=\"各文件目录主要的作用\"></a>各文件目录主要的作用</h3><ul>\n<li>package.json 项目的配置文件</li>\n<li>public 文件夹中存放静态资源，比如图片，静态页面html等</li>\n<li>src 文件夹是项目代码存放文件夹，是项目最核心的代码，具体在后面进行详细介绍。</li>\n<li>node_modules 放置所有项目引入的依赖包</li>\n<li>.eslintrc 代码检查的配置文件</li>\n<li>mock 文件夹、.roadhogrc.mock.js文件 是项目中的模拟接口</li>\n<li>.roadhogrc 集成服务启动打包工具Roadhog（主要作用：与其他插件集成、启动服务、打包项目）</li>\n<li>.gitingore 配置git相关设置</li>\n</ul>\n<h3 id=\"具体的代码分析\"><a href=\"#具体的代码分析\" class=\"headerlink\" title=\"具体的代码分析\"></a>具体的代码分析</h3><h4 id=\"从入口文件index-js开始\"><a href=\"#从入口文件index-js开始\" class=\"headerlink\" title=\"从入口文件index.js开始\"></a>从入口文件index.js开始</h4><p>初始化：<code>const app = dva({\n    history: browserHistory\n});</code></p>\n<pre><code>function dva(hooks={}){\n    const history = hooks.history || defaultHistory;\n    const initialState = hooks.initialState || {};\n    delete hooks.history;\n    delete hooks.initialState;\n\n    const plugin = new Plugin();\n    plugin.use(hooks);\n\n    const app = {\n        //properties\n        _models:[],\n        _router:null,\n        _history:null,\n        _plugin:plugin,\n        _getProvider:null,\n        //methods\n        use,\n        models,\n        router,\n        start,\n    };\n    return app;\n}\n</code></pre><p>hooks:传入的配置，如history，这里可以知道dva默认采用的是hashHistory；<br>plugin:插件，此处暂不分析；<br>app.router()：指定路由，需要传入一个函数，一般类似于({history})=&gt;(<router>…</router>);<br>app.use():添加插件；<br>app.model():添加model，也就是对应的添加一个store下的数据，该方法做的就是对传入的model进行检查，对reducers添加命名空间，而后将其push到_models中<br>app.start():初始化应用，接受参数为选择器或者dom节点<br>需要注意的是： </p>\n<ul>\n<li>reducers和effects的key不需要用namespace/action的形式了，因为dva会自动将其加上，dispatch的时候，saga需要加上namespace，而saga中的put不需要加入namespace，原因是dva对put进行了重载</li>\n</ul>\n<h3 id=\"start函数\"><a href=\"#start函数\" class=\"headerlink\" title=\"start函数\"></a>start函数</h3><pre><code>function start(container) {\n// 允许 container 是字符串，然后用 querySelector 找元素\n    if (isString(container)) {\n          container = document.querySelector(container);\n          invariant(\n          container,\n        `[app.start] container ${container} not found`,\n          );\n    }\n\n// 并且是 HTMLElement\n    invariant(\n          !container || isHTMLElement(container),\n          `[app.start] container should be HTMLElement`,\n    );\n\n// 路由必须提前注册\n    invariant(\n          app._router,\n          `[app.start] router must be registered before app.start()`,\n    );\n\n    if (!app._store) {\n          oldAppStart.call(app);\n    }\n    const store = app._store;\n\n// export _getProvider for HMR\n// ref: https://github.com/dvajs/dva/issues/469\n    app._getProvider = getProvider.bind(null, store, app);\n\n// If has container, render; else, return react component\n    **if (container) {\n          render(container, store, app, app._router);\n          app._plugin.apply(&apos;onHmr&apos;)(render.bind(null, container, store, app));\n    } else {\n      return getProvider(store, this, this._router);\n    }**\n  }\n</code></pre><p>比较关心的页面初始渲染的函数</p>\n<pre><code>function render(container, store, app, router) {\n      const ReactDOM = require(&apos;react-dom&apos;);  // eslint-disable-line\n      ReactDOM.render(React.createElement(getProvider(store, app, router)), container);\n}\n</code></pre><p>比较重要的路由模块<br>  <code>function getProvider(store, app, router) {\n          return extraProps =&gt; (\n        &lt;Provider store={store}&gt;\n          { router({ app, history: app._history, ...extraProps }) }\n        &lt;/Provider&gt;\n      )；\n    }</code></p>\n<p>此时建议看一下一般项目中的入口文件index.js和路由文件router.js</p>\n<p>index.js</p>\n<pre><code>`// 1. Initialize\n    const app = dva({\n          history: browserHistory(),\n    });\n// 2. Plugins\n// app.use({});\n\n// 3. Register global model\napp.model(require(&apos;./models/global&apos;));\n\n// 4. Router\napp.router(router);\n\n// 5. Start\napp.start(&apos;#root&apos;);\n\nexport const store = app._store;`\n</code></pre><p>router.js</p>\n<pre><code>`function RouterConfig({ history, app }) {\n      const navData = getNavData(app);\n      const BasicLayout = getLayout(navData, &apos;BasicLayout&apos;).component;\n\n      const passProps = {\n        app,\n        navData,\n        getRouteData: (path) =&gt; {\n          return getRouteData(navData, path);\n        },\n      };\n\n      return (\n        &lt;LocaleProvider locale={zhCN}&gt;\n              &lt;Router history={history}&gt;\n                &lt;Switch&gt;\n                      &lt;Route path=&quot;/&quot; render={props =&gt; &lt;BasicLayout {...props} {...passProps} /&gt;} /&gt;\n                &lt;/Switch&gt;\n              &lt;/Router&gt;\n        &lt;/LocaleProvider&gt;\n          );\n}\n\nexport default RouterConfig;`\n</code></pre><p>以上可以基本明白一个dva的初始化页面是如何实现的，需要注意的是：<br>1、LocaleProvider是antd提供的国际化组件<br>2、Provider是react-redux提供的组件，其本质是一个react组件，具体参看源码，其核心是getChildContext方法</p>\n<pre><code>`import { Component, Children } from &apos;react&apos;\n import PropTypes from &apos;prop-types&apos;\n import storeShape from &apos;../utils/storeShape&apos;\n import warning from &apos;../utils/warning&apos;\n\nexport default class Provider extends Component {\n      getChildContext() {\n    return { store: this.store }\n  }\n\n  constructor(props, context) {\n    super(props, context)\n    this.store = props.store\n  }\n\n  render() {\n    return Children.only(this.props.children)\n      }\n}`\n</code></pre><p>接下来是dva的核心部分，就是如何完成状态管理，必须看明白model的作用</p>\n<pre><code>` /**\n   * Register model before app is started.\n   *\n   * @param m {Object} model to register\n   */\n  function model(m) {\n    //开发模式下，需要对model的格式进行检查\n    if (process.env.NODE_ENV !== &apos;production&apos;) {\n      checkModel(m, app._models);\n    }\n    //通过model方法将model注入_models属性，把 reducer, initialState, action, saga 封装到一起\n    app._models.push(prefixNamespace(m));\n  }`\n\n`function prefix(obj, namespace, type) {\n      return Object.keys(obj).reduce((memo, key) =&gt; {\n        warning(\n          key.indexOf(`${namespace}${NAMESPACE_SEP}`) !== 0,\n          `[prefixNamespace]: ${type} ${key} should not be prefixed with namespace ${namespace}`,\n        );\n        const newKey = `${namespace}${NAMESPACE_SEP}${key}`;\n        memo[newKey] = obj[key];\n        return memo;\n      }, {});\n}\n\nexport default function prefixNamespace(model) {\n      const {\n        namespace,\n        reducers,\n        effects,\n      } = model;\n\n  if (reducers) {\n    if (isArray(reducers)) {\n          model.reducers[0] = prefix(reducers[0], namespace, &apos;reducer&apos;);\n    } else {\n          model.reducers = prefix(reducers, namespace, &apos;reducer&apos;);\n    }\n  }\n  if (effects) {\n    model.effects = prefix(effects, namespace, &apos;effect&apos;);\n  }\n  return model;\n}\nimport warning from &apos;warning&apos;;\nimport { isArray } from &apos;./utils&apos;;//const isArray = Array.isArray.bind(Array);\nimport { NAMESPACE_SEP } from &apos;./constants&apos;;//const NAMESPACE_SEP = &apos;/&apos;;\n\nfunction prefix(obj, namespace, type) {\n      return Object.keys(obj).reduce((memo, key) =&gt; {\n        warning(\n          key.indexOf(`${namespace}${NAMESPACE_SEP}`) !== 0,\n          `[prefixNamespace]: ${type} ${key} should not be prefixed with namespace ${namespace}`,\n    );\n    const newKey = `${namespace}${NAMESPACE_SEP}${key}`;\n    memo[newKey] = obj[key];\n    return memo;\n  }, {});\n}\n\nexport default function prefixNamespace(model) {\n      const {\n        namespace,\n        reducers,\n        effects,\n      } = model;\n\n      if (reducers) {\n    //此处是将所有的reducers和effects添加为完整路径，前面加上&quot;namespace/**&quot;\n        if (isArray(reducers)) {\n          model.reducers[0] = prefix(reducers[0], namespace, &apos;reducer&apos;);\n        } else {\n          model.reducers = prefix(reducers, namespace, &apos;reducer&apos;);\n        }\n      }\n      if (effects) {\n        model.effects = prefix(effects, namespace, &apos;effect&apos;);\n      }\n      return model;\n}`\n</code></pre><p>此处可结合model的实例进行分析：</p>\n<pre><code>`import { queryNotices } from &apos;Services/notices&apos;;\n import { getWebCig } from &apos;Services/global&apos;;\n import { webCig, headerMenu } from &apos;../common/constants/initState.js&apos;;\n\n export default {\n      namespace: &apos;global&apos;,\n\n      state: {\n        notices: [],\n        fetchingNotices: false,\n        webCig,\n        headerMenu: headerMenu,\n      },\n\n      effects: {\n        *fetchNotices({ query }, { call, put }) {\n              yield put({\n                type: &apos;changeNoticeLoading&apos;,\n                payload: true,\n              });\n              const res = yield call(queryNotices, query);\n              yield put({\n                type: &apos;saveNotices&apos;,\n                payload: res.data.list,\n              });\n        },\n        *clearNotices({ payload }, { put, select }) {\n              const count = yield select(state =&gt; state.global.notices.length);\n              yield put({\n                type: &apos;user/changeNotifyCount&apos;,\n                payload: count,\n              });\n\n              yield put({\n                type: &apos;saveClearedNotices&apos;,\n                payload,\n              });\n        },\n        *fetchWebCig(_, { call, put }) {\n              try {\n                const res = yield call(getWebCig);\n                if (res.status === &apos;success&apos;) {\n                      yield put({\n                        type: &apos;saveWebCig&apos;,\n                        payload: res.data,\n                      });\n                }\n              } catch(e) {\n\n              }\n        },\n  },\n\n  reducers: {\n    saveNotices(state, { payload }) {\n      return {\n        ...state,\n        notices: payload,\n        fetchingNotices: false,\n      };\n    },\n    saveClearedNotices(state, { payload }) {\n      return {\n        ...state,\n        notices: state.notices.filter(item =&gt; item.type !== payload),\n      };\n    },\n    changeNoticeLoading(state, { payload }) {\n      return {\n        ...state,\n        fetchingNotices: payload,\n      };\n    },\n    cleanNotices(state, _) {\n      return {\n        ...state,\n        notices: [],\n      };\n    },\n    saveWebCig(state, { payload }) {\n      return {\n        ...state,\n        webCig: payload,\n      };\n    },\n  },\n\n  subscriptions: {\n    setup({ history }) {\n      // Subscribe history(url) change, trigger `load` action if pathname is `/`\n      return history.listen(({ pathname, search }) =&gt; {\n        if (typeof window.ga !== &apos;undefined&apos;) {\n              window.ga(&apos;send&apos;, &apos;pageview&apos;, pathname + search);\n        }\n      });\n    },\n  },\n};`\n</code></pre><p>关注一下dva里面的store来源</p>\n<pre><code>`const store = app._store = createStore({ // eslint-disable-line\n          reducers: createReducer(),\n          initialState: hooksAndOpts.initialState || {},\n          plugin,\n          createOpts,\n          sagaMiddleware,\n          promiseMiddleware,\n    });\n这里的createStore是对redux的createStore方法进行了扩展封装\nimport { createStore, applyMiddleware, compose } from &apos;redux&apos;;\nimport flatten from &apos;flatten&apos;;\nimport invariant from &apos;invariant&apos;;\nimport window from &apos;global/window&apos;;\nimport { returnSelf, isArray } from &apos;./utils&apos;;\n\nexport default function ({\n  reducers,\n  initialState,\n  plugin,\n  sagaMiddleware,\n  promiseMiddleware,\n  createOpts: {\n    setupMiddlewares = returnSelf,\n  },\n}) {\n      // extra enhancers\n      const extraEnhancers = plugin.get(&apos;extraEnhancers&apos;);\n      invariant(\n        isArray(extraEnhancers),\n        `[app.start] extraEnhancers should be array, but got ${typeof extraEnhancers}`,\n      );\n\n  const extraMiddlewares = plugin.get(&apos;onAction&apos;);\n  const middlewares = setupMiddlewares([\n    sagaMiddleware,\n    promiseMiddleware,\n    ...flatten(extraMiddlewares),\n  ]);\n\n  let devtools = () =&gt; noop =&gt; noop;\n  if (process.env.NODE_ENV !== &apos;production&apos; &amp;&amp;     window.__REDUX_DEVTOOLS_EXTENSION__) {\n    devtools = window.__REDUX_DEVTOOLS_EXTENSION__;\n  }\n\n  const enhancers = [\n    applyMiddleware(...middlewares),\n    ...extraEnhancers,\n    devtools(window.__REDUX_DEVTOOLS_EXTENSION__OPTIONS),\n  ];\n\n  return createStore(reducers, initialState, compose(...enhancers));\n}`\n</code></pre><p>关于redux的部分可以深入了解<a href=\"https://zhuanlan.zhihu.com/p/22809799，http://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_one_basic_usages.html\" target=\"_blank\" rel=\"noopener\">https://zhuanlan.zhihu.com/p/22809799，http://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_one_basic_usages.html</a> 我们这里不再展开</p>\n<p>flux———redux————react-redux————sage————dva</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"dva基本思想\"><a href=\"#dva基本思想\" class=\"headerlink\" title=\"dva基本思想\"></a>dva基本思想</h2><p>dva是对redux、redux-router和redux-saga进行了封装，未引入其他新的概念。在处理redux异步控制上实现了优化。按照作者sorrycc的定义：dva 是 react 和 redux 的最佳实践。</p>\n<h2 id=\"dva的demo分析\"><a href=\"#dva的demo分析\" class=\"headerlink\" title=\"dva的demo分析\"></a>dva的demo分析</h2><p>语言基础：es6和react<br>主要工具：</p>\n<ul>\n<li>开发工具（vscode，subline）</li>\n<li>包管理工具（npm）</li>\n<li>es6编译工具（babel <a href=\"https://my.oschina.net/dkvirus/blog/1517941）\" target=\"_blank\" rel=\"noopener\">https://my.oschina.net/dkvirus/blog/1517941）</a></li>\n<li>项目启动打包工具（Roadhog <a href=\"https://github.com/sorrycc/roadhog）\" target=\"_blank\" rel=\"noopener\">https://github.com/sorrycc/roadhog）</a></li>\n<li>模拟后台接口（mockjs）</li>\n<li>版本控制工具（git）</li>\n<li>代码检查工具（ESLint <a href=\"https://my.oschina.net/dkvirus/blog/1506899）\" target=\"_blank\" rel=\"noopener\">https://my.oschina.net/dkvirus/blog/1506899）</a></li>\n</ul>\n<p>项目结构：<br><img src=\"https://i.imgur.com/PYfnS2T.png\" alt=\"\"><br>脚手架做的几件事情：</p>\n<ul>\n<li>自动创建一个包含package.json的项目</li>\n<li>自动创建成体系的目录结构</li>\n<li>自动安装项目需要的基础包</li>\n<li>集成代码检查工具ESLint</li>\n<li>集成模拟接口工具mock</li>\n<li>集成服务启动打包工具Roadhog</li>\n<li>集成版本控制工具Git</li>\n</ul>\n<h3 id=\"各文件目录主要的作用\"><a href=\"#各文件目录主要的作用\" class=\"headerlink\" title=\"各文件目录主要的作用\"></a>各文件目录主要的作用</h3><ul>\n<li>package.json 项目的配置文件</li>\n<li>public 文件夹中存放静态资源，比如图片，静态页面html等</li>\n<li>src 文件夹是项目代码存放文件夹，是项目最核心的代码，具体在后面进行详细介绍。</li>\n<li>node_modules 放置所有项目引入的依赖包</li>\n<li>.eslintrc 代码检查的配置文件</li>\n<li>mock 文件夹、.roadhogrc.mock.js文件 是项目中的模拟接口</li>\n<li>.roadhogrc 集成服务启动打包工具Roadhog（主要作用：与其他插件集成、启动服务、打包项目）</li>\n<li>.gitingore 配置git相关设置</li>\n</ul>\n<h3 id=\"具体的代码分析\"><a href=\"#具体的代码分析\" class=\"headerlink\" title=\"具体的代码分析\"></a>具体的代码分析</h3><h4 id=\"从入口文件index-js开始\"><a href=\"#从入口文件index-js开始\" class=\"headerlink\" title=\"从入口文件index.js开始\"></a>从入口文件index.js开始</h4><p>初始化：<code>const app = dva({\n    history: browserHistory\n});</code></p>\n<pre><code>function dva(hooks={}){\n    const history = hooks.history || defaultHistory;\n    const initialState = hooks.initialState || {};\n    delete hooks.history;\n    delete hooks.initialState;\n\n    const plugin = new Plugin();\n    plugin.use(hooks);\n\n    const app = {\n        //properties\n        _models:[],\n        _router:null,\n        _history:null,\n        _plugin:plugin,\n        _getProvider:null,\n        //methods\n        use,\n        models,\n        router,\n        start,\n    };\n    return app;\n}\n</code></pre><p>hooks:传入的配置，如history，这里可以知道dva默认采用的是hashHistory；<br>plugin:插件，此处暂不分析；<br>app.router()：指定路由，需要传入一个函数，一般类似于({history})=&gt;(<router>…</router>);<br>app.use():添加插件；<br>app.model():添加model，也就是对应的添加一个store下的数据，该方法做的就是对传入的model进行检查，对reducers添加命名空间，而后将其push到_models中<br>app.start():初始化应用，接受参数为选择器或者dom节点<br>需要注意的是： </p>\n<ul>\n<li>reducers和effects的key不需要用namespace/action的形式了，因为dva会自动将其加上，dispatch的时候，saga需要加上namespace，而saga中的put不需要加入namespace，原因是dva对put进行了重载</li>\n</ul>\n<h3 id=\"start函数\"><a href=\"#start函数\" class=\"headerlink\" title=\"start函数\"></a>start函数</h3><pre><code>function start(container) {\n// 允许 container 是字符串，然后用 querySelector 找元素\n    if (isString(container)) {\n          container = document.querySelector(container);\n          invariant(\n          container,\n        `[app.start] container ${container} not found`,\n          );\n    }\n\n// 并且是 HTMLElement\n    invariant(\n          !container || isHTMLElement(container),\n          `[app.start] container should be HTMLElement`,\n    );\n\n// 路由必须提前注册\n    invariant(\n          app._router,\n          `[app.start] router must be registered before app.start()`,\n    );\n\n    if (!app._store) {\n          oldAppStart.call(app);\n    }\n    const store = app._store;\n\n// export _getProvider for HMR\n// ref: https://github.com/dvajs/dva/issues/469\n    app._getProvider = getProvider.bind(null, store, app);\n\n// If has container, render; else, return react component\n    **if (container) {\n          render(container, store, app, app._router);\n          app._plugin.apply(&apos;onHmr&apos;)(render.bind(null, container, store, app));\n    } else {\n      return getProvider(store, this, this._router);\n    }**\n  }\n</code></pre><p>比较关心的页面初始渲染的函数</p>\n<pre><code>function render(container, store, app, router) {\n      const ReactDOM = require(&apos;react-dom&apos;);  // eslint-disable-line\n      ReactDOM.render(React.createElement(getProvider(store, app, router)), container);\n}\n</code></pre><p>比较重要的路由模块<br>  <code>function getProvider(store, app, router) {\n          return extraProps =&gt; (\n        &lt;Provider store={store}&gt;\n          { router({ app, history: app._history, ...extraProps }) }\n        &lt;/Provider&gt;\n      )；\n    }</code></p>\n<p>此时建议看一下一般项目中的入口文件index.js和路由文件router.js</p>\n<p>index.js</p>\n<pre><code>`// 1. Initialize\n    const app = dva({\n          history: browserHistory(),\n    });\n// 2. Plugins\n// app.use({});\n\n// 3. Register global model\napp.model(require(&apos;./models/global&apos;));\n\n// 4. Router\napp.router(router);\n\n// 5. Start\napp.start(&apos;#root&apos;);\n\nexport const store = app._store;`\n</code></pre><p>router.js</p>\n<pre><code>`function RouterConfig({ history, app }) {\n      const navData = getNavData(app);\n      const BasicLayout = getLayout(navData, &apos;BasicLayout&apos;).component;\n\n      const passProps = {\n        app,\n        navData,\n        getRouteData: (path) =&gt; {\n          return getRouteData(navData, path);\n        },\n      };\n\n      return (\n        &lt;LocaleProvider locale={zhCN}&gt;\n              &lt;Router history={history}&gt;\n                &lt;Switch&gt;\n                      &lt;Route path=&quot;/&quot; render={props =&gt; &lt;BasicLayout {...props} {...passProps} /&gt;} /&gt;\n                &lt;/Switch&gt;\n              &lt;/Router&gt;\n        &lt;/LocaleProvider&gt;\n          );\n}\n\nexport default RouterConfig;`\n</code></pre><p>以上可以基本明白一个dva的初始化页面是如何实现的，需要注意的是：<br>1、LocaleProvider是antd提供的国际化组件<br>2、Provider是react-redux提供的组件，其本质是一个react组件，具体参看源码，其核心是getChildContext方法</p>\n<pre><code>`import { Component, Children } from &apos;react&apos;\n import PropTypes from &apos;prop-types&apos;\n import storeShape from &apos;../utils/storeShape&apos;\n import warning from &apos;../utils/warning&apos;\n\nexport default class Provider extends Component {\n      getChildContext() {\n    return { store: this.store }\n  }\n\n  constructor(props, context) {\n    super(props, context)\n    this.store = props.store\n  }\n\n  render() {\n    return Children.only(this.props.children)\n      }\n}`\n</code></pre><p>接下来是dva的核心部分，就是如何完成状态管理，必须看明白model的作用</p>\n<pre><code>` /**\n   * Register model before app is started.\n   *\n   * @param m {Object} model to register\n   */\n  function model(m) {\n    //开发模式下，需要对model的格式进行检查\n    if (process.env.NODE_ENV !== &apos;production&apos;) {\n      checkModel(m, app._models);\n    }\n    //通过model方法将model注入_models属性，把 reducer, initialState, action, saga 封装到一起\n    app._models.push(prefixNamespace(m));\n  }`\n\n`function prefix(obj, namespace, type) {\n      return Object.keys(obj).reduce((memo, key) =&gt; {\n        warning(\n          key.indexOf(`${namespace}${NAMESPACE_SEP}`) !== 0,\n          `[prefixNamespace]: ${type} ${key} should not be prefixed with namespace ${namespace}`,\n        );\n        const newKey = `${namespace}${NAMESPACE_SEP}${key}`;\n        memo[newKey] = obj[key];\n        return memo;\n      }, {});\n}\n\nexport default function prefixNamespace(model) {\n      const {\n        namespace,\n        reducers,\n        effects,\n      } = model;\n\n  if (reducers) {\n    if (isArray(reducers)) {\n          model.reducers[0] = prefix(reducers[0], namespace, &apos;reducer&apos;);\n    } else {\n          model.reducers = prefix(reducers, namespace, &apos;reducer&apos;);\n    }\n  }\n  if (effects) {\n    model.effects = prefix(effects, namespace, &apos;effect&apos;);\n  }\n  return model;\n}\nimport warning from &apos;warning&apos;;\nimport { isArray } from &apos;./utils&apos;;//const isArray = Array.isArray.bind(Array);\nimport { NAMESPACE_SEP } from &apos;./constants&apos;;//const NAMESPACE_SEP = &apos;/&apos;;\n\nfunction prefix(obj, namespace, type) {\n      return Object.keys(obj).reduce((memo, key) =&gt; {\n        warning(\n          key.indexOf(`${namespace}${NAMESPACE_SEP}`) !== 0,\n          `[prefixNamespace]: ${type} ${key} should not be prefixed with namespace ${namespace}`,\n    );\n    const newKey = `${namespace}${NAMESPACE_SEP}${key}`;\n    memo[newKey] = obj[key];\n    return memo;\n  }, {});\n}\n\nexport default function prefixNamespace(model) {\n      const {\n        namespace,\n        reducers,\n        effects,\n      } = model;\n\n      if (reducers) {\n    //此处是将所有的reducers和effects添加为完整路径，前面加上&quot;namespace/**&quot;\n        if (isArray(reducers)) {\n          model.reducers[0] = prefix(reducers[0], namespace, &apos;reducer&apos;);\n        } else {\n          model.reducers = prefix(reducers, namespace, &apos;reducer&apos;);\n        }\n      }\n      if (effects) {\n        model.effects = prefix(effects, namespace, &apos;effect&apos;);\n      }\n      return model;\n}`\n</code></pre><p>此处可结合model的实例进行分析：</p>\n<pre><code>`import { queryNotices } from &apos;Services/notices&apos;;\n import { getWebCig } from &apos;Services/global&apos;;\n import { webCig, headerMenu } from &apos;../common/constants/initState.js&apos;;\n\n export default {\n      namespace: &apos;global&apos;,\n\n      state: {\n        notices: [],\n        fetchingNotices: false,\n        webCig,\n        headerMenu: headerMenu,\n      },\n\n      effects: {\n        *fetchNotices({ query }, { call, put }) {\n              yield put({\n                type: &apos;changeNoticeLoading&apos;,\n                payload: true,\n              });\n              const res = yield call(queryNotices, query);\n              yield put({\n                type: &apos;saveNotices&apos;,\n                payload: res.data.list,\n              });\n        },\n        *clearNotices({ payload }, { put, select }) {\n              const count = yield select(state =&gt; state.global.notices.length);\n              yield put({\n                type: &apos;user/changeNotifyCount&apos;,\n                payload: count,\n              });\n\n              yield put({\n                type: &apos;saveClearedNotices&apos;,\n                payload,\n              });\n        },\n        *fetchWebCig(_, { call, put }) {\n              try {\n                const res = yield call(getWebCig);\n                if (res.status === &apos;success&apos;) {\n                      yield put({\n                        type: &apos;saveWebCig&apos;,\n                        payload: res.data,\n                      });\n                }\n              } catch(e) {\n\n              }\n        },\n  },\n\n  reducers: {\n    saveNotices(state, { payload }) {\n      return {\n        ...state,\n        notices: payload,\n        fetchingNotices: false,\n      };\n    },\n    saveClearedNotices(state, { payload }) {\n      return {\n        ...state,\n        notices: state.notices.filter(item =&gt; item.type !== payload),\n      };\n    },\n    changeNoticeLoading(state, { payload }) {\n      return {\n        ...state,\n        fetchingNotices: payload,\n      };\n    },\n    cleanNotices(state, _) {\n      return {\n        ...state,\n        notices: [],\n      };\n    },\n    saveWebCig(state, { payload }) {\n      return {\n        ...state,\n        webCig: payload,\n      };\n    },\n  },\n\n  subscriptions: {\n    setup({ history }) {\n      // Subscribe history(url) change, trigger `load` action if pathname is `/`\n      return history.listen(({ pathname, search }) =&gt; {\n        if (typeof window.ga !== &apos;undefined&apos;) {\n              window.ga(&apos;send&apos;, &apos;pageview&apos;, pathname + search);\n        }\n      });\n    },\n  },\n};`\n</code></pre><p>关注一下dva里面的store来源</p>\n<pre><code>`const store = app._store = createStore({ // eslint-disable-line\n          reducers: createReducer(),\n          initialState: hooksAndOpts.initialState || {},\n          plugin,\n          createOpts,\n          sagaMiddleware,\n          promiseMiddleware,\n    });\n这里的createStore是对redux的createStore方法进行了扩展封装\nimport { createStore, applyMiddleware, compose } from &apos;redux&apos;;\nimport flatten from &apos;flatten&apos;;\nimport invariant from &apos;invariant&apos;;\nimport window from &apos;global/window&apos;;\nimport { returnSelf, isArray } from &apos;./utils&apos;;\n\nexport default function ({\n  reducers,\n  initialState,\n  plugin,\n  sagaMiddleware,\n  promiseMiddleware,\n  createOpts: {\n    setupMiddlewares = returnSelf,\n  },\n}) {\n      // extra enhancers\n      const extraEnhancers = plugin.get(&apos;extraEnhancers&apos;);\n      invariant(\n        isArray(extraEnhancers),\n        `[app.start] extraEnhancers should be array, but got ${typeof extraEnhancers}`,\n      );\n\n  const extraMiddlewares = plugin.get(&apos;onAction&apos;);\n  const middlewares = setupMiddlewares([\n    sagaMiddleware,\n    promiseMiddleware,\n    ...flatten(extraMiddlewares),\n  ]);\n\n  let devtools = () =&gt; noop =&gt; noop;\n  if (process.env.NODE_ENV !== &apos;production&apos; &amp;&amp;     window.__REDUX_DEVTOOLS_EXTENSION__) {\n    devtools = window.__REDUX_DEVTOOLS_EXTENSION__;\n  }\n\n  const enhancers = [\n    applyMiddleware(...middlewares),\n    ...extraEnhancers,\n    devtools(window.__REDUX_DEVTOOLS_EXTENSION__OPTIONS),\n  ];\n\n  return createStore(reducers, initialState, compose(...enhancers));\n}`\n</code></pre><p>关于redux的部分可以深入了解<a href=\"https://zhuanlan.zhihu.com/p/22809799，http://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_one_basic_usages.html\" target=\"_blank\" rel=\"noopener\">https://zhuanlan.zhihu.com/p/22809799，http://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_one_basic_usages.html</a> 我们这里不再展开</p>\n<p>flux———redux————react-redux————sage————dva</p>\n"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2018-04-18T08:08:06.048Z","updated":"2018-04-18T08:08:06.048Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgevaus90002e0vwbj0w0fd9","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"},{"title":"flux->redux->redux-saga->dva说明","date":"2018-04-25T08:58:48.000Z","_content":"## flux\n简单说，Flux 是一种架构思想，专门解决软件的结构问题。它跟MVC 架构是同一类东西，但是更加简单和清晰\n首先，Flux将一个应用分成四个部分。\nView： 视图层\nAction（动作）：视图层发出的消息（比如mouseClick）\nDispatcher（派发器）：用来接收Actions、执行回调函数\nStore（数据层）：用来存放应用的状态，一旦发生变动，就提醒Views要更新页面\nFlux 的最大特点，就是数据的\"单向流动\"。\n用户访问 View\nView 发出用户的 Action\nDispatcher 收到 Action，要求 Store 进行相应的更新\nStore 更新后，发出一个\"change\"事件\nView 收到\"change\"事件后，更新页面\n## redux\n### 设计思想\n（1）Web 应用是一个状态机，视图与状态是一一对应的。\n\n（2）所有的状态，保存在一个对象里面。\n\n### API\n1、Store\n\nStore 就是保存数据的地方，你可以把它看成一个容器。整个应用只能有一个 Store。\n\nRedux 提供createStore这个函数，用来生成 Store。\n\t`\n\n\timport { createStore } from 'redux';\n\tconst store = createStore(fn,initial_state,applyMiddleware());\n\t//后面会知道这个fn就是reducer,initial_state是初始状态，applyMiddleware是Redux的原生方法，作用是将所有中间件组成一个数组，依次执行`\n\n2、state\nStore对象包含所有数据。如果想得到某个时点的数据，就要对 Store 生成快照。这种时点的数据集合，就叫做 State。\n\n当前时刻的 State，可以通过store.getState()拿到。\n\n    `\n\timport { createStore } from 'redux';\n\tconst store = createStore(fn);\n\tconst state = store.getState();`\n\n3、Action\nstate 的变化，会导致 View 的变化。但是，用户接触不到 State，只能接触到 View。所以，State 的变化必须是 View 导致的。Action 就是 View 发出的通知，表示 State 应该要发生变化了。\n\nAction 是一个对象。其中的type属性是必须的，表示 Action 的名称。\n\n    `\n\tconst action = {\n  \t\ttype: 'ADD_TODO',\n  \t\tpayload: 'Learn Redux'\n\t};`\n\n4、store.dispatch()\nstore.dispatch()是 View 发出 Action 的唯一方法。\n    `\n\n\timport { createStore } from 'redux';\n\tconst store = createStore(fn);\n\n\tstore.dispatch({\n  \t\ttype: 'ADD_TODO',\n  \t\tpayload: 'Learn Redux'\n\t});`\n\n5、Reducer\n\nStore 收到 Action 以后，必须给出一个新的 State，这样 View 才会发生变化。这种 State 的计算过程就叫做 Reducer。\n\nReducer 是一个函数，它接受 Action 和当前 State 作为参数，返回一个新的 State。\n\n    `\n\tconst reducer = function (state, action) {\n  \t// ...\n  \treturn new_state;\n\t};\n\n\tconst defaultState = 0;\n\tconst reducer = (state = defaultState, action) => {\n  \t\tswitch (action.type) {\n    \t\tcase 'ADD':\n      \t\treturn state + action.payload;\n    \t\tdefault:\n      \t\treturn state;\n  \t\t}\n\t};\n\n\tconst state = reducer(1, {\n  \t\ttype: 'ADD',\n  \t\tpayload: 2\n\t});`\n\n实际应用中，Reducer 函数不用像上面这样手动调用，store.dispatch方法会触发 Reducer 的自动执行。为此，Store 需要知道 Reducer 函数，做法就是在生成 Store 的时候，将 Reducer 传入createStore方法。\n    `\n\n\timport { createStore } from 'redux';\n\tconst store = createStore(reducer);`\n\n6、 store.subscribe()\n\tStore 允许使用store.subscribe方法设置监听函数，一旦 State 发生变化，就自动执行这个函数。\n    `\n\n\timport { createStore } from 'redux';\n\tconst store = createStore(reducer);\n\n\tstore.subscribe(listener);//结合react，可以对render进行监听`\n\n7、Store的实现\n\nstore提供了三个方法\nstore.getState()\nstore.dispatch()\nstore.subscribe()\n\n简单实现原理\n    `\n\n\tconst createStore = (reducer) => {\n  \tlet state;\n  \tlet listeners = [];\n\n  \tconst getState = () => state;\n\n  \tconst dispatch = (action) => {\n    \tstate = reducer(state, action);\n    \tlisteners.forEach(listener => listener());\n  \t};\n\n  \tconst subscribe = (listener) => {\n    \tlisteners.push(listener);\n    \treturn () => {\n      \t\tlisteners = listeners.filter(l => l !== listener);\n    \t}\n  \t};\n\n  \tdispatch({});\n\n  \treturn { getState, dispatch, subscribe };\n\t};`\n\n以上简单说明了redux的工作原理，但是会发现一个问题，现在的action都是同步操作，那么redux如何处理异步的action，于是产生了中间件的概念，也就是对dispatch过程进行了处理，实现异步操作\n\n异步操作的基本思路\n同步操作只要发出一种 Action 即可，异步操作的差别是它要发出三种 Action\n操作发起时的 Action\n操作成功时的 Action\n操作失败时的 Action\n\n操作开始时，送出一个 Action，触发 State 更新为\"正在操作\"状态，View 重新渲染\n操作结束后，再送出一个 Action，触发 State 更新为\"操作结束\"状态，View 再一次重新渲染\n\n异步操作至少要送出两个 Action：用户触发第一个 Action，这个跟同步操作一样，没有问题；如何才能在操作结束时，系统自动送出第二个 Action 呢？\n\n    `\n\tconst fetchPosts = postTitle => (dispatch, getState) => {\n  \t\tdispatch(requestPosts(postTitle));\n  \t\treturn fetch(`/some/API/${postTitle}.json`)\n    \t\t\t.then(response => response.json())\n    \t\t\t.then(json => dispatch(receivePosts(postTitle, json)));\n  \t\t};\n\t};\n\tstore.dispatch(fetchPosts('reactjs'));\n\t上面代码中，fetchPosts是一个Action Creator（动作生成器），返回一个函数。这个函数执行后，先发出一个Action（requestPosts(postTitle)），然后进行异步操作。拿到结果后，先将结果转成 JSON 格式，然后再发出一个 Action（ receivePosts(postTitle, json)）。\n（1）fetchPosts返回了一个函数，而普通的 Action Creator 默认返回一个对象。\n\n（2）返回的函数的参数是dispatch和getState这两个 Redux 方法，普通的 Action Creator 的参数是 Action 的内容。\n\n（3）在返回的函数之中，先发出一个 Action（requestPosts(postTitle)），表示操作开始。\n\n（4）异步操作结束之后，再发出一个 Action（receivePosts(postTitle, json)），表示操作结束。\n\n这样的处理，就解决了自动发送第二个 Action 的问题。但是，又带来了一个新的问题，Action 是由store.dispatch方法发送的。而store.dispatch方法正常情况下，参数只能是对象，不能是函数。\n所以就需要使用中间件（redux-thunk），改造store.dispatch，使得后者可以接受函数作为参数。\n\n因此，异步操作的第一种解决方案就是，写出一个返回函数的 Action Creator，然后使用redux-thunk中间件改造store.dispatch\n\n既然 Action Creator 可以返回函数，当然也可以返回其他值。另一种异步操作的解决方案，就是让 Action Creator 返回一个 Promise 对象。\n\n这就需要使用redux-promise中间件。\n\n### react-redux\nReact-Redux 将所有组件分成两大类：UI 组件（presentational component）和容器组件（container component）。\n\nUI 组件有以下几个特征。\n只负责 UI 的呈现，不带有任何业务逻辑\n没有状态（即不使用this.state这个变量）\n所有数据都由参数（this.props）提供\n不使用任何 Redux 的 API\n\n容器组件的特征恰恰相反。\n负责管理数据和业务逻辑，不负责 UI 的呈现\n带有内部状态\n使用 Redux 的 API\n\n    `\n\t\timport { connect } from 'react-redux'\n\t\tconst VisibleTodoList = connect(\n  \t\t\tmapStateToProps,\n \t\t \tmapDispatchToProps\n\t\t)(TodoList)`\n\nmapStateToProps是一个函数。它的作用就是像它的名字那样，建立一个从（外部的）state对象到（UI 组件的）props对象的映射关系。\n\t\t`\n\n\tconst mapStateToProps = (state) => {\n  \t\treturn {\n    \t\ttodos: getVisibleTodos(state.todos, state.visibilityFilter)\n  \t\t}\n\t}`\n\nmapStateToProps会订阅 Store，每当state更新的时候，就会自动执行，重新计算 UI 组件的参数，从而触发 UI 组件的重新渲染。\n\nmapStateToProps的第一个参数总是state对象，还可以使用第二个参数，代表容器组件的props对象。\n\nmapDispatchToProps是connect函数的第二个参数，用来建立 UI 组件的参数到store.dispatch方法的映射。也就是说，它定义了哪些用户的操作应该当作 Action，传给 Store。它可以是一个函数，也可以是一个对象。\n\n如果mapDispatchToProps是一个函数，会得到dispatch和ownProps（容器组件的props对象）两个参数。\n\t`\n\n\tconst mapDispatchToProps = (\n  \t\tdispatch,\n  \t\townProps\n\t) => {\n  \t\treturn {\n    \t\tonClick: () => {\n      \t\t\tdispatch({\n        \t\t\ttype: 'SET_VISIBILITY_FILTER',\n        \t\t\tfilter: ownProps.filter\n      \t\t\t});\n    \t\t}\n  \t\t};\n\t}`\n\nReact-Redux 提供Provider组件，可以让容器组件拿到state。\n\n\t`\n\t\timport { Provider } from 'react-redux'\n\t\timport { createStore } from 'redux'\n\t\timport todoApp from './reducers'\n\t\timport App from './components/App'\n\n\t\tlet store = createStore(todoApp);\n\n\t\trender(\n  \t\t\t<Provider store={store}>\n    \t\t\t<App />\n  \t\t\t</Provider>,\n  \t\tdocument.getElementById('root')\n\t\t)`\n\n上面代码中，Provider在根组件外面包了一层，这样一来，App的所有子组件就默认都可以拿到state了。\n\n它的原理是React组件的context属性，请看源码。\n\t`\n\n\t\tclass Provider extends Component {\n  \t\tgetChildContext() {\n    \t\treturn {\n      \t\t\tstore: this.props.store\n    \t\t};\n  \t\t}\n  \t\trender() {\n    \t\treturn this.props.children;\n  \t\t}\n\t\t}\n\n\t\tProvider.childContextTypes = {\n  \t\t\tstore: React.PropTypes.object\n\t\t}`\n\n## redux-saga\nredux-saga的实质是类似redux-thunk的中间件，作用是为redux提供额外的功能\n其次，我们都知道，在 reducers 中的所有操作都是同步的并且是纯粹的，即 reducer 都是纯函数，纯函数是指一个函数的返回结果只依赖于它的参数，并且在执行过程中不会对外部产生副作用，即给它传什么，就吐出什么。但是在实际的应用开发中，我们希望做一些异步的（如Ajax请求）且不纯粹的操作（如改变外部的状态），这些在函数式编程范式中被称为“副作用”。\n\nRedux 的作者将这些副作用的处理通过提供中间件的方式让开发者自行选择进行实现。\n\nredux-thunk 和 redux-saga 是 redux 应用中最常用的两种异步流处理方式。\n\n### redux-thunk\nredux-thunk 的任务执行方式是从 UI 组件直接触发任务。redux-thunk 的主要思想是扩展 action，使得 action 从一个对象变成一个函数。\n    `\n\n\t// fetchUrl 返回一个 thunk\n\tfunction fetchUrl(url) {\n  \t\treturn (dispatch) => {\n    \t\tdispatch({\n      \t\t\ttype: 'FETCH_REQUEST'\n    \t\t});\n\n    \tfetch(url).then(data => dispatch({\n      \t\ttype: 'FETCH_SUCCESS',\n      \t\tdata\n    \t}));\n  \t\t}\n\t}\n\n\t// 如果 thunk 中间件正在运行的话，我们可以 dispatch 上述函数如下：\n\tdispatch(\n  \t\tfetchUrl(url)\n\t):\n`\nredux-thunk 的缺点：\n（1）action 虽然扩展了，但因此变得复杂，后期可维护性降低；\n（2）thunks 内部测试逻辑比较困难，需要mock所有的触发函数；\n（3）协调并发任务比较困难，当自己的 action 调用了别人的 action，别人的 action 发生改动，则需要自己主动修改；\n（4）业务逻辑会散布在不同的地方：启动的模块，组件以及thunks内部。\n\n### redux-saga\nsages 采用 Generator 函数来 yield Effects（包含指令的文本对象）。Generator 函数的作用是可以暂停执行，再次执行的时候从上次暂停的地方继续执行。Effect 是一个简单的对象，该对象包含了一些给 middleware 解释执行的信息。你可以通过使用 effects API 如 fork，call，take，put，cancel 等来创建 Effect。\n与 redux-thunk 不同的是，在 redux-saga 中，UI 组件自身从来不会触发任务，它们总是会 dispatch 一个 action 来通知在 UI 中哪些地方发生了改变，而不需要对 action 进行修改。redux-saga 将异步任务进行了集中处理，且方便测试。\n所有的东西都必须被封装在 sagas 中。sagas 包含3个部分，用于联合执行任务：\n1、worker saga\n做所有的工作，如调用 API，进行异步请求，并且获得返回结果\n2、watcher saga\n监听被 dispatch 的 actions，当接收到 action 或者知道其被触发时，调用 worker saga 执行任务\n3、root saga\n立即启动 sagas 的唯一入口\n具体使用姿势：\n    `\n\n\tclass UserComponent extends React.Component {\n \t ...\n  \t\tonSomeButtonClicked() {\n    \t\tconst { userId, dispatch } = this.props\n    \t\tdispatch({type: 'USER_FETCH_REQUESTED', payload: {userId}})\n  \t\t}\n  \t...\n\t}\n\t//sagas.js\n\n\timport { call, put, takeEvery, takeLatest } from 'redux-saga/effects'\n\timport Api from '...'\n\n\t// worker Saga: will be fired on USER_FETCH_REQUESTED actions\n\tfunction* fetchUser(action) {\n   \t\ttry {\n      \t\tconst user = yield call(Api.fetchUser, action.payload.userId);\n      \t\tyield put({type: \"USER_FETCH_SUCCEEDED\", user: user});\n   \t\t} catch (e) {\n      \t\tyield put({type: \"USER_FETCH_FAILED\", message: e.message});\n   \t\t}\n\t}\n\n\t/*\n  \tStarts fetchUser on each dispatched `USER_FETCH_REQUESTED` action.\n  \tAllows concurrent fetches of user.\n\t*/\n\tfunction* mySaga() {\n  \t\tyield takeEvery(\"USER_FETCH_REQUESTED\", fetchUser);\n\t}\n\n\t/*\n  \tAlternatively you may use takeLatest.\n  \tDoes not allow concurrent fetches of user. If \"USER_FETCH_REQUESTED\" gets\n  \tdispatched while a fetch is already pending, that pending fetch is cancelled\n  \tand only the latest one will be run.\n\t*/\n\tfunction* mySaga() {\n  \t\tyield takeLatest(\"USER_FETCH_REQUESTED\", fetchUser);\n\t}\n\n\texport default mySaga;\n\t//main.js\n\timport { createStore, applyMiddleware } from 'redux'\n\timport createSagaMiddleware from 'redux-saga'\n\n\timport reducer from './reducers'\n\timport mySaga from './sagas'\n\n\t// create the saga middleware\n\tconst sagaMiddleware = createSagaMiddleware()\n\t// mount it on the Store\n\tconst store = createStore(\n  \t\treducer,\n  \t\tapplyMiddleware(sagaMiddleware)\n\t)\n\n\t// then run the saga\n\tsagaMiddleware.run(mySaga)\n\n\t// render the application\n\t`\n\n最后，总结一下 redux-saga 的优点：\n\n（1）声明式 Effects：所有的操作以JavaScript对象的方式被 yield，并被 middleware 执行。使得在 saga 内部测试变得更加容易，可以通过简单地遍历 Generator 并在 yield 后的成功值上面做一个 deepEqual 测试。\n（2）高级的异步控制流以及并发管理：保持 action 的简单纯粹，aciton 不再像原来那样五花八门，让人眼花缭乱。task 的模式使代码更加清晰。可以使用简单的同步方式描述异步流，并通过 fork 实现并发任务。\n（3）架构上的优势：将所有的异步流程控制都移入到了 sagas，UI 组件不用执行业务逻辑，只需 dispatch action 就行，增强组件复用性。扩展性强。\n\n\n## dva\n先考虑一下redux-saga的缺点\n1、编辑成本高，需要在 reducer, saga, action 之间来回切换\n2、不便于组织业务模型 (或者叫 domain model) 。比如我们写了一个 userlist 之后，要写一个    \tproductlist，需要复制很多文件。\n还有一些其他的：\nsaga 书写太复杂，每监听一个 action 都需要走 fork -> watcher -> worker 的流程\nentry 书写麻烦\n...\n而 dva 正是用于解决这些问题。\n他最核心的是提供了 app.model 方法，用于把 reducer, initialState, action, saga 封装到一起，比如：\n\t`\n\n\tapp.model({\n  \t\tnamespace: 'products',\n  \t\t\tstate: {\n    \t\t\tlist: [],\n    \t\t\tloading: false,\n  \t\t\t},\n  \t\tsubscriptions: [\n    \t\tfunction(dispatch) {\n      \t\t\tdispatch({type: 'products/query'});\n    \t\t},\n  \t\t],\n  \t\teffects: {\n    \t\t['products/query']: function*() {\n      \t\t\tyield call(delay(800));\n      \t\t\tyield put({\n        \t\t\ttype: 'products/query/success',\n        \t\t\tpayload: ['ant-tool', 'roof'],\n      \t\t\t});\n    \t\t},\n  \t\t},\n  \t\treducers: {\n    \t\t['products/query'](state) {\n      \t\t\treturn { ...state, loading: true, };\n    \t\t},\n    \t\t['products/query/success'](state, { payload }) {\n      \t\t\treturn { ...state, loading: false, list: payload };\n    \t\t},\n  \t\t},\n\t});`\n在有 dva 之前，我们通常会创建 sagas/products.js, reducers/products.js 和 actions/products.js，然后在这些文件之间来回切换,使用dva以后可以将所有的逻辑操作在model中完成。\n","source":"_posts/redux.md","raw":"---\ntitle: flux->redux->redux-saga->dva说明\ndate: 2018-04-25 16:58:48\ntags:\n---\n## flux\n简单说，Flux 是一种架构思想，专门解决软件的结构问题。它跟MVC 架构是同一类东西，但是更加简单和清晰\n首先，Flux将一个应用分成四个部分。\nView： 视图层\nAction（动作）：视图层发出的消息（比如mouseClick）\nDispatcher（派发器）：用来接收Actions、执行回调函数\nStore（数据层）：用来存放应用的状态，一旦发生变动，就提醒Views要更新页面\nFlux 的最大特点，就是数据的\"单向流动\"。\n用户访问 View\nView 发出用户的 Action\nDispatcher 收到 Action，要求 Store 进行相应的更新\nStore 更新后，发出一个\"change\"事件\nView 收到\"change\"事件后，更新页面\n## redux\n### 设计思想\n（1）Web 应用是一个状态机，视图与状态是一一对应的。\n\n（2）所有的状态，保存在一个对象里面。\n\n### API\n1、Store\n\nStore 就是保存数据的地方，你可以把它看成一个容器。整个应用只能有一个 Store。\n\nRedux 提供createStore这个函数，用来生成 Store。\n\t`\n\n\timport { createStore } from 'redux';\n\tconst store = createStore(fn,initial_state,applyMiddleware());\n\t//后面会知道这个fn就是reducer,initial_state是初始状态，applyMiddleware是Redux的原生方法，作用是将所有中间件组成一个数组，依次执行`\n\n2、state\nStore对象包含所有数据。如果想得到某个时点的数据，就要对 Store 生成快照。这种时点的数据集合，就叫做 State。\n\n当前时刻的 State，可以通过store.getState()拿到。\n\n    `\n\timport { createStore } from 'redux';\n\tconst store = createStore(fn);\n\tconst state = store.getState();`\n\n3、Action\nstate 的变化，会导致 View 的变化。但是，用户接触不到 State，只能接触到 View。所以，State 的变化必须是 View 导致的。Action 就是 View 发出的通知，表示 State 应该要发生变化了。\n\nAction 是一个对象。其中的type属性是必须的，表示 Action 的名称。\n\n    `\n\tconst action = {\n  \t\ttype: 'ADD_TODO',\n  \t\tpayload: 'Learn Redux'\n\t};`\n\n4、store.dispatch()\nstore.dispatch()是 View 发出 Action 的唯一方法。\n    `\n\n\timport { createStore } from 'redux';\n\tconst store = createStore(fn);\n\n\tstore.dispatch({\n  \t\ttype: 'ADD_TODO',\n  \t\tpayload: 'Learn Redux'\n\t});`\n\n5、Reducer\n\nStore 收到 Action 以后，必须给出一个新的 State，这样 View 才会发生变化。这种 State 的计算过程就叫做 Reducer。\n\nReducer 是一个函数，它接受 Action 和当前 State 作为参数，返回一个新的 State。\n\n    `\n\tconst reducer = function (state, action) {\n  \t// ...\n  \treturn new_state;\n\t};\n\n\tconst defaultState = 0;\n\tconst reducer = (state = defaultState, action) => {\n  \t\tswitch (action.type) {\n    \t\tcase 'ADD':\n      \t\treturn state + action.payload;\n    \t\tdefault:\n      \t\treturn state;\n  \t\t}\n\t};\n\n\tconst state = reducer(1, {\n  \t\ttype: 'ADD',\n  \t\tpayload: 2\n\t});`\n\n实际应用中，Reducer 函数不用像上面这样手动调用，store.dispatch方法会触发 Reducer 的自动执行。为此，Store 需要知道 Reducer 函数，做法就是在生成 Store 的时候，将 Reducer 传入createStore方法。\n    `\n\n\timport { createStore } from 'redux';\n\tconst store = createStore(reducer);`\n\n6、 store.subscribe()\n\tStore 允许使用store.subscribe方法设置监听函数，一旦 State 发生变化，就自动执行这个函数。\n    `\n\n\timport { createStore } from 'redux';\n\tconst store = createStore(reducer);\n\n\tstore.subscribe(listener);//结合react，可以对render进行监听`\n\n7、Store的实现\n\nstore提供了三个方法\nstore.getState()\nstore.dispatch()\nstore.subscribe()\n\n简单实现原理\n    `\n\n\tconst createStore = (reducer) => {\n  \tlet state;\n  \tlet listeners = [];\n\n  \tconst getState = () => state;\n\n  \tconst dispatch = (action) => {\n    \tstate = reducer(state, action);\n    \tlisteners.forEach(listener => listener());\n  \t};\n\n  \tconst subscribe = (listener) => {\n    \tlisteners.push(listener);\n    \treturn () => {\n      \t\tlisteners = listeners.filter(l => l !== listener);\n    \t}\n  \t};\n\n  \tdispatch({});\n\n  \treturn { getState, dispatch, subscribe };\n\t};`\n\n以上简单说明了redux的工作原理，但是会发现一个问题，现在的action都是同步操作，那么redux如何处理异步的action，于是产生了中间件的概念，也就是对dispatch过程进行了处理，实现异步操作\n\n异步操作的基本思路\n同步操作只要发出一种 Action 即可，异步操作的差别是它要发出三种 Action\n操作发起时的 Action\n操作成功时的 Action\n操作失败时的 Action\n\n操作开始时，送出一个 Action，触发 State 更新为\"正在操作\"状态，View 重新渲染\n操作结束后，再送出一个 Action，触发 State 更新为\"操作结束\"状态，View 再一次重新渲染\n\n异步操作至少要送出两个 Action：用户触发第一个 Action，这个跟同步操作一样，没有问题；如何才能在操作结束时，系统自动送出第二个 Action 呢？\n\n    `\n\tconst fetchPosts = postTitle => (dispatch, getState) => {\n  \t\tdispatch(requestPosts(postTitle));\n  \t\treturn fetch(`/some/API/${postTitle}.json`)\n    \t\t\t.then(response => response.json())\n    \t\t\t.then(json => dispatch(receivePosts(postTitle, json)));\n  \t\t};\n\t};\n\tstore.dispatch(fetchPosts('reactjs'));\n\t上面代码中，fetchPosts是一个Action Creator（动作生成器），返回一个函数。这个函数执行后，先发出一个Action（requestPosts(postTitle)），然后进行异步操作。拿到结果后，先将结果转成 JSON 格式，然后再发出一个 Action（ receivePosts(postTitle, json)）。\n（1）fetchPosts返回了一个函数，而普通的 Action Creator 默认返回一个对象。\n\n（2）返回的函数的参数是dispatch和getState这两个 Redux 方法，普通的 Action Creator 的参数是 Action 的内容。\n\n（3）在返回的函数之中，先发出一个 Action（requestPosts(postTitle)），表示操作开始。\n\n（4）异步操作结束之后，再发出一个 Action（receivePosts(postTitle, json)），表示操作结束。\n\n这样的处理，就解决了自动发送第二个 Action 的问题。但是，又带来了一个新的问题，Action 是由store.dispatch方法发送的。而store.dispatch方法正常情况下，参数只能是对象，不能是函数。\n所以就需要使用中间件（redux-thunk），改造store.dispatch，使得后者可以接受函数作为参数。\n\n因此，异步操作的第一种解决方案就是，写出一个返回函数的 Action Creator，然后使用redux-thunk中间件改造store.dispatch\n\n既然 Action Creator 可以返回函数，当然也可以返回其他值。另一种异步操作的解决方案，就是让 Action Creator 返回一个 Promise 对象。\n\n这就需要使用redux-promise中间件。\n\n### react-redux\nReact-Redux 将所有组件分成两大类：UI 组件（presentational component）和容器组件（container component）。\n\nUI 组件有以下几个特征。\n只负责 UI 的呈现，不带有任何业务逻辑\n没有状态（即不使用this.state这个变量）\n所有数据都由参数（this.props）提供\n不使用任何 Redux 的 API\n\n容器组件的特征恰恰相反。\n负责管理数据和业务逻辑，不负责 UI 的呈现\n带有内部状态\n使用 Redux 的 API\n\n    `\n\t\timport { connect } from 'react-redux'\n\t\tconst VisibleTodoList = connect(\n  \t\t\tmapStateToProps,\n \t\t \tmapDispatchToProps\n\t\t)(TodoList)`\n\nmapStateToProps是一个函数。它的作用就是像它的名字那样，建立一个从（外部的）state对象到（UI 组件的）props对象的映射关系。\n\t\t`\n\n\tconst mapStateToProps = (state) => {\n  \t\treturn {\n    \t\ttodos: getVisibleTodos(state.todos, state.visibilityFilter)\n  \t\t}\n\t}`\n\nmapStateToProps会订阅 Store，每当state更新的时候，就会自动执行，重新计算 UI 组件的参数，从而触发 UI 组件的重新渲染。\n\nmapStateToProps的第一个参数总是state对象，还可以使用第二个参数，代表容器组件的props对象。\n\nmapDispatchToProps是connect函数的第二个参数，用来建立 UI 组件的参数到store.dispatch方法的映射。也就是说，它定义了哪些用户的操作应该当作 Action，传给 Store。它可以是一个函数，也可以是一个对象。\n\n如果mapDispatchToProps是一个函数，会得到dispatch和ownProps（容器组件的props对象）两个参数。\n\t`\n\n\tconst mapDispatchToProps = (\n  \t\tdispatch,\n  \t\townProps\n\t) => {\n  \t\treturn {\n    \t\tonClick: () => {\n      \t\t\tdispatch({\n        \t\t\ttype: 'SET_VISIBILITY_FILTER',\n        \t\t\tfilter: ownProps.filter\n      \t\t\t});\n    \t\t}\n  \t\t};\n\t}`\n\nReact-Redux 提供Provider组件，可以让容器组件拿到state。\n\n\t`\n\t\timport { Provider } from 'react-redux'\n\t\timport { createStore } from 'redux'\n\t\timport todoApp from './reducers'\n\t\timport App from './components/App'\n\n\t\tlet store = createStore(todoApp);\n\n\t\trender(\n  \t\t\t<Provider store={store}>\n    \t\t\t<App />\n  \t\t\t</Provider>,\n  \t\tdocument.getElementById('root')\n\t\t)`\n\n上面代码中，Provider在根组件外面包了一层，这样一来，App的所有子组件就默认都可以拿到state了。\n\n它的原理是React组件的context属性，请看源码。\n\t`\n\n\t\tclass Provider extends Component {\n  \t\tgetChildContext() {\n    \t\treturn {\n      \t\t\tstore: this.props.store\n    \t\t};\n  \t\t}\n  \t\trender() {\n    \t\treturn this.props.children;\n  \t\t}\n\t\t}\n\n\t\tProvider.childContextTypes = {\n  \t\t\tstore: React.PropTypes.object\n\t\t}`\n\n## redux-saga\nredux-saga的实质是类似redux-thunk的中间件，作用是为redux提供额外的功能\n其次，我们都知道，在 reducers 中的所有操作都是同步的并且是纯粹的，即 reducer 都是纯函数，纯函数是指一个函数的返回结果只依赖于它的参数，并且在执行过程中不会对外部产生副作用，即给它传什么，就吐出什么。但是在实际的应用开发中，我们希望做一些异步的（如Ajax请求）且不纯粹的操作（如改变外部的状态），这些在函数式编程范式中被称为“副作用”。\n\nRedux 的作者将这些副作用的处理通过提供中间件的方式让开发者自行选择进行实现。\n\nredux-thunk 和 redux-saga 是 redux 应用中最常用的两种异步流处理方式。\n\n### redux-thunk\nredux-thunk 的任务执行方式是从 UI 组件直接触发任务。redux-thunk 的主要思想是扩展 action，使得 action 从一个对象变成一个函数。\n    `\n\n\t// fetchUrl 返回一个 thunk\n\tfunction fetchUrl(url) {\n  \t\treturn (dispatch) => {\n    \t\tdispatch({\n      \t\t\ttype: 'FETCH_REQUEST'\n    \t\t});\n\n    \tfetch(url).then(data => dispatch({\n      \t\ttype: 'FETCH_SUCCESS',\n      \t\tdata\n    \t}));\n  \t\t}\n\t}\n\n\t// 如果 thunk 中间件正在运行的话，我们可以 dispatch 上述函数如下：\n\tdispatch(\n  \t\tfetchUrl(url)\n\t):\n`\nredux-thunk 的缺点：\n（1）action 虽然扩展了，但因此变得复杂，后期可维护性降低；\n（2）thunks 内部测试逻辑比较困难，需要mock所有的触发函数；\n（3）协调并发任务比较困难，当自己的 action 调用了别人的 action，别人的 action 发生改动，则需要自己主动修改；\n（4）业务逻辑会散布在不同的地方：启动的模块，组件以及thunks内部。\n\n### redux-saga\nsages 采用 Generator 函数来 yield Effects（包含指令的文本对象）。Generator 函数的作用是可以暂停执行，再次执行的时候从上次暂停的地方继续执行。Effect 是一个简单的对象，该对象包含了一些给 middleware 解释执行的信息。你可以通过使用 effects API 如 fork，call，take，put，cancel 等来创建 Effect。\n与 redux-thunk 不同的是，在 redux-saga 中，UI 组件自身从来不会触发任务，它们总是会 dispatch 一个 action 来通知在 UI 中哪些地方发生了改变，而不需要对 action 进行修改。redux-saga 将异步任务进行了集中处理，且方便测试。\n所有的东西都必须被封装在 sagas 中。sagas 包含3个部分，用于联合执行任务：\n1、worker saga\n做所有的工作，如调用 API，进行异步请求，并且获得返回结果\n2、watcher saga\n监听被 dispatch 的 actions，当接收到 action 或者知道其被触发时，调用 worker saga 执行任务\n3、root saga\n立即启动 sagas 的唯一入口\n具体使用姿势：\n    `\n\n\tclass UserComponent extends React.Component {\n \t ...\n  \t\tonSomeButtonClicked() {\n    \t\tconst { userId, dispatch } = this.props\n    \t\tdispatch({type: 'USER_FETCH_REQUESTED', payload: {userId}})\n  \t\t}\n  \t...\n\t}\n\t//sagas.js\n\n\timport { call, put, takeEvery, takeLatest } from 'redux-saga/effects'\n\timport Api from '...'\n\n\t// worker Saga: will be fired on USER_FETCH_REQUESTED actions\n\tfunction* fetchUser(action) {\n   \t\ttry {\n      \t\tconst user = yield call(Api.fetchUser, action.payload.userId);\n      \t\tyield put({type: \"USER_FETCH_SUCCEEDED\", user: user});\n   \t\t} catch (e) {\n      \t\tyield put({type: \"USER_FETCH_FAILED\", message: e.message});\n   \t\t}\n\t}\n\n\t/*\n  \tStarts fetchUser on each dispatched `USER_FETCH_REQUESTED` action.\n  \tAllows concurrent fetches of user.\n\t*/\n\tfunction* mySaga() {\n  \t\tyield takeEvery(\"USER_FETCH_REQUESTED\", fetchUser);\n\t}\n\n\t/*\n  \tAlternatively you may use takeLatest.\n  \tDoes not allow concurrent fetches of user. If \"USER_FETCH_REQUESTED\" gets\n  \tdispatched while a fetch is already pending, that pending fetch is cancelled\n  \tand only the latest one will be run.\n\t*/\n\tfunction* mySaga() {\n  \t\tyield takeLatest(\"USER_FETCH_REQUESTED\", fetchUser);\n\t}\n\n\texport default mySaga;\n\t//main.js\n\timport { createStore, applyMiddleware } from 'redux'\n\timport createSagaMiddleware from 'redux-saga'\n\n\timport reducer from './reducers'\n\timport mySaga from './sagas'\n\n\t// create the saga middleware\n\tconst sagaMiddleware = createSagaMiddleware()\n\t// mount it on the Store\n\tconst store = createStore(\n  \t\treducer,\n  \t\tapplyMiddleware(sagaMiddleware)\n\t)\n\n\t// then run the saga\n\tsagaMiddleware.run(mySaga)\n\n\t// render the application\n\t`\n\n最后，总结一下 redux-saga 的优点：\n\n（1）声明式 Effects：所有的操作以JavaScript对象的方式被 yield，并被 middleware 执行。使得在 saga 内部测试变得更加容易，可以通过简单地遍历 Generator 并在 yield 后的成功值上面做一个 deepEqual 测试。\n（2）高级的异步控制流以及并发管理：保持 action 的简单纯粹，aciton 不再像原来那样五花八门，让人眼花缭乱。task 的模式使代码更加清晰。可以使用简单的同步方式描述异步流，并通过 fork 实现并发任务。\n（3）架构上的优势：将所有的异步流程控制都移入到了 sagas，UI 组件不用执行业务逻辑，只需 dispatch action 就行，增强组件复用性。扩展性强。\n\n\n## dva\n先考虑一下redux-saga的缺点\n1、编辑成本高，需要在 reducer, saga, action 之间来回切换\n2、不便于组织业务模型 (或者叫 domain model) 。比如我们写了一个 userlist 之后，要写一个    \tproductlist，需要复制很多文件。\n还有一些其他的：\nsaga 书写太复杂，每监听一个 action 都需要走 fork -> watcher -> worker 的流程\nentry 书写麻烦\n...\n而 dva 正是用于解决这些问题。\n他最核心的是提供了 app.model 方法，用于把 reducer, initialState, action, saga 封装到一起，比如：\n\t`\n\n\tapp.model({\n  \t\tnamespace: 'products',\n  \t\t\tstate: {\n    \t\t\tlist: [],\n    \t\t\tloading: false,\n  \t\t\t},\n  \t\tsubscriptions: [\n    \t\tfunction(dispatch) {\n      \t\t\tdispatch({type: 'products/query'});\n    \t\t},\n  \t\t],\n  \t\teffects: {\n    \t\t['products/query']: function*() {\n      \t\t\tyield call(delay(800));\n      \t\t\tyield put({\n        \t\t\ttype: 'products/query/success',\n        \t\t\tpayload: ['ant-tool', 'roof'],\n      \t\t\t});\n    \t\t},\n  \t\t},\n  \t\treducers: {\n    \t\t['products/query'](state) {\n      \t\t\treturn { ...state, loading: true, };\n    \t\t},\n    \t\t['products/query/success'](state, { payload }) {\n      \t\t\treturn { ...state, loading: false, list: payload };\n    \t\t},\n  \t\t},\n\t});`\n在有 dva 之前，我们通常会创建 sagas/products.js, reducers/products.js 和 actions/products.js，然后在这些文件之间来回切换,使用dva以后可以将所有的逻辑操作在model中完成。\n","slug":"redux","published":1,"updated":"2018-04-25T09:00:02.507Z","_id":"cjgevausa0003e0vwyulgf11f","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"flux\"><a href=\"#flux\" class=\"headerlink\" title=\"flux\"></a>flux</h2><p>简单说，Flux 是一种架构思想，专门解决软件的结构问题。它跟MVC 架构是同一类东西，但是更加简单和清晰<br>首先，Flux将一个应用分成四个部分。<br>View： 视图层<br>Action（动作）：视图层发出的消息（比如mouseClick）<br>Dispatcher（派发器）：用来接收Actions、执行回调函数<br>Store（数据层）：用来存放应用的状态，一旦发生变动，就提醒Views要更新页面<br>Flux 的最大特点，就是数据的”单向流动”。<br>用户访问 View<br>View 发出用户的 Action<br>Dispatcher 收到 Action，要求 Store 进行相应的更新<br>Store 更新后，发出一个”change”事件<br>View 收到”change”事件后，更新页面</p>\n<h2 id=\"redux\"><a href=\"#redux\" class=\"headerlink\" title=\"redux\"></a>redux</h2><h3 id=\"设计思想\"><a href=\"#设计思想\" class=\"headerlink\" title=\"设计思想\"></a>设计思想</h3><p>（1）Web 应用是一个状态机，视图与状态是一一对应的。</p>\n<p>（2）所有的状态，保存在一个对象里面。</p>\n<h3 id=\"API\"><a href=\"#API\" class=\"headerlink\" title=\"API\"></a>API</h3><p>1、Store</p>\n<p>Store 就是保存数据的地方，你可以把它看成一个容器。整个应用只能有一个 Store。</p>\n<p>Redux 提供createStore这个函数，用来生成 Store。<br>    `</p>\n<pre><code>import { createStore } from &apos;redux&apos;;\nconst store = createStore(fn,initial_state,applyMiddleware());\n//后面会知道这个fn就是reducer,initial_state是初始状态，applyMiddleware是Redux的原生方法，作用是将所有中间件组成一个数组，依次执行`\n</code></pre><p>2、state<br>Store对象包含所有数据。如果想得到某个时点的数据，就要对 Store 生成快照。这种时点的数据集合，就叫做 State。</p>\n<p>当前时刻的 State，可以通过store.getState()拿到。</p>\n<pre><code>`\nimport { createStore } from &apos;redux&apos;;\nconst store = createStore(fn);\nconst state = store.getState();`\n</code></pre><p>3、Action<br>state 的变化，会导致 View 的变化。但是，用户接触不到 State，只能接触到 View。所以，State 的变化必须是 View 导致的。Action 就是 View 发出的通知，表示 State 应该要发生变化了。</p>\n<p>Action 是一个对象。其中的type属性是必须的，表示 Action 的名称。</p>\n<pre><code>`\nconst action = {\n      type: &apos;ADD_TODO&apos;,\n      payload: &apos;Learn Redux&apos;\n};`\n</code></pre><p>4、store.dispatch()<br>store.dispatch()是 View 发出 Action 的唯一方法。<br>    `</p>\n<pre><code>import { createStore } from &apos;redux&apos;;\nconst store = createStore(fn);\n\nstore.dispatch({\n      type: &apos;ADD_TODO&apos;,\n      payload: &apos;Learn Redux&apos;\n});`\n</code></pre><p>5、Reducer</p>\n<p>Store 收到 Action 以后，必须给出一个新的 State，这样 View 才会发生变化。这种 State 的计算过程就叫做 Reducer。</p>\n<p>Reducer 是一个函数，它接受 Action 和当前 State 作为参数，返回一个新的 State。</p>\n<pre><code>`\nconst reducer = function (state, action) {\n  // ...\n  return new_state;\n};\n\nconst defaultState = 0;\nconst reducer = (state = defaultState, action) =&gt; {\n      switch (action.type) {\n        case &apos;ADD&apos;:\n          return state + action.payload;\n        default:\n          return state;\n      }\n};\n\nconst state = reducer(1, {\n      type: &apos;ADD&apos;,\n      payload: 2\n});`\n</code></pre><p>实际应用中，Reducer 函数不用像上面这样手动调用，store.dispatch方法会触发 Reducer 的自动执行。为此，Store 需要知道 Reducer 函数，做法就是在生成 Store 的时候，将 Reducer 传入createStore方法。<br>    `</p>\n<pre><code>import { createStore } from &apos;redux&apos;;\nconst store = createStore(reducer);`\n</code></pre><p>6、 store.subscribe()<br>    Store 允许使用store.subscribe方法设置监听函数，一旦 State 发生变化，就自动执行这个函数。<br>    `</p>\n<pre><code>import { createStore } from &apos;redux&apos;;\nconst store = createStore(reducer);\n\nstore.subscribe(listener);//结合react，可以对render进行监听`\n</code></pre><p>7、Store的实现</p>\n<p>store提供了三个方法<br>store.getState()<br>store.dispatch()<br>store.subscribe()</p>\n<p>简单实现原理<br>    `</p>\n<pre><code>const createStore = (reducer) =&gt; {\n  let state;\n  let listeners = [];\n\n  const getState = () =&gt; state;\n\n  const dispatch = (action) =&gt; {\n    state = reducer(state, action);\n    listeners.forEach(listener =&gt; listener());\n  };\n\n  const subscribe = (listener) =&gt; {\n    listeners.push(listener);\n    return () =&gt; {\n          listeners = listeners.filter(l =&gt; l !== listener);\n    }\n  };\n\n  dispatch({});\n\n  return { getState, dispatch, subscribe };\n};`\n</code></pre><p>以上简单说明了redux的工作原理，但是会发现一个问题，现在的action都是同步操作，那么redux如何处理异步的action，于是产生了中间件的概念，也就是对dispatch过程进行了处理，实现异步操作</p>\n<p>异步操作的基本思路<br>同步操作只要发出一种 Action 即可，异步操作的差别是它要发出三种 Action<br>操作发起时的 Action<br>操作成功时的 Action<br>操作失败时的 Action</p>\n<p>操作开始时，送出一个 Action，触发 State 更新为”正在操作”状态，View 重新渲染<br>操作结束后，再送出一个 Action，触发 State 更新为”操作结束”状态，View 再一次重新渲染</p>\n<p>异步操作至少要送出两个 Action：用户触发第一个 Action，这个跟同步操作一样，没有问题；如何才能在操作结束时，系统自动送出第二个 Action 呢？</p>\n<pre><code>`\nconst fetchPosts = postTitle =&gt; (dispatch, getState) =&gt; {\n      dispatch(requestPosts(postTitle));\n      return fetch(`/some/API/${postTitle}.json`)\n            .then(response =&gt; response.json())\n            .then(json =&gt; dispatch(receivePosts(postTitle, json)));\n      };\n};\nstore.dispatch(fetchPosts(&apos;reactjs&apos;));\n上面代码中，fetchPosts是一个Action Creator（动作生成器），返回一个函数。这个函数执行后，先发出一个Action（requestPosts(postTitle)），然后进行异步操作。拿到结果后，先将结果转成 JSON 格式，然后再发出一个 Action（ receivePosts(postTitle, json)）。\n</code></pre><p>（1）fetchPosts返回了一个函数，而普通的 Action Creator 默认返回一个对象。</p>\n<p>（2）返回的函数的参数是dispatch和getState这两个 Redux 方法，普通的 Action Creator 的参数是 Action 的内容。</p>\n<p>（3）在返回的函数之中，先发出一个 Action（requestPosts(postTitle)），表示操作开始。</p>\n<p>（4）异步操作结束之后，再发出一个 Action（receivePosts(postTitle, json)），表示操作结束。</p>\n<p>这样的处理，就解决了自动发送第二个 Action 的问题。但是，又带来了一个新的问题，Action 是由store.dispatch方法发送的。而store.dispatch方法正常情况下，参数只能是对象，不能是函数。<br>所以就需要使用中间件（redux-thunk），改造store.dispatch，使得后者可以接受函数作为参数。</p>\n<p>因此，异步操作的第一种解决方案就是，写出一个返回函数的 Action Creator，然后使用redux-thunk中间件改造store.dispatch</p>\n<p>既然 Action Creator 可以返回函数，当然也可以返回其他值。另一种异步操作的解决方案，就是让 Action Creator 返回一个 Promise 对象。</p>\n<p>这就需要使用redux-promise中间件。</p>\n<h3 id=\"react-redux\"><a href=\"#react-redux\" class=\"headerlink\" title=\"react-redux\"></a>react-redux</h3><p>React-Redux 将所有组件分成两大类：UI 组件（presentational component）和容器组件（container component）。</p>\n<p>UI 组件有以下几个特征。<br>只负责 UI 的呈现，不带有任何业务逻辑<br>没有状态（即不使用this.state这个变量）<br>所有数据都由参数（this.props）提供<br>不使用任何 Redux 的 API</p>\n<p>容器组件的特征恰恰相反。<br>负责管理数据和业务逻辑，不负责 UI 的呈现<br>带有内部状态<br>使用 Redux 的 API</p>\n<pre><code>`\n    import { connect } from &apos;react-redux&apos;\n    const VisibleTodoList = connect(\n          mapStateToProps,\n          mapDispatchToProps\n    )(TodoList)`\n</code></pre><p>mapStateToProps是一个函数。它的作用就是像它的名字那样，建立一个从（外部的）state对象到（UI 组件的）props对象的映射关系。<br>        `</p>\n<pre><code>const mapStateToProps = (state) =&gt; {\n      return {\n        todos: getVisibleTodos(state.todos, state.visibilityFilter)\n      }\n}`\n</code></pre><p>mapStateToProps会订阅 Store，每当state更新的时候，就会自动执行，重新计算 UI 组件的参数，从而触发 UI 组件的重新渲染。</p>\n<p>mapStateToProps的第一个参数总是state对象，还可以使用第二个参数，代表容器组件的props对象。</p>\n<p>mapDispatchToProps是connect函数的第二个参数，用来建立 UI 组件的参数到store.dispatch方法的映射。也就是说，它定义了哪些用户的操作应该当作 Action，传给 Store。它可以是一个函数，也可以是一个对象。</p>\n<p>如果mapDispatchToProps是一个函数，会得到dispatch和ownProps（容器组件的props对象）两个参数。<br>    `</p>\n<pre><code>const mapDispatchToProps = (\n      dispatch,\n      ownProps\n) =&gt; {\n      return {\n        onClick: () =&gt; {\n              dispatch({\n                type: &apos;SET_VISIBILITY_FILTER&apos;,\n                filter: ownProps.filter\n              });\n        }\n      };\n}`\n</code></pre><p>React-Redux 提供Provider组件，可以让容器组件拿到state。</p>\n<pre><code>`\n    import { Provider } from &apos;react-redux&apos;\n    import { createStore } from &apos;redux&apos;\n    import todoApp from &apos;./reducers&apos;\n    import App from &apos;./components/App&apos;\n\n    let store = createStore(todoApp);\n\n    render(\n          &lt;Provider store={store}&gt;\n            &lt;App /&gt;\n          &lt;/Provider&gt;,\n      document.getElementById(&apos;root&apos;)\n    )`\n</code></pre><p>上面代码中，Provider在根组件外面包了一层，这样一来，App的所有子组件就默认都可以拿到state了。</p>\n<p>它的原理是React组件的context属性，请看源码。<br>    `</p>\n<pre><code>class Provider extends Component {\n  getChildContext() {\n    return {\n          store: this.props.store\n    };\n  }\n  render() {\n    return this.props.children;\n  }\n}\n\nProvider.childContextTypes = {\n      store: React.PropTypes.object\n}`\n</code></pre><h2 id=\"redux-saga\"><a href=\"#redux-saga\" class=\"headerlink\" title=\"redux-saga\"></a>redux-saga</h2><p>redux-saga的实质是类似redux-thunk的中间件，作用是为redux提供额外的功能<br>其次，我们都知道，在 reducers 中的所有操作都是同步的并且是纯粹的，即 reducer 都是纯函数，纯函数是指一个函数的返回结果只依赖于它的参数，并且在执行过程中不会对外部产生副作用，即给它传什么，就吐出什么。但是在实际的应用开发中，我们希望做一些异步的（如Ajax请求）且不纯粹的操作（如改变外部的状态），这些在函数式编程范式中被称为“副作用”。</p>\n<p>Redux 的作者将这些副作用的处理通过提供中间件的方式让开发者自行选择进行实现。</p>\n<p>redux-thunk 和 redux-saga 是 redux 应用中最常用的两种异步流处理方式。</p>\n<h3 id=\"redux-thunk\"><a href=\"#redux-thunk\" class=\"headerlink\" title=\"redux-thunk\"></a>redux-thunk</h3><p>redux-thunk 的任务执行方式是从 UI 组件直接触发任务。redux-thunk 的主要思想是扩展 action，使得 action 从一个对象变成一个函数。<br>    `</p>\n<pre><code>// fetchUrl 返回一个 thunk\nfunction fetchUrl(url) {\n      return (dispatch) =&gt; {\n        dispatch({\n              type: &apos;FETCH_REQUEST&apos;\n        });\n\n    fetch(url).then(data =&gt; dispatch({\n          type: &apos;FETCH_SUCCESS&apos;,\n          data\n    }));\n      }\n}\n\n// 如果 thunk 中间件正在运行的话，我们可以 dispatch 上述函数如下：\ndispatch(\n      fetchUrl(url)\n):\n</code></pre><p>`<br>redux-thunk 的缺点：<br>（1）action 虽然扩展了，但因此变得复杂，后期可维护性降低；<br>（2）thunks 内部测试逻辑比较困难，需要mock所有的触发函数；<br>（3）协调并发任务比较困难，当自己的 action 调用了别人的 action，别人的 action 发生改动，则需要自己主动修改；<br>（4）业务逻辑会散布在不同的地方：启动的模块，组件以及thunks内部。</p>\n<h3 id=\"redux-saga-1\"><a href=\"#redux-saga-1\" class=\"headerlink\" title=\"redux-saga\"></a>redux-saga</h3><p>sages 采用 Generator 函数来 yield Effects（包含指令的文本对象）。Generator 函数的作用是可以暂停执行，再次执行的时候从上次暂停的地方继续执行。Effect 是一个简单的对象，该对象包含了一些给 middleware 解释执行的信息。你可以通过使用 effects API 如 fork，call，take，put，cancel 等来创建 Effect。<br>与 redux-thunk 不同的是，在 redux-saga 中，UI 组件自身从来不会触发任务，它们总是会 dispatch 一个 action 来通知在 UI 中哪些地方发生了改变，而不需要对 action 进行修改。redux-saga 将异步任务进行了集中处理，且方便测试。<br>所有的东西都必须被封装在 sagas 中。sagas 包含3个部分，用于联合执行任务：<br>1、worker saga<br>做所有的工作，如调用 API，进行异步请求，并且获得返回结果<br>2、watcher saga<br>监听被 dispatch 的 actions，当接收到 action 或者知道其被触发时，调用 worker saga 执行任务<br>3、root saga<br>立即启动 sagas 的唯一入口<br>具体使用姿势：<br>    `</p>\n<pre><code>class UserComponent extends React.Component {\n  ...\n      onSomeButtonClicked() {\n        const { userId, dispatch } = this.props\n        dispatch({type: &apos;USER_FETCH_REQUESTED&apos;, payload: {userId}})\n      }\n  ...\n}\n//sagas.js\n\nimport { call, put, takeEvery, takeLatest } from &apos;redux-saga/effects&apos;\nimport Api from &apos;...&apos;\n\n// worker Saga: will be fired on USER_FETCH_REQUESTED actions\nfunction* fetchUser(action) {\n       try {\n          const user = yield call(Api.fetchUser, action.payload.userId);\n          yield put({type: &quot;USER_FETCH_SUCCEEDED&quot;, user: user});\n       } catch (e) {\n          yield put({type: &quot;USER_FETCH_FAILED&quot;, message: e.message});\n       }\n}\n\n/*\n  Starts fetchUser on each dispatched `USER_FETCH_REQUESTED` action.\n  Allows concurrent fetches of user.\n*/\nfunction* mySaga() {\n      yield takeEvery(&quot;USER_FETCH_REQUESTED&quot;, fetchUser);\n}\n\n/*\n  Alternatively you may use takeLatest.\n  Does not allow concurrent fetches of user. If &quot;USER_FETCH_REQUESTED&quot; gets\n  dispatched while a fetch is already pending, that pending fetch is cancelled\n  and only the latest one will be run.\n*/\nfunction* mySaga() {\n      yield takeLatest(&quot;USER_FETCH_REQUESTED&quot;, fetchUser);\n}\n\nexport default mySaga;\n//main.js\nimport { createStore, applyMiddleware } from &apos;redux&apos;\nimport createSagaMiddleware from &apos;redux-saga&apos;\n\nimport reducer from &apos;./reducers&apos;\nimport mySaga from &apos;./sagas&apos;\n\n// create the saga middleware\nconst sagaMiddleware = createSagaMiddleware()\n// mount it on the Store\nconst store = createStore(\n      reducer,\n      applyMiddleware(sagaMiddleware)\n)\n\n// then run the saga\nsagaMiddleware.run(mySaga)\n\n// render the application\n`\n</code></pre><p>最后，总结一下 redux-saga 的优点：</p>\n<p>（1）声明式 Effects：所有的操作以JavaScript对象的方式被 yield，并被 middleware 执行。使得在 saga 内部测试变得更加容易，可以通过简单地遍历 Generator 并在 yield 后的成功值上面做一个 deepEqual 测试。<br>（2）高级的异步控制流以及并发管理：保持 action 的简单纯粹，aciton 不再像原来那样五花八门，让人眼花缭乱。task 的模式使代码更加清晰。可以使用简单的同步方式描述异步流，并通过 fork 实现并发任务。<br>（3）架构上的优势：将所有的异步流程控制都移入到了 sagas，UI 组件不用执行业务逻辑，只需 dispatch action 就行，增强组件复用性。扩展性强。</p>\n<h2 id=\"dva\"><a href=\"#dva\" class=\"headerlink\" title=\"dva\"></a>dva</h2><p>先考虑一下redux-saga的缺点<br>1、编辑成本高，需要在 reducer, saga, action 之间来回切换<br>2、不便于组织业务模型 (或者叫 domain model) 。比如我们写了一个 userlist 之后，要写一个        productlist，需要复制很多文件。<br>还有一些其他的：<br>saga 书写太复杂，每监听一个 action 都需要走 fork -&gt; watcher -&gt; worker 的流程<br>entry 书写麻烦<br>…<br>而 dva 正是用于解决这些问题。<br>他最核心的是提供了 app.model 方法，用于把 reducer, initialState, action, saga 封装到一起，比如：<br>    `</p>\n<pre><code>app.model({\n      namespace: &apos;products&apos;,\n          state: {\n            list: [],\n            loading: false,\n          },\n      subscriptions: [\n        function(dispatch) {\n              dispatch({type: &apos;products/query&apos;});\n        },\n      ],\n      effects: {\n        [&apos;products/query&apos;]: function*() {\n              yield call(delay(800));\n              yield put({\n                type: &apos;products/query/success&apos;,\n                payload: [&apos;ant-tool&apos;, &apos;roof&apos;],\n              });\n        },\n      },\n      reducers: {\n        [&apos;products/query&apos;](state) {\n              return { ...state, loading: true, };\n        },\n        [&apos;products/query/success&apos;](state, { payload }) {\n              return { ...state, loading: false, list: payload };\n        },\n      },\n});`\n</code></pre><p>在有 dva 之前，我们通常会创建 sagas/products.js, reducers/products.js 和 actions/products.js，然后在这些文件之间来回切换,使用dva以后可以将所有的逻辑操作在model中完成。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"flux\"><a href=\"#flux\" class=\"headerlink\" title=\"flux\"></a>flux</h2><p>简单说，Flux 是一种架构思想，专门解决软件的结构问题。它跟MVC 架构是同一类东西，但是更加简单和清晰<br>首先，Flux将一个应用分成四个部分。<br>View： 视图层<br>Action（动作）：视图层发出的消息（比如mouseClick）<br>Dispatcher（派发器）：用来接收Actions、执行回调函数<br>Store（数据层）：用来存放应用的状态，一旦发生变动，就提醒Views要更新页面<br>Flux 的最大特点，就是数据的”单向流动”。<br>用户访问 View<br>View 发出用户的 Action<br>Dispatcher 收到 Action，要求 Store 进行相应的更新<br>Store 更新后，发出一个”change”事件<br>View 收到”change”事件后，更新页面</p>\n<h2 id=\"redux\"><a href=\"#redux\" class=\"headerlink\" title=\"redux\"></a>redux</h2><h3 id=\"设计思想\"><a href=\"#设计思想\" class=\"headerlink\" title=\"设计思想\"></a>设计思想</h3><p>（1）Web 应用是一个状态机，视图与状态是一一对应的。</p>\n<p>（2）所有的状态，保存在一个对象里面。</p>\n<h3 id=\"API\"><a href=\"#API\" class=\"headerlink\" title=\"API\"></a>API</h3><p>1、Store</p>\n<p>Store 就是保存数据的地方，你可以把它看成一个容器。整个应用只能有一个 Store。</p>\n<p>Redux 提供createStore这个函数，用来生成 Store。<br>    `</p>\n<pre><code>import { createStore } from &apos;redux&apos;;\nconst store = createStore(fn,initial_state,applyMiddleware());\n//后面会知道这个fn就是reducer,initial_state是初始状态，applyMiddleware是Redux的原生方法，作用是将所有中间件组成一个数组，依次执行`\n</code></pre><p>2、state<br>Store对象包含所有数据。如果想得到某个时点的数据，就要对 Store 生成快照。这种时点的数据集合，就叫做 State。</p>\n<p>当前时刻的 State，可以通过store.getState()拿到。</p>\n<pre><code>`\nimport { createStore } from &apos;redux&apos;;\nconst store = createStore(fn);\nconst state = store.getState();`\n</code></pre><p>3、Action<br>state 的变化，会导致 View 的变化。但是，用户接触不到 State，只能接触到 View。所以，State 的变化必须是 View 导致的。Action 就是 View 发出的通知，表示 State 应该要发生变化了。</p>\n<p>Action 是一个对象。其中的type属性是必须的，表示 Action 的名称。</p>\n<pre><code>`\nconst action = {\n      type: &apos;ADD_TODO&apos;,\n      payload: &apos;Learn Redux&apos;\n};`\n</code></pre><p>4、store.dispatch()<br>store.dispatch()是 View 发出 Action 的唯一方法。<br>    `</p>\n<pre><code>import { createStore } from &apos;redux&apos;;\nconst store = createStore(fn);\n\nstore.dispatch({\n      type: &apos;ADD_TODO&apos;,\n      payload: &apos;Learn Redux&apos;\n});`\n</code></pre><p>5、Reducer</p>\n<p>Store 收到 Action 以后，必须给出一个新的 State，这样 View 才会发生变化。这种 State 的计算过程就叫做 Reducer。</p>\n<p>Reducer 是一个函数，它接受 Action 和当前 State 作为参数，返回一个新的 State。</p>\n<pre><code>`\nconst reducer = function (state, action) {\n  // ...\n  return new_state;\n};\n\nconst defaultState = 0;\nconst reducer = (state = defaultState, action) =&gt; {\n      switch (action.type) {\n        case &apos;ADD&apos;:\n          return state + action.payload;\n        default:\n          return state;\n      }\n};\n\nconst state = reducer(1, {\n      type: &apos;ADD&apos;,\n      payload: 2\n});`\n</code></pre><p>实际应用中，Reducer 函数不用像上面这样手动调用，store.dispatch方法会触发 Reducer 的自动执行。为此，Store 需要知道 Reducer 函数，做法就是在生成 Store 的时候，将 Reducer 传入createStore方法。<br>    `</p>\n<pre><code>import { createStore } from &apos;redux&apos;;\nconst store = createStore(reducer);`\n</code></pre><p>6、 store.subscribe()<br>    Store 允许使用store.subscribe方法设置监听函数，一旦 State 发生变化，就自动执行这个函数。<br>    `</p>\n<pre><code>import { createStore } from &apos;redux&apos;;\nconst store = createStore(reducer);\n\nstore.subscribe(listener);//结合react，可以对render进行监听`\n</code></pre><p>7、Store的实现</p>\n<p>store提供了三个方法<br>store.getState()<br>store.dispatch()<br>store.subscribe()</p>\n<p>简单实现原理<br>    `</p>\n<pre><code>const createStore = (reducer) =&gt; {\n  let state;\n  let listeners = [];\n\n  const getState = () =&gt; state;\n\n  const dispatch = (action) =&gt; {\n    state = reducer(state, action);\n    listeners.forEach(listener =&gt; listener());\n  };\n\n  const subscribe = (listener) =&gt; {\n    listeners.push(listener);\n    return () =&gt; {\n          listeners = listeners.filter(l =&gt; l !== listener);\n    }\n  };\n\n  dispatch({});\n\n  return { getState, dispatch, subscribe };\n};`\n</code></pre><p>以上简单说明了redux的工作原理，但是会发现一个问题，现在的action都是同步操作，那么redux如何处理异步的action，于是产生了中间件的概念，也就是对dispatch过程进行了处理，实现异步操作</p>\n<p>异步操作的基本思路<br>同步操作只要发出一种 Action 即可，异步操作的差别是它要发出三种 Action<br>操作发起时的 Action<br>操作成功时的 Action<br>操作失败时的 Action</p>\n<p>操作开始时，送出一个 Action，触发 State 更新为”正在操作”状态，View 重新渲染<br>操作结束后，再送出一个 Action，触发 State 更新为”操作结束”状态，View 再一次重新渲染</p>\n<p>异步操作至少要送出两个 Action：用户触发第一个 Action，这个跟同步操作一样，没有问题；如何才能在操作结束时，系统自动送出第二个 Action 呢？</p>\n<pre><code>`\nconst fetchPosts = postTitle =&gt; (dispatch, getState) =&gt; {\n      dispatch(requestPosts(postTitle));\n      return fetch(`/some/API/${postTitle}.json`)\n            .then(response =&gt; response.json())\n            .then(json =&gt; dispatch(receivePosts(postTitle, json)));\n      };\n};\nstore.dispatch(fetchPosts(&apos;reactjs&apos;));\n上面代码中，fetchPosts是一个Action Creator（动作生成器），返回一个函数。这个函数执行后，先发出一个Action（requestPosts(postTitle)），然后进行异步操作。拿到结果后，先将结果转成 JSON 格式，然后再发出一个 Action（ receivePosts(postTitle, json)）。\n</code></pre><p>（1）fetchPosts返回了一个函数，而普通的 Action Creator 默认返回一个对象。</p>\n<p>（2）返回的函数的参数是dispatch和getState这两个 Redux 方法，普通的 Action Creator 的参数是 Action 的内容。</p>\n<p>（3）在返回的函数之中，先发出一个 Action（requestPosts(postTitle)），表示操作开始。</p>\n<p>（4）异步操作结束之后，再发出一个 Action（receivePosts(postTitle, json)），表示操作结束。</p>\n<p>这样的处理，就解决了自动发送第二个 Action 的问题。但是，又带来了一个新的问题，Action 是由store.dispatch方法发送的。而store.dispatch方法正常情况下，参数只能是对象，不能是函数。<br>所以就需要使用中间件（redux-thunk），改造store.dispatch，使得后者可以接受函数作为参数。</p>\n<p>因此，异步操作的第一种解决方案就是，写出一个返回函数的 Action Creator，然后使用redux-thunk中间件改造store.dispatch</p>\n<p>既然 Action Creator 可以返回函数，当然也可以返回其他值。另一种异步操作的解决方案，就是让 Action Creator 返回一个 Promise 对象。</p>\n<p>这就需要使用redux-promise中间件。</p>\n<h3 id=\"react-redux\"><a href=\"#react-redux\" class=\"headerlink\" title=\"react-redux\"></a>react-redux</h3><p>React-Redux 将所有组件分成两大类：UI 组件（presentational component）和容器组件（container component）。</p>\n<p>UI 组件有以下几个特征。<br>只负责 UI 的呈现，不带有任何业务逻辑<br>没有状态（即不使用this.state这个变量）<br>所有数据都由参数（this.props）提供<br>不使用任何 Redux 的 API</p>\n<p>容器组件的特征恰恰相反。<br>负责管理数据和业务逻辑，不负责 UI 的呈现<br>带有内部状态<br>使用 Redux 的 API</p>\n<pre><code>`\n    import { connect } from &apos;react-redux&apos;\n    const VisibleTodoList = connect(\n          mapStateToProps,\n          mapDispatchToProps\n    )(TodoList)`\n</code></pre><p>mapStateToProps是一个函数。它的作用就是像它的名字那样，建立一个从（外部的）state对象到（UI 组件的）props对象的映射关系。<br>        `</p>\n<pre><code>const mapStateToProps = (state) =&gt; {\n      return {\n        todos: getVisibleTodos(state.todos, state.visibilityFilter)\n      }\n}`\n</code></pre><p>mapStateToProps会订阅 Store，每当state更新的时候，就会自动执行，重新计算 UI 组件的参数，从而触发 UI 组件的重新渲染。</p>\n<p>mapStateToProps的第一个参数总是state对象，还可以使用第二个参数，代表容器组件的props对象。</p>\n<p>mapDispatchToProps是connect函数的第二个参数，用来建立 UI 组件的参数到store.dispatch方法的映射。也就是说，它定义了哪些用户的操作应该当作 Action，传给 Store。它可以是一个函数，也可以是一个对象。</p>\n<p>如果mapDispatchToProps是一个函数，会得到dispatch和ownProps（容器组件的props对象）两个参数。<br>    `</p>\n<pre><code>const mapDispatchToProps = (\n      dispatch,\n      ownProps\n) =&gt; {\n      return {\n        onClick: () =&gt; {\n              dispatch({\n                type: &apos;SET_VISIBILITY_FILTER&apos;,\n                filter: ownProps.filter\n              });\n        }\n      };\n}`\n</code></pre><p>React-Redux 提供Provider组件，可以让容器组件拿到state。</p>\n<pre><code>`\n    import { Provider } from &apos;react-redux&apos;\n    import { createStore } from &apos;redux&apos;\n    import todoApp from &apos;./reducers&apos;\n    import App from &apos;./components/App&apos;\n\n    let store = createStore(todoApp);\n\n    render(\n          &lt;Provider store={store}&gt;\n            &lt;App /&gt;\n          &lt;/Provider&gt;,\n      document.getElementById(&apos;root&apos;)\n    )`\n</code></pre><p>上面代码中，Provider在根组件外面包了一层，这样一来，App的所有子组件就默认都可以拿到state了。</p>\n<p>它的原理是React组件的context属性，请看源码。<br>    `</p>\n<pre><code>class Provider extends Component {\n  getChildContext() {\n    return {\n          store: this.props.store\n    };\n  }\n  render() {\n    return this.props.children;\n  }\n}\n\nProvider.childContextTypes = {\n      store: React.PropTypes.object\n}`\n</code></pre><h2 id=\"redux-saga\"><a href=\"#redux-saga\" class=\"headerlink\" title=\"redux-saga\"></a>redux-saga</h2><p>redux-saga的实质是类似redux-thunk的中间件，作用是为redux提供额外的功能<br>其次，我们都知道，在 reducers 中的所有操作都是同步的并且是纯粹的，即 reducer 都是纯函数，纯函数是指一个函数的返回结果只依赖于它的参数，并且在执行过程中不会对外部产生副作用，即给它传什么，就吐出什么。但是在实际的应用开发中，我们希望做一些异步的（如Ajax请求）且不纯粹的操作（如改变外部的状态），这些在函数式编程范式中被称为“副作用”。</p>\n<p>Redux 的作者将这些副作用的处理通过提供中间件的方式让开发者自行选择进行实现。</p>\n<p>redux-thunk 和 redux-saga 是 redux 应用中最常用的两种异步流处理方式。</p>\n<h3 id=\"redux-thunk\"><a href=\"#redux-thunk\" class=\"headerlink\" title=\"redux-thunk\"></a>redux-thunk</h3><p>redux-thunk 的任务执行方式是从 UI 组件直接触发任务。redux-thunk 的主要思想是扩展 action，使得 action 从一个对象变成一个函数。<br>    `</p>\n<pre><code>// fetchUrl 返回一个 thunk\nfunction fetchUrl(url) {\n      return (dispatch) =&gt; {\n        dispatch({\n              type: &apos;FETCH_REQUEST&apos;\n        });\n\n    fetch(url).then(data =&gt; dispatch({\n          type: &apos;FETCH_SUCCESS&apos;,\n          data\n    }));\n      }\n}\n\n// 如果 thunk 中间件正在运行的话，我们可以 dispatch 上述函数如下：\ndispatch(\n      fetchUrl(url)\n):\n</code></pre><p>`<br>redux-thunk 的缺点：<br>（1）action 虽然扩展了，但因此变得复杂，后期可维护性降低；<br>（2）thunks 内部测试逻辑比较困难，需要mock所有的触发函数；<br>（3）协调并发任务比较困难，当自己的 action 调用了别人的 action，别人的 action 发生改动，则需要自己主动修改；<br>（4）业务逻辑会散布在不同的地方：启动的模块，组件以及thunks内部。</p>\n<h3 id=\"redux-saga-1\"><a href=\"#redux-saga-1\" class=\"headerlink\" title=\"redux-saga\"></a>redux-saga</h3><p>sages 采用 Generator 函数来 yield Effects（包含指令的文本对象）。Generator 函数的作用是可以暂停执行，再次执行的时候从上次暂停的地方继续执行。Effect 是一个简单的对象，该对象包含了一些给 middleware 解释执行的信息。你可以通过使用 effects API 如 fork，call，take，put，cancel 等来创建 Effect。<br>与 redux-thunk 不同的是，在 redux-saga 中，UI 组件自身从来不会触发任务，它们总是会 dispatch 一个 action 来通知在 UI 中哪些地方发生了改变，而不需要对 action 进行修改。redux-saga 将异步任务进行了集中处理，且方便测试。<br>所有的东西都必须被封装在 sagas 中。sagas 包含3个部分，用于联合执行任务：<br>1、worker saga<br>做所有的工作，如调用 API，进行异步请求，并且获得返回结果<br>2、watcher saga<br>监听被 dispatch 的 actions，当接收到 action 或者知道其被触发时，调用 worker saga 执行任务<br>3、root saga<br>立即启动 sagas 的唯一入口<br>具体使用姿势：<br>    `</p>\n<pre><code>class UserComponent extends React.Component {\n  ...\n      onSomeButtonClicked() {\n        const { userId, dispatch } = this.props\n        dispatch({type: &apos;USER_FETCH_REQUESTED&apos;, payload: {userId}})\n      }\n  ...\n}\n//sagas.js\n\nimport { call, put, takeEvery, takeLatest } from &apos;redux-saga/effects&apos;\nimport Api from &apos;...&apos;\n\n// worker Saga: will be fired on USER_FETCH_REQUESTED actions\nfunction* fetchUser(action) {\n       try {\n          const user = yield call(Api.fetchUser, action.payload.userId);\n          yield put({type: &quot;USER_FETCH_SUCCEEDED&quot;, user: user});\n       } catch (e) {\n          yield put({type: &quot;USER_FETCH_FAILED&quot;, message: e.message});\n       }\n}\n\n/*\n  Starts fetchUser on each dispatched `USER_FETCH_REQUESTED` action.\n  Allows concurrent fetches of user.\n*/\nfunction* mySaga() {\n      yield takeEvery(&quot;USER_FETCH_REQUESTED&quot;, fetchUser);\n}\n\n/*\n  Alternatively you may use takeLatest.\n  Does not allow concurrent fetches of user. If &quot;USER_FETCH_REQUESTED&quot; gets\n  dispatched while a fetch is already pending, that pending fetch is cancelled\n  and only the latest one will be run.\n*/\nfunction* mySaga() {\n      yield takeLatest(&quot;USER_FETCH_REQUESTED&quot;, fetchUser);\n}\n\nexport default mySaga;\n//main.js\nimport { createStore, applyMiddleware } from &apos;redux&apos;\nimport createSagaMiddleware from &apos;redux-saga&apos;\n\nimport reducer from &apos;./reducers&apos;\nimport mySaga from &apos;./sagas&apos;\n\n// create the saga middleware\nconst sagaMiddleware = createSagaMiddleware()\n// mount it on the Store\nconst store = createStore(\n      reducer,\n      applyMiddleware(sagaMiddleware)\n)\n\n// then run the saga\nsagaMiddleware.run(mySaga)\n\n// render the application\n`\n</code></pre><p>最后，总结一下 redux-saga 的优点：</p>\n<p>（1）声明式 Effects：所有的操作以JavaScript对象的方式被 yield，并被 middleware 执行。使得在 saga 内部测试变得更加容易，可以通过简单地遍历 Generator 并在 yield 后的成功值上面做一个 deepEqual 测试。<br>（2）高级的异步控制流以及并发管理：保持 action 的简单纯粹，aciton 不再像原来那样五花八门，让人眼花缭乱。task 的模式使代码更加清晰。可以使用简单的同步方式描述异步流，并通过 fork 实现并发任务。<br>（3）架构上的优势：将所有的异步流程控制都移入到了 sagas，UI 组件不用执行业务逻辑，只需 dispatch action 就行，增强组件复用性。扩展性强。</p>\n<h2 id=\"dva\"><a href=\"#dva\" class=\"headerlink\" title=\"dva\"></a>dva</h2><p>先考虑一下redux-saga的缺点<br>1、编辑成本高，需要在 reducer, saga, action 之间来回切换<br>2、不便于组织业务模型 (或者叫 domain model) 。比如我们写了一个 userlist 之后，要写一个        productlist，需要复制很多文件。<br>还有一些其他的：<br>saga 书写太复杂，每监听一个 action 都需要走 fork -&gt; watcher -&gt; worker 的流程<br>entry 书写麻烦<br>…<br>而 dva 正是用于解决这些问题。<br>他最核心的是提供了 app.model 方法，用于把 reducer, initialState, action, saga 封装到一起，比如：<br>    `</p>\n<pre><code>app.model({\n      namespace: &apos;products&apos;,\n          state: {\n            list: [],\n            loading: false,\n          },\n      subscriptions: [\n        function(dispatch) {\n              dispatch({type: &apos;products/query&apos;});\n        },\n      ],\n      effects: {\n        [&apos;products/query&apos;]: function*() {\n              yield call(delay(800));\n              yield put({\n                type: &apos;products/query/success&apos;,\n                payload: [&apos;ant-tool&apos;, &apos;roof&apos;],\n              });\n        },\n      },\n      reducers: {\n        [&apos;products/query&apos;](state) {\n              return { ...state, loading: true, };\n        },\n        [&apos;products/query/success&apos;](state, { payload }) {\n              return { ...state, loading: false, list: payload };\n        },\n      },\n});`\n</code></pre><p>在有 dva 之前，我们通常会创建 sagas/products.js, reducers/products.js 和 actions/products.js，然后在这些文件之间来回切换,使用dva以后可以将所有的逻辑操作在model中完成。</p>\n"},{"title":"ajax跨域","date":"2018-04-15T05:05:56.000Z","_content":"# 什么是跨域 #\n前台在调用后台服务接口的时候，接口不是同一个域的时候，请求就会失败。\n# 产生跨域的原因 #\n1、浏览器限制\n2、域名不同\n3、请求类型是xhr\n# 解决思路\n## 解除浏览器限制\n通过指定参数让浏览器不去校验，但是价值不大，因为这种需要对每个客户端进行处理\n## 修改请求类型，保证发出的不是xhr\n典型解决办法：jsonp；jsonp有很多弊端，所以现在使用较少\njsonp：通过插入script标签，请求获取回来一段js代码，最后执行回调函数来得到返回值\njsonp的缺点：1、服务器需要改动代码支持\n\n2、只支持get请求，无法满足需求；\n3、发送的不是xhr请求，xhr有很多新的特性，异步、各种事件。\n## 域名不同\n解决办法，支持跨域：被调用方调整，通过后端处理满足跨域需求，这样就可以实现支持跨域；调用方修改，通过代理的方式，实现隐藏跨域的效果。\n这是最理想的解决方案\n最常见javaee架构\n![屏幕快照 2018-04-15 下午1.34.59.png](http://lxlimg.gz.bcebos.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-04-15%20%E4%B8%8B%E5%8D%881.34.59.png)\n\n调用方解决跨域：请求从http服务器发出；原理是是从中间的http服务器转发过去的请求。\n反向代理：访问同一域名两个url，最后会去到两个不同的服务器\n\n\n\n被调用方解决跨域：请求从客户端发出，在被调用方那边进行设置，允许接口被调用。\n原理是基于http协议关于跨域的一些规定，在响应头上加上一些字段（http服务器或者应用服务器中增加），告诉浏览器允许跨域\n具体实现方式：1、服务器端实现\n跨域请求头会多一个origin当前域的字段\naccess-control-allow-origin \naccess-control-allow-methods \naccess-control-allow-contentType\n### 简单请求和非简单请求\n是不是所有请求都是先请求后判断呢？\n如果是简单请求，是先请求后判断\n如果是非简单请求，会先发一个预检命令，通过后才会发出请求\n简单请求：方法为get、head、post；请求头里无自定义头，content-type为以下几种\ntext/plain；multipart/form-data；application/x-www-form-urlencoded；\n\n非简单请求：put、delete，发送json格式的ajax请求，带自定义头的ajax请求\n由于预检命令导致跨域的非简单请求，每次会发出两条请求，解决办法，\n预检命令的缓存：加响应头，access-control-max-age 参数是一个数字秒数，告诉浏览器在这个时间内可以缓存预检命令\n\n### 带cookie的跨域\naccess-control-allow-origin：*能否满足所有的跨域呢？\n不能满足带cookie的跨域请求，必须设置为cookie对应的域名\n且需要加access-control-allow-credentials：true\n那如何设置多个带cookie的跨域呢？\n办法：后台动态获取请求头中的origin，然后传入access-control-allow-origin字段\n\n### 带自定义头的跨域\n需要在响应头中设置对应access-control-allow-Headers\n\n\n2、nginx配置\n被调用方nginx的设置，让请求先发送到http服务器，再转至应用服务器\n\n3、apache配置\n同nginx\n4、spring框架的解决方案\n配置crossoigin\n\n\n\n两者都可能是对http服务器进行设置，但思路是不一样的\n第一种是修改调用方的http服务器，第二种是修改被调用方的http服务器。\n\n\n\n\n\n\n","source":"_posts/js-kuayu.md","raw":"---\ntitle: ajax跨域\ndate: 2018-04-15 13:05:56\ntags:\n---\n# 什么是跨域 #\n前台在调用后台服务接口的时候，接口不是同一个域的时候，请求就会失败。\n# 产生跨域的原因 #\n1、浏览器限制\n2、域名不同\n3、请求类型是xhr\n# 解决思路\n## 解除浏览器限制\n通过指定参数让浏览器不去校验，但是价值不大，因为这种需要对每个客户端进行处理\n## 修改请求类型，保证发出的不是xhr\n典型解决办法：jsonp；jsonp有很多弊端，所以现在使用较少\njsonp：通过插入script标签，请求获取回来一段js代码，最后执行回调函数来得到返回值\njsonp的缺点：1、服务器需要改动代码支持\n\n2、只支持get请求，无法满足需求；\n3、发送的不是xhr请求，xhr有很多新的特性，异步、各种事件。\n## 域名不同\n解决办法，支持跨域：被调用方调整，通过后端处理满足跨域需求，这样就可以实现支持跨域；调用方修改，通过代理的方式，实现隐藏跨域的效果。\n这是最理想的解决方案\n最常见javaee架构\n![屏幕快照 2018-04-15 下午1.34.59.png](http://lxlimg.gz.bcebos.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-04-15%20%E4%B8%8B%E5%8D%881.34.59.png)\n\n调用方解决跨域：请求从http服务器发出；原理是是从中间的http服务器转发过去的请求。\n反向代理：访问同一域名两个url，最后会去到两个不同的服务器\n\n\n\n被调用方解决跨域：请求从客户端发出，在被调用方那边进行设置，允许接口被调用。\n原理是基于http协议关于跨域的一些规定，在响应头上加上一些字段（http服务器或者应用服务器中增加），告诉浏览器允许跨域\n具体实现方式：1、服务器端实现\n跨域请求头会多一个origin当前域的字段\naccess-control-allow-origin \naccess-control-allow-methods \naccess-control-allow-contentType\n### 简单请求和非简单请求\n是不是所有请求都是先请求后判断呢？\n如果是简单请求，是先请求后判断\n如果是非简单请求，会先发一个预检命令，通过后才会发出请求\n简单请求：方法为get、head、post；请求头里无自定义头，content-type为以下几种\ntext/plain；multipart/form-data；application/x-www-form-urlencoded；\n\n非简单请求：put、delete，发送json格式的ajax请求，带自定义头的ajax请求\n由于预检命令导致跨域的非简单请求，每次会发出两条请求，解决办法，\n预检命令的缓存：加响应头，access-control-max-age 参数是一个数字秒数，告诉浏览器在这个时间内可以缓存预检命令\n\n### 带cookie的跨域\naccess-control-allow-origin：*能否满足所有的跨域呢？\n不能满足带cookie的跨域请求，必须设置为cookie对应的域名\n且需要加access-control-allow-credentials：true\n那如何设置多个带cookie的跨域呢？\n办法：后台动态获取请求头中的origin，然后传入access-control-allow-origin字段\n\n### 带自定义头的跨域\n需要在响应头中设置对应access-control-allow-Headers\n\n\n2、nginx配置\n被调用方nginx的设置，让请求先发送到http服务器，再转至应用服务器\n\n3、apache配置\n同nginx\n4、spring框架的解决方案\n配置crossoigin\n\n\n\n两者都可能是对http服务器进行设置，但思路是不一样的\n第一种是修改调用方的http服务器，第二种是修改被调用方的http服务器。\n\n\n\n\n\n\n","slug":"js-kuayu","published":1,"updated":"2018-04-18T08:08:06.049Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgevausc0004e0vw1opfwejv","content":"<h1 id=\"什么是跨域\"><a href=\"#什么是跨域\" class=\"headerlink\" title=\"什么是跨域\"></a>什么是跨域</h1><p>前台在调用后台服务接口的时候，接口不是同一个域的时候，请求就会失败。</p>\n<h1 id=\"产生跨域的原因\"><a href=\"#产生跨域的原因\" class=\"headerlink\" title=\"产生跨域的原因\"></a>产生跨域的原因</h1><p>1、浏览器限制<br>2、域名不同<br>3、请求类型是xhr</p>\n<h1 id=\"解决思路\"><a href=\"#解决思路\" class=\"headerlink\" title=\"解决思路\"></a>解决思路</h1><h2 id=\"解除浏览器限制\"><a href=\"#解除浏览器限制\" class=\"headerlink\" title=\"解除浏览器限制\"></a>解除浏览器限制</h2><p>通过指定参数让浏览器不去校验，但是价值不大，因为这种需要对每个客户端进行处理</p>\n<h2 id=\"修改请求类型，保证发出的不是xhr\"><a href=\"#修改请求类型，保证发出的不是xhr\" class=\"headerlink\" title=\"修改请求类型，保证发出的不是xhr\"></a>修改请求类型，保证发出的不是xhr</h2><p>典型解决办法：jsonp；jsonp有很多弊端，所以现在使用较少<br>jsonp：通过插入script标签，请求获取回来一段js代码，最后执行回调函数来得到返回值<br>jsonp的缺点：1、服务器需要改动代码支持</p>\n<p>2、只支持get请求，无法满足需求；<br>3、发送的不是xhr请求，xhr有很多新的特性，异步、各种事件。</p>\n<h2 id=\"域名不同\"><a href=\"#域名不同\" class=\"headerlink\" title=\"域名不同\"></a>域名不同</h2><p>解决办法，支持跨域：被调用方调整，通过后端处理满足跨域需求，这样就可以实现支持跨域；调用方修改，通过代理的方式，实现隐藏跨域的效果。<br>这是最理想的解决方案<br>最常见javaee架构<br><img src=\"http://lxlimg.gz.bcebos.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-04-15%20%E4%B8%8B%E5%8D%881.34.59.png\" alt=\"屏幕快照 2018-04-15 下午1.34.59.png\"></p>\n<p>调用方解决跨域：请求从http服务器发出；原理是是从中间的http服务器转发过去的请求。<br>反向代理：访问同一域名两个url，最后会去到两个不同的服务器</p>\n<p>被调用方解决跨域：请求从客户端发出，在被调用方那边进行设置，允许接口被调用。<br>原理是基于http协议关于跨域的一些规定，在响应头上加上一些字段（http服务器或者应用服务器中增加），告诉浏览器允许跨域<br>具体实现方式：1、服务器端实现<br>跨域请求头会多一个origin当前域的字段<br>access-control-allow-origin<br>access-control-allow-methods<br>access-control-allow-contentType</p>\n<h3 id=\"简单请求和非简单请求\"><a href=\"#简单请求和非简单请求\" class=\"headerlink\" title=\"简单请求和非简单请求\"></a>简单请求和非简单请求</h3><p>是不是所有请求都是先请求后判断呢？<br>如果是简单请求，是先请求后判断<br>如果是非简单请求，会先发一个预检命令，通过后才会发出请求<br>简单请求：方法为get、head、post；请求头里无自定义头，content-type为以下几种<br>text/plain；multipart/form-data；application/x-www-form-urlencoded；</p>\n<p>非简单请求：put、delete，发送json格式的ajax请求，带自定义头的ajax请求<br>由于预检命令导致跨域的非简单请求，每次会发出两条请求，解决办法，<br>预检命令的缓存：加响应头，access-control-max-age 参数是一个数字秒数，告诉浏览器在这个时间内可以缓存预检命令</p>\n<h3 id=\"带cookie的跨域\"><a href=\"#带cookie的跨域\" class=\"headerlink\" title=\"带cookie的跨域\"></a>带cookie的跨域</h3><p>access-control-allow-origin：*能否满足所有的跨域呢？<br>不能满足带cookie的跨域请求，必须设置为cookie对应的域名<br>且需要加access-control-allow-credentials：true<br>那如何设置多个带cookie的跨域呢？<br>办法：后台动态获取请求头中的origin，然后传入access-control-allow-origin字段</p>\n<h3 id=\"带自定义头的跨域\"><a href=\"#带自定义头的跨域\" class=\"headerlink\" title=\"带自定义头的跨域\"></a>带自定义头的跨域</h3><p>需要在响应头中设置对应access-control-allow-Headers</p>\n<p>2、nginx配置<br>被调用方nginx的设置，让请求先发送到http服务器，再转至应用服务器</p>\n<p>3、apache配置<br>同nginx<br>4、spring框架的解决方案<br>配置crossoigin</p>\n<p>两者都可能是对http服务器进行设置，但思路是不一样的<br>第一种是修改调用方的http服务器，第二种是修改被调用方的http服务器。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"什么是跨域\"><a href=\"#什么是跨域\" class=\"headerlink\" title=\"什么是跨域\"></a>什么是跨域</h1><p>前台在调用后台服务接口的时候，接口不是同一个域的时候，请求就会失败。</p>\n<h1 id=\"产生跨域的原因\"><a href=\"#产生跨域的原因\" class=\"headerlink\" title=\"产生跨域的原因\"></a>产生跨域的原因</h1><p>1、浏览器限制<br>2、域名不同<br>3、请求类型是xhr</p>\n<h1 id=\"解决思路\"><a href=\"#解决思路\" class=\"headerlink\" title=\"解决思路\"></a>解决思路</h1><h2 id=\"解除浏览器限制\"><a href=\"#解除浏览器限制\" class=\"headerlink\" title=\"解除浏览器限制\"></a>解除浏览器限制</h2><p>通过指定参数让浏览器不去校验，但是价值不大，因为这种需要对每个客户端进行处理</p>\n<h2 id=\"修改请求类型，保证发出的不是xhr\"><a href=\"#修改请求类型，保证发出的不是xhr\" class=\"headerlink\" title=\"修改请求类型，保证发出的不是xhr\"></a>修改请求类型，保证发出的不是xhr</h2><p>典型解决办法：jsonp；jsonp有很多弊端，所以现在使用较少<br>jsonp：通过插入script标签，请求获取回来一段js代码，最后执行回调函数来得到返回值<br>jsonp的缺点：1、服务器需要改动代码支持</p>\n<p>2、只支持get请求，无法满足需求；<br>3、发送的不是xhr请求，xhr有很多新的特性，异步、各种事件。</p>\n<h2 id=\"域名不同\"><a href=\"#域名不同\" class=\"headerlink\" title=\"域名不同\"></a>域名不同</h2><p>解决办法，支持跨域：被调用方调整，通过后端处理满足跨域需求，这样就可以实现支持跨域；调用方修改，通过代理的方式，实现隐藏跨域的效果。<br>这是最理想的解决方案<br>最常见javaee架构<br><img src=\"http://lxlimg.gz.bcebos.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-04-15%20%E4%B8%8B%E5%8D%881.34.59.png\" alt=\"屏幕快照 2018-04-15 下午1.34.59.png\"></p>\n<p>调用方解决跨域：请求从http服务器发出；原理是是从中间的http服务器转发过去的请求。<br>反向代理：访问同一域名两个url，最后会去到两个不同的服务器</p>\n<p>被调用方解决跨域：请求从客户端发出，在被调用方那边进行设置，允许接口被调用。<br>原理是基于http协议关于跨域的一些规定，在响应头上加上一些字段（http服务器或者应用服务器中增加），告诉浏览器允许跨域<br>具体实现方式：1、服务器端实现<br>跨域请求头会多一个origin当前域的字段<br>access-control-allow-origin<br>access-control-allow-methods<br>access-control-allow-contentType</p>\n<h3 id=\"简单请求和非简单请求\"><a href=\"#简单请求和非简单请求\" class=\"headerlink\" title=\"简单请求和非简单请求\"></a>简单请求和非简单请求</h3><p>是不是所有请求都是先请求后判断呢？<br>如果是简单请求，是先请求后判断<br>如果是非简单请求，会先发一个预检命令，通过后才会发出请求<br>简单请求：方法为get、head、post；请求头里无自定义头，content-type为以下几种<br>text/plain；multipart/form-data；application/x-www-form-urlencoded；</p>\n<p>非简单请求：put、delete，发送json格式的ajax请求，带自定义头的ajax请求<br>由于预检命令导致跨域的非简单请求，每次会发出两条请求，解决办法，<br>预检命令的缓存：加响应头，access-control-max-age 参数是一个数字秒数，告诉浏览器在这个时间内可以缓存预检命令</p>\n<h3 id=\"带cookie的跨域\"><a href=\"#带cookie的跨域\" class=\"headerlink\" title=\"带cookie的跨域\"></a>带cookie的跨域</h3><p>access-control-allow-origin：*能否满足所有的跨域呢？<br>不能满足带cookie的跨域请求，必须设置为cookie对应的域名<br>且需要加access-control-allow-credentials：true<br>那如何设置多个带cookie的跨域呢？<br>办法：后台动态获取请求头中的origin，然后传入access-control-allow-origin字段</p>\n<h3 id=\"带自定义头的跨域\"><a href=\"#带自定义头的跨域\" class=\"headerlink\" title=\"带自定义头的跨域\"></a>带自定义头的跨域</h3><p>需要在响应头中设置对应access-control-allow-Headers</p>\n<p>2、nginx配置<br>被调用方nginx的设置，让请求先发送到http服务器，再转至应用服务器</p>\n<p>3、apache配置<br>同nginx<br>4、spring框架的解决方案<br>配置crossoigin</p>\n<p>两者都可能是对http服务器进行设置，但思路是不一样的<br>第一种是修改调用方的http服务器，第二种是修改被调用方的http服务器。</p>\n"},{"title":"使用reta开发简单的后台管理页面","date":"2018-04-24T03:02:33.000Z","_content":"## reta使用\n### 功能模块开发流程总结\n#### 以服务列表页面开发为例\n1、分析布局\n确定BasicLayout布局\n2、定义router组件\n现在routes文件夹中定义空组件Demo备用\n    `\n\n\timport React, { Component } from 'react'\n\tclass Demo extends Component {\n  \t\tconstructor(props) {\n    \t\tsuper(props);\n  \t\t}\n\n  \t\tcomponentWillMount() {\n\n  \t\t}\n  \t\trender() {\n    \t\treturn (\n      \t\t\t<div>\n       \t\t\tdemo页面\n      \t\t\t</div>\n    \t\t)\n  \t\t}\n\t}\n\n\texport default Demo`\n\n在nav.js中添加页面路由配置\n    `\n\n\t{\n        name: '测试页面',\n        path: 'demo',\n        component: dynamicWrapper(app, [], () => import('../routes/ServicesList')),\n      }`\n\n在headerMenu中添加菜单项\n    `\n\n\t\t{\n    \t\ttext: '测试页面',\n    \t\tpath: '/demo',\n    \t\tuseLink: true,\n    \t\treplace: false,\n  \t\t},\n`\n3、定义model组件\n在models定义demo.js备用，并在nav中demo组件中绑定['demo']\n    `\n\n\texport default {\n  \t\tnamespace: 'demo',\n\n  \t\tstate: {\n\n  \t\t},\n\n  \t\teffects: {\n\n  \t\t},\n\n  \t\treducers: {\n\n  \t\t},\n\n  \t\tsubscriptions: {\n\n  \t\t},\n\t}`\n\n完成上面3步后，我们页面里面已经有空白的测试页面了\n![](http://lxlimg.gz.bcebos.com/list01.png)\n\n\n4、开始页面开发\n\n1）分析页面\n![](http://lxlimg.gz.bcebos.com/list.png)\n服务列表页面可划分为四部分，\n1：面包屑，已在layout中实现，不需要考虑；\n2：searchpanel\n3：左边siderbar\n4: 右边table\n注：对于实际项目，类似功能已抽离为组件形式，这里我还是不引用现成组件，从零开始开发，首先完成静态页面的搭建。\n\n第一部分searchpanel\n不解释直接上代码\n\n    `render() {\n  \t \tconst ctrlStyle = {\n        \ttextAlign: 'right'\n      \t};\n    \treturn (\n       \t<Form\n       \t\tclassName={classNames(Styles.searchPanel)}\n      \t>\n        \t<Row gutter={24}>\n           \t\t<Col span={8}>\n          \t\t\t<Form.Item\n          \t\t\t\twrapperCol={{span:18}}\n          \t\t\t>\n           \t\t\t\t<Input placeholder={\"请输入服务名称搜索\"}/>\n          \t\t\t</Form.Item>\n        \t\t</Col>\n        \t\t<Col span={16} style={ctrlStyle}>\n\t\t\t\t\t <Form.Item\n\t\t\t\t\t >\n                \t\t<Button key='primary' type='primary' >搜索</Button>\n                \t\t<Button key='reset' style={{ marginLeft: 8 }}>重置</Button>\n           \t\t\t</Form.Item>\n        \t\t</Col>\n        \t</Row>\n      \t</Form>\n    \t)\n  \t}`\n\n第二部分sider\n\n    `//\n\t\t<Row gutter={24} style={{ margin: 0 }}>\n          <Col span={4} key='child' style={{ paddingLeft: 0 }}>\n\t\t\t\t\t\t <Menu\n        \t\t\tmode=\"inline\"\n        \t\t\tdefaultSelectedKeys={[ '-1' ]}\n        \t\t\tclassName={Styles.menu}\n      \t\t\t>\n        \t\t\t{\n          \t\t\tmenuData.subfiles === undefined ? null :\n          \t\t\tmenuData.subfiles.map(item => this.fileItem(item))\n        \t\t\t}\n        \t\t{\n          \t\t\tmenuData.subfolders === undefined ? null:\n          \t\t\tmenuData.subfolders.map(item => this.menuItem(item))\n        \t\t\t}\n      \t\t\t</Menu>\n          </Col>\n          <Col span={20} key='table' style={{ paddingRight: 0 }}>table</Col>\n        </Row>`\n\n\n\n    `fileItem(item) {\n    \treturn (\n      \t\t<Menu.Item key={item.id}>{item.name}</Menu.Item>\n    \t)\n  \t}\n  \tmenuItem (item) {\n    \tif (this.isSubfiles) {\n      \t\tif (item.subfolders && item.subfolders.length) {\n        \t\treturn (\n          \t\t\t<SubMenu key={item.path} title={<span><span>{item.name}</span></span>}>\n            \t\t{\n              \t\t\titem.subfiles.map(v => this.fileItem(v))\n            \t\t}\n            \t\t{\n              \t\t\titem.subfolders.map(v => this.menuItem(v))\n            \t\t}\n         \t\t\t </SubMenu>\n        \t\t)\n      \t\t} else if (item.subfiles && item.subfiles.length){\n        \t\treturn (\n          \t\t\t<SubMenu key={item.path} title={<span><span>{item.name}</span></span>}>\n            \t\t{\n              \t\t\titem.subfiles.map(v => this.fileItem(v))\n            \t\t}\n          \t\t\t</SubMenu>\n        \t\t)\n      \t\t} else {\n        \t\treturn <Menu.Item key={item.path} disabled>{item.name}</Menu.Item>\n      \t\t}\n    \t\t} else {\n      \t\tif (item.subfolders && item.subfolders.length) {\n        \t\treturn (\n          \t\t\t<SubMenu onTitleClick={this.props.onClick} key={item.path} title={<span><span>{item.name}</span></span>}>\n            \t\t{\n              \t\titem.subfolders.length === 0 ? null :\n              \t\titem.subfolders.map(v => this.menuItem(v))\n            \t\t}\n          \t\t\t</SubMenu>\n       \t\t )\n      \t} else {\n        \treturn <Menu.Item key={item.path}>{item.name}</Menu.Item>\n      \t}\n    \t}\n  \t}`\n\n\n    `//模拟数据\n\n\t const menuData = {\n\n      \t\t\"path\":\"/5\",\n      \t\t\"name\":\"api\",\n      \t\t\"subfolders\":[\n      \t\t\t{ name: '所有服务', path: '-1'},\n     \t\t\t{\"path\":\"/5/1064\",\n     \t\t\t \t\"name\":\"交通出行\",\n      \t\t\t \t\"code\":\"traffic\",\n      \t\t\t\t\"description\":\"绿色出行 低碳生活1\",\n      \t\t\t\t\"subfolders\":[]\n    \t\t\t},\n    \t\t\t{\"path\":\"/5/1006\",\n    \t\t\t\t\"name\":\"金融理财\",\n    \t\t\t\t\"code\":\"jinrong\",\n    \t\t\t\t\"description\":\"金融\",\n    \t\t\t\t\"subfolders\":[\n    \t\t\t\t\t{\"path\":\"/5/1006/1023\",\n    \t\t\t\t\t\t\"name\":\"农业市场\",\n    \t\t\t\t\t\t\"code\":\"farmmarket\",\n    \t\t\t\t\t\t\"description\":\"\",\n    \t\t\t\t\t\t\"subfolders\":[\n    \t\t\t\t\t\t{\"path\":\"/5/1006/1023/1024\",\n    \t\t\t\t\t\t\t\"name\":\"水果经济\",\n    \t\t\t\t\t\t\t\"code\":\"fruitEnco\",\n    \t\t\t\t\t\t\t\"description\":\"\",\n    \t\t\t\t\t\t\t\"subfolders\":[]\n  \t\t\t\t\t\t\t}]\n\t\t\t\t\t\t}\n\t\t\t\t]},\n\t\t\t\t{\"path\":\"/5/1151\",\n\t\t\t\t\t\"name\":\"我在东北玩泥巴\",\n\t\t\t\t\t\"code\":\"niba\",\n\t\t\t\t\t\"description\":\"我在大连没有家\",\n\t\t\t\t\t\"subfolders\":[]},\n\t\t\t\t{\"path\":\"/5/1007\",\n\t\t\t\t\t\"name\":\"便民生活\",\n\t\t\t\t\t\"code\":\"life\",\n\t\t\t\t\t\"description\":\"便民生活的\",\n\t\t\t\t\t\"subfolders\":[]}]\n\t\t\t}`\n\n\n第三部分：table，此处省略了模拟数据的定义\n\t`\n\n\t<Col span={20} key='table' style={{ paddingRight: 0 }}>\n\t\t<Table\n            className={Styles.frontTable}\n          \tdataSource={tableData}\n          \tcolumns={this.listColums}\n          \trowKey={record => record.id}\n            span={12}\n              />\n          </Col>`\n\n\n上面三部分主要完成了整个静态页面，看一下页面的效果\n\n![](http://lxlimg.gz.bcebos.com/demo002.png)\n\n接下来就是要分析页面内的逻辑，处理前后端交互的部分\n按照我自己的习惯，一般是先主后次，先易后难。\n涉及交互实际上也包含了搜索、侧边栏展示及选择、表单的展示。\n显然表单是我们页面的最主要的部分，同时单独去处理表单的显示交互是比较简单的，如果去处理搜索功能，它会影响到表单的展示，反而是属于复杂的部分。所以我们先处理表单数据的渲染。\n表单涉及三个交互：1、数据的动态获取；2、分页的获取；3、查看详情\n\n在处理交互之前，先明确reta把所有数据的处理已经放在models中，通过props传递给组件，因此对应的数据需要在models里面定义并讲store与组件关联\n\n\n1、数据的动态获取\n    `\n\n\t//routers/Demo/index.js\n\t componentWillMount() {\n\t\t\tthis.props.dispatch({\n        \t\ttype: `demo/fetchTotalList`,\n      \t\t});\n  \t}\n\tconst { servicesList,dispatch} = this.props;\n\t\t...\n\t<Table\n        className={Styles.frontTable}\n        dataSource={servicesList.list}\n        columns={this.listColums}\n        rowKey={record => record.id}\n        span={12}\n      />\n\t\t...\n\texport default connect(state => ({\n  \t\tservicesList: state.demo.servicesList\n\t}))(Demo);\n\n\t//models/demo.js\n\n\t state: {\n  \t\tservicesList: [],\n  \t},\n\n\teffects: {\n  \t *fetchTotalList({ query }, { call, put }) {\n      \tconst res = yield call(queryTotalList, query);//queryTotalList是一个fetch请求，可以本地写模拟数据\n      \tif (res.status == 'success') {\n        \tyield put({\n          \ttype: 'saveTotalListData',\n          \tpayload: res.data,\n        \t});\n      \t} else {\n        \tyield put({\n          \t\ttype: 'saveTotalListData',\n          \t\tpayload: [],\n        \t});\n      \t}\n    \t},\n  \t},\n\n\treducers: {\n  \t \tsaveTotalListData(state, { payload }) {\n      \t\treturn {\n        \t\t...state,\n        \t\tservicesList: payload,\n      \t\t};\n    \t},\n  \t},`\n\n到此简单的异步请求表单数据并并展示已经完成。\n\n第二步：分页器设置\n    `//routers/Demo/index.js\n\n\t paginationChange = (page, pageSize) => {\n    \tconst query = {\n      \t\toffset: pageSize * (page - 1),\n      \t\tlimit: pageSize,\n    \t};\n     \tthis.props.dispatch({\n        \ttype: `demo/fetchTotalList`,\n        \tquery: {\n             \t...query,\n            \tdirPath: this.state.dirPath,\n            }\n     \t });\n\n  \t};\n\t...\n\n\tconst paginationData = {\n      total: 0,\n      total: servicesList.totalCount,\n      current: servicesList.pageNum,\n      pageSize: servicesList.limit,\n      showSizeChanger: true,\n      showQuickJumper: true,\n      pageSizeOptions: [\"10\", \"20\", \"50\", \"100\"],\n      onChange: this.paginationChange,\n      onShowSizeChange: this.paginationChange,\n      showTotal: (total) => (`共有${total}条记录`),\n    };\n\n\t...\n\t<Table\n        className={Styles.frontTable}\n        dataSource={servicesList.list}\n        columns={this.listColums}\n        pagination={paginationData}\n        rowKey={record => record.id}\n        span={12}\n              />`\n\n到此第二步分页展示完成。\n\n第三步是查看详情实现\n这个很简单，只要在表单的列属性里配置链接即可\n\t`\n\n\t this.listColums = [\n      {\n        title: '服务名称',\n        dataIndex: 'abilityName',\n        className: 'no-right-border',\n        width: '20%',\n      },\n      {\n        title: '部门名称',\n        dataIndex: 'deptName',\n        className: 'no-right-border',\n        width: '20%',\n      },\n      {\n        title: '所属目录',\n        dataIndex: 'dirName',\n        className: 'no-right-border',\n        width: '10%',\n      },\n      {\n        title: '分级',\n        dataIndex: 'clsName',\n        className: 'no-right-border',\n        width: '10%',\n      },\n      {\n        title: '服务简介',\n        dataIndex: 'briefDescription',\n        className: 'no-right-border',\n      },\n      {\n        title: '操作',\n        dataIndex: 'action',\n        width: this.props.match.path.indexOf('/devAccess/applyService') > -1 ? 140 : 100,\n        render: (text, record) => (\n          <span>\n            <Link\n              to={this.renderDetailLink(record.id)}\n            >\n              查看详情\n            </Link>\n          </span>\n        ),\n      }\n    ]\n\t this.renderDetailLink = id => {\n      const path = this.props.match.path;\n      if(path.indexOf('/devAccess/applyService') > -1) {\n        return `/devAccess/applyService/${this.props.match.params.appId}/serviceInfo/${id}`\n      } else if (path.indexOf('/devAccess') > -1) {\n        return `/devAccess/servicesList/serviceInfo/${id}`;\n      } else if (path.indexOf('/pubAccess') > -1) {\n        return `/pubAccess/servicesList/serviceDetails/${id}`\n      } else {\n        return `/servicesList/serviceInfo/${id}`;\n      }\n    }`\n\n上面三步完成了表单涉及的交互（当然还有些细节需要去完善，比如增加loading状态）\n\n接下来去完成左侧菜单栏的动态获取\n\n    `//models中处理数据请求\n\t  namespace: 'demo',\n\n  \t\tstate: {\n  \t\tservicesList: [],\n   \t\tmenuData: {\n      \t\tsubfolders: []\n    \t},\n  \t},\n\n\t*fetchMenuData(_, { call, put }) {\n      const res = yield call(queryMenuData);\n      if (res.status === 'success') {\n        const subFolders = res.data.subfolders || [];\n        res.data.subfolders = [ { name: '所有服务', path: '-1'}, ...subFolders ]\n        yield put({\n          type: 'saveMenuData',\n          payload: res.data,\n        });\n      }\n    },\n\tsaveMenuData(state, { payload }) {\n      return {\n        ...state,\n        menuData: payload,\n      };\n    },\n\t...\n\t//页面渲染前获取数据\n\tcomponentWillMount() {\n\t\t\t this.setState({\n      \t\t\tfetchList: this.props.match.path.indexOf('pubAccess') > -1 ? 'fetchPubList' : 'fetchTotalList',\n    \t\t}, () =>{\n      \t\tthis.props.dispatch({\n        \t\ttype: `demo/${this.state.fetchList}`,\n      \t\t});\n    });\n      this.props.dispatch({\n      \ttype: \"demo/fetchMenuData\",\n    \t});\n  \t}\n\t//处理菜单项的点击事件，获取对应的表单数据，需要注意的是SubMenu也需要绑定click事件\n\t handleClickSider(e) {\n    \tconst { dispatch, currentUser } = this.props;\n    \tthis.setState({\n      \t\tdirPath: e.key\n    \t}, () => {\n      \tconst query = {\n        \tdirPath: this.state.dirPath,\n      \t}\n      \tdispatch({\n        \ttype: `demo/${this.state.fetchList}`,\n        \tquery: e.key === '-1' ? null : query,\n      \t});\n    \t})\n  \t}\n\tconst { servicesList,dispatch,menuData} = this.props;\n\t...\n \tmenuItem (item) {\n   \t if (this.isSubfiles) {\n      \tif (item.subfolders && item.subfolders.length) {\n        \treturn (\n          \t\t<SubMenu key={item.path} title={<span><span>{item.name}</span></span>}>\n            {\n              item.subfiles.map(v => this.fileItem(v))\n            }\n            {\n              item.subfolders.map(v => this.menuItem(v))\n            }\n          </SubMenu>\n        )\n      } else if (item.subfiles && item.subfiles.length){\n        return (\n          <SubMenu key={item.path} title={<span><span>{item.name}</span></span>}>\n            {\n              item.subfiles.map(v => this.fileItem(v))\n            }\n          </SubMenu>\n        )\n      } else {\n        return <Menu.Item key={item.path} disabled>{item.name}</Menu.Item>\n      }\n    } else {\n      if (item.subfolders && item.subfolders.length) {\n        return (\n          <SubMenu onTitleClick={this.handleClickSider.bind(this)} key={item.path} title={<span><span>{item.name}</span></span>}>\n            {\n              item.subfolders.length === 0 ? null :\n              item.subfolders.map(v => this.menuItem(v))\n            }\n          </SubMenu>\n        )\n      } else {\n        return <Menu.Item key={item.path}>{item.name}</Menu.Item>\n      }\n    }\n  \t}\n\t <Menu\n\t\tonClick={this.handleClickSider.bind(this)}\n        mode=\"inline\"\n       \tdefaultSelectedKeys={[ '-1' ]}\n       \tclassName={Styles.menu}\n      \t>\n        {\n          \tmenuData.subfiles === undefined ? null :\n          \tmenuData.subfiles.map(item => this.fileItem(item))\n        }\n        {\n          \tmenuData.subfolders === undefined ? null:\n          \tmenuData.subfolders.map(item => this.menuItem(item))\n        }\n      \t</Menu>`\n\n到此左边菜单栏的交互也完成\n\n最后一步就是搜索栏，这部分需要对ant的form组件熟悉掌握，form.create以及this.props.form自带api的使用\n\n    `class SearchPanel extends Component {\n\t   handleSubmit = (e) => {\n    \te && e.preventDefault && e.preventDefault();\n \t \tthis.props.form.validateFields((err, values) => {\n      \t\tif (err === null && this.props.fetchDataFunc) {\n        \t\tthis.props.fetchDataFunc(values);\n      \t\t}\n    \t});\n\n  \t\t};\n\t\thandleReset = () => {\n    \t\tthis.props.form.resetFields();\n    \t\tif (this.props.fetchDataFunc) {\n      \t\t\tthis.props.fetchDataFunc();\n    \t\t}\n  \t\t};\n  \trender(){\n  \t \tconst ctrlStyle = {\n        \ttextAlign: 'right'\n      \t};\n      \tconst { getFieldDecorator } = this.props.form;\n       \tconst name=\"name\"\n       \tconst options= [\n        \t{\n          \ttype: 'input',\n          \tname: 'name',\n          \tplaceholder: '请输入服务名称搜索',\n        \t},\n      \t]\n\n  \t\treturn (<Form\n  \t\t\tclassName={classNames(Styles.searchPanel)}\n  \t\t\tonSubmit={this.handleSubmit}\n  \t\t\t>\n  \t\t\t<Row gutter={24}>\n  \t\t\t\t<Col span={8}>\n  \t\t\t\t\t<Form.Item\n  \t\t\t\t\t\twrapperCol={{span:18}}\n  \t\t\t\t\t\tname={name}\n  \t\t\t\t\t>  {\n              \t\tgetFieldDecorator(name, options)(<Input placeholder={\"请输入服务名称搜索\"}/>)\n            \t\t}\n\n  \t\t\t\t\t</Form.Item>\n  \t\t\t\t</Col>\n  \t\t\t\t<Col span={16} style={ctrlStyle}>\n  \t\t\t\t<Form.Item\n  \t\t\t\t>\n  \t\t\t\t<Button key='primary' type='primary' htmlType='submit'>搜索</Button>\n  \t\t\t\t<Button key='reset' style={{ marginLeft: 8 }} onClick={this.handleReset}>重置</Button>\n  \t\t\t\t</Form.Item>\n  \t\t\t\t</Col>\n  \t\t\t</Row>\n  \t\t</Form>)\n  \t\t}\n\t}\n\tSearchPanel = Form.create({})(SearchPanel);\n`\n\n到此我们完成了一个常见的表单展示页面，包含search+sider+table\n\n总结一下过程中的注意的问题点\n1、整体布局需优先考虑好，采用antd的栅格来完成\n2、searchPanel是对From组件的封装，需熟悉掌握Form.create的使用以及this.props.form的api\n3、侧边栏即menu组件的使用\n4、table组件的使用，主要就是dataSource、columns、pagination等属性的定义，别忘了rowKey\n5、所有状态均在models中处理，通过props传入view组件\n\n最后需要说明的是在实际项目中，这种功能模块的页面会有很多，所以通常会把searchPanel和sider分别抽离成一级组件；table+searchPanel+sider抽离为二级组件，通过属性配置来实现不同场景的展示与交互。\n","source":"_posts/reta.md","raw":"---\ntitle: 使用reta开发简单的后台管理页面\ndate: 2018-04-24 11:02:33\ntags:\n---\n## reta使用\n### 功能模块开发流程总结\n#### 以服务列表页面开发为例\n1、分析布局\n确定BasicLayout布局\n2、定义router组件\n现在routes文件夹中定义空组件Demo备用\n    `\n\n\timport React, { Component } from 'react'\n\tclass Demo extends Component {\n  \t\tconstructor(props) {\n    \t\tsuper(props);\n  \t\t}\n\n  \t\tcomponentWillMount() {\n\n  \t\t}\n  \t\trender() {\n    \t\treturn (\n      \t\t\t<div>\n       \t\t\tdemo页面\n      \t\t\t</div>\n    \t\t)\n  \t\t}\n\t}\n\n\texport default Demo`\n\n在nav.js中添加页面路由配置\n    `\n\n\t{\n        name: '测试页面',\n        path: 'demo',\n        component: dynamicWrapper(app, [], () => import('../routes/ServicesList')),\n      }`\n\n在headerMenu中添加菜单项\n    `\n\n\t\t{\n    \t\ttext: '测试页面',\n    \t\tpath: '/demo',\n    \t\tuseLink: true,\n    \t\treplace: false,\n  \t\t},\n`\n3、定义model组件\n在models定义demo.js备用，并在nav中demo组件中绑定['demo']\n    `\n\n\texport default {\n  \t\tnamespace: 'demo',\n\n  \t\tstate: {\n\n  \t\t},\n\n  \t\teffects: {\n\n  \t\t},\n\n  \t\treducers: {\n\n  \t\t},\n\n  \t\tsubscriptions: {\n\n  \t\t},\n\t}`\n\n完成上面3步后，我们页面里面已经有空白的测试页面了\n![](http://lxlimg.gz.bcebos.com/list01.png)\n\n\n4、开始页面开发\n\n1）分析页面\n![](http://lxlimg.gz.bcebos.com/list.png)\n服务列表页面可划分为四部分，\n1：面包屑，已在layout中实现，不需要考虑；\n2：searchpanel\n3：左边siderbar\n4: 右边table\n注：对于实际项目，类似功能已抽离为组件形式，这里我还是不引用现成组件，从零开始开发，首先完成静态页面的搭建。\n\n第一部分searchpanel\n不解释直接上代码\n\n    `render() {\n  \t \tconst ctrlStyle = {\n        \ttextAlign: 'right'\n      \t};\n    \treturn (\n       \t<Form\n       \t\tclassName={classNames(Styles.searchPanel)}\n      \t>\n        \t<Row gutter={24}>\n           \t\t<Col span={8}>\n          \t\t\t<Form.Item\n          \t\t\t\twrapperCol={{span:18}}\n          \t\t\t>\n           \t\t\t\t<Input placeholder={\"请输入服务名称搜索\"}/>\n          \t\t\t</Form.Item>\n        \t\t</Col>\n        \t\t<Col span={16} style={ctrlStyle}>\n\t\t\t\t\t <Form.Item\n\t\t\t\t\t >\n                \t\t<Button key='primary' type='primary' >搜索</Button>\n                \t\t<Button key='reset' style={{ marginLeft: 8 }}>重置</Button>\n           \t\t\t</Form.Item>\n        \t\t</Col>\n        \t</Row>\n      \t</Form>\n    \t)\n  \t}`\n\n第二部分sider\n\n    `//\n\t\t<Row gutter={24} style={{ margin: 0 }}>\n          <Col span={4} key='child' style={{ paddingLeft: 0 }}>\n\t\t\t\t\t\t <Menu\n        \t\t\tmode=\"inline\"\n        \t\t\tdefaultSelectedKeys={[ '-1' ]}\n        \t\t\tclassName={Styles.menu}\n      \t\t\t>\n        \t\t\t{\n          \t\t\tmenuData.subfiles === undefined ? null :\n          \t\t\tmenuData.subfiles.map(item => this.fileItem(item))\n        \t\t\t}\n        \t\t{\n          \t\t\tmenuData.subfolders === undefined ? null:\n          \t\t\tmenuData.subfolders.map(item => this.menuItem(item))\n        \t\t\t}\n      \t\t\t</Menu>\n          </Col>\n          <Col span={20} key='table' style={{ paddingRight: 0 }}>table</Col>\n        </Row>`\n\n\n\n    `fileItem(item) {\n    \treturn (\n      \t\t<Menu.Item key={item.id}>{item.name}</Menu.Item>\n    \t)\n  \t}\n  \tmenuItem (item) {\n    \tif (this.isSubfiles) {\n      \t\tif (item.subfolders && item.subfolders.length) {\n        \t\treturn (\n          \t\t\t<SubMenu key={item.path} title={<span><span>{item.name}</span></span>}>\n            \t\t{\n              \t\t\titem.subfiles.map(v => this.fileItem(v))\n            \t\t}\n            \t\t{\n              \t\t\titem.subfolders.map(v => this.menuItem(v))\n            \t\t}\n         \t\t\t </SubMenu>\n        \t\t)\n      \t\t} else if (item.subfiles && item.subfiles.length){\n        \t\treturn (\n          \t\t\t<SubMenu key={item.path} title={<span><span>{item.name}</span></span>}>\n            \t\t{\n              \t\t\titem.subfiles.map(v => this.fileItem(v))\n            \t\t}\n          \t\t\t</SubMenu>\n        \t\t)\n      \t\t} else {\n        \t\treturn <Menu.Item key={item.path} disabled>{item.name}</Menu.Item>\n      \t\t}\n    \t\t} else {\n      \t\tif (item.subfolders && item.subfolders.length) {\n        \t\treturn (\n          \t\t\t<SubMenu onTitleClick={this.props.onClick} key={item.path} title={<span><span>{item.name}</span></span>}>\n            \t\t{\n              \t\titem.subfolders.length === 0 ? null :\n              \t\titem.subfolders.map(v => this.menuItem(v))\n            \t\t}\n          \t\t\t</SubMenu>\n       \t\t )\n      \t} else {\n        \treturn <Menu.Item key={item.path}>{item.name}</Menu.Item>\n      \t}\n    \t}\n  \t}`\n\n\n    `//模拟数据\n\n\t const menuData = {\n\n      \t\t\"path\":\"/5\",\n      \t\t\"name\":\"api\",\n      \t\t\"subfolders\":[\n      \t\t\t{ name: '所有服务', path: '-1'},\n     \t\t\t{\"path\":\"/5/1064\",\n     \t\t\t \t\"name\":\"交通出行\",\n      \t\t\t \t\"code\":\"traffic\",\n      \t\t\t\t\"description\":\"绿色出行 低碳生活1\",\n      \t\t\t\t\"subfolders\":[]\n    \t\t\t},\n    \t\t\t{\"path\":\"/5/1006\",\n    \t\t\t\t\"name\":\"金融理财\",\n    \t\t\t\t\"code\":\"jinrong\",\n    \t\t\t\t\"description\":\"金融\",\n    \t\t\t\t\"subfolders\":[\n    \t\t\t\t\t{\"path\":\"/5/1006/1023\",\n    \t\t\t\t\t\t\"name\":\"农业市场\",\n    \t\t\t\t\t\t\"code\":\"farmmarket\",\n    \t\t\t\t\t\t\"description\":\"\",\n    \t\t\t\t\t\t\"subfolders\":[\n    \t\t\t\t\t\t{\"path\":\"/5/1006/1023/1024\",\n    \t\t\t\t\t\t\t\"name\":\"水果经济\",\n    \t\t\t\t\t\t\t\"code\":\"fruitEnco\",\n    \t\t\t\t\t\t\t\"description\":\"\",\n    \t\t\t\t\t\t\t\"subfolders\":[]\n  \t\t\t\t\t\t\t}]\n\t\t\t\t\t\t}\n\t\t\t\t]},\n\t\t\t\t{\"path\":\"/5/1151\",\n\t\t\t\t\t\"name\":\"我在东北玩泥巴\",\n\t\t\t\t\t\"code\":\"niba\",\n\t\t\t\t\t\"description\":\"我在大连没有家\",\n\t\t\t\t\t\"subfolders\":[]},\n\t\t\t\t{\"path\":\"/5/1007\",\n\t\t\t\t\t\"name\":\"便民生活\",\n\t\t\t\t\t\"code\":\"life\",\n\t\t\t\t\t\"description\":\"便民生活的\",\n\t\t\t\t\t\"subfolders\":[]}]\n\t\t\t}`\n\n\n第三部分：table，此处省略了模拟数据的定义\n\t`\n\n\t<Col span={20} key='table' style={{ paddingRight: 0 }}>\n\t\t<Table\n            className={Styles.frontTable}\n          \tdataSource={tableData}\n          \tcolumns={this.listColums}\n          \trowKey={record => record.id}\n            span={12}\n              />\n          </Col>`\n\n\n上面三部分主要完成了整个静态页面，看一下页面的效果\n\n![](http://lxlimg.gz.bcebos.com/demo002.png)\n\n接下来就是要分析页面内的逻辑，处理前后端交互的部分\n按照我自己的习惯，一般是先主后次，先易后难。\n涉及交互实际上也包含了搜索、侧边栏展示及选择、表单的展示。\n显然表单是我们页面的最主要的部分，同时单独去处理表单的显示交互是比较简单的，如果去处理搜索功能，它会影响到表单的展示，反而是属于复杂的部分。所以我们先处理表单数据的渲染。\n表单涉及三个交互：1、数据的动态获取；2、分页的获取；3、查看详情\n\n在处理交互之前，先明确reta把所有数据的处理已经放在models中，通过props传递给组件，因此对应的数据需要在models里面定义并讲store与组件关联\n\n\n1、数据的动态获取\n    `\n\n\t//routers/Demo/index.js\n\t componentWillMount() {\n\t\t\tthis.props.dispatch({\n        \t\ttype: `demo/fetchTotalList`,\n      \t\t});\n  \t}\n\tconst { servicesList,dispatch} = this.props;\n\t\t...\n\t<Table\n        className={Styles.frontTable}\n        dataSource={servicesList.list}\n        columns={this.listColums}\n        rowKey={record => record.id}\n        span={12}\n      />\n\t\t...\n\texport default connect(state => ({\n  \t\tservicesList: state.demo.servicesList\n\t}))(Demo);\n\n\t//models/demo.js\n\n\t state: {\n  \t\tservicesList: [],\n  \t},\n\n\teffects: {\n  \t *fetchTotalList({ query }, { call, put }) {\n      \tconst res = yield call(queryTotalList, query);//queryTotalList是一个fetch请求，可以本地写模拟数据\n      \tif (res.status == 'success') {\n        \tyield put({\n          \ttype: 'saveTotalListData',\n          \tpayload: res.data,\n        \t});\n      \t} else {\n        \tyield put({\n          \t\ttype: 'saveTotalListData',\n          \t\tpayload: [],\n        \t});\n      \t}\n    \t},\n  \t},\n\n\treducers: {\n  \t \tsaveTotalListData(state, { payload }) {\n      \t\treturn {\n        \t\t...state,\n        \t\tservicesList: payload,\n      \t\t};\n    \t},\n  \t},`\n\n到此简单的异步请求表单数据并并展示已经完成。\n\n第二步：分页器设置\n    `//routers/Demo/index.js\n\n\t paginationChange = (page, pageSize) => {\n    \tconst query = {\n      \t\toffset: pageSize * (page - 1),\n      \t\tlimit: pageSize,\n    \t};\n     \tthis.props.dispatch({\n        \ttype: `demo/fetchTotalList`,\n        \tquery: {\n             \t...query,\n            \tdirPath: this.state.dirPath,\n            }\n     \t });\n\n  \t};\n\t...\n\n\tconst paginationData = {\n      total: 0,\n      total: servicesList.totalCount,\n      current: servicesList.pageNum,\n      pageSize: servicesList.limit,\n      showSizeChanger: true,\n      showQuickJumper: true,\n      pageSizeOptions: [\"10\", \"20\", \"50\", \"100\"],\n      onChange: this.paginationChange,\n      onShowSizeChange: this.paginationChange,\n      showTotal: (total) => (`共有${total}条记录`),\n    };\n\n\t...\n\t<Table\n        className={Styles.frontTable}\n        dataSource={servicesList.list}\n        columns={this.listColums}\n        pagination={paginationData}\n        rowKey={record => record.id}\n        span={12}\n              />`\n\n到此第二步分页展示完成。\n\n第三步是查看详情实现\n这个很简单，只要在表单的列属性里配置链接即可\n\t`\n\n\t this.listColums = [\n      {\n        title: '服务名称',\n        dataIndex: 'abilityName',\n        className: 'no-right-border',\n        width: '20%',\n      },\n      {\n        title: '部门名称',\n        dataIndex: 'deptName',\n        className: 'no-right-border',\n        width: '20%',\n      },\n      {\n        title: '所属目录',\n        dataIndex: 'dirName',\n        className: 'no-right-border',\n        width: '10%',\n      },\n      {\n        title: '分级',\n        dataIndex: 'clsName',\n        className: 'no-right-border',\n        width: '10%',\n      },\n      {\n        title: '服务简介',\n        dataIndex: 'briefDescription',\n        className: 'no-right-border',\n      },\n      {\n        title: '操作',\n        dataIndex: 'action',\n        width: this.props.match.path.indexOf('/devAccess/applyService') > -1 ? 140 : 100,\n        render: (text, record) => (\n          <span>\n            <Link\n              to={this.renderDetailLink(record.id)}\n            >\n              查看详情\n            </Link>\n          </span>\n        ),\n      }\n    ]\n\t this.renderDetailLink = id => {\n      const path = this.props.match.path;\n      if(path.indexOf('/devAccess/applyService') > -1) {\n        return `/devAccess/applyService/${this.props.match.params.appId}/serviceInfo/${id}`\n      } else if (path.indexOf('/devAccess') > -1) {\n        return `/devAccess/servicesList/serviceInfo/${id}`;\n      } else if (path.indexOf('/pubAccess') > -1) {\n        return `/pubAccess/servicesList/serviceDetails/${id}`\n      } else {\n        return `/servicesList/serviceInfo/${id}`;\n      }\n    }`\n\n上面三步完成了表单涉及的交互（当然还有些细节需要去完善，比如增加loading状态）\n\n接下来去完成左侧菜单栏的动态获取\n\n    `//models中处理数据请求\n\t  namespace: 'demo',\n\n  \t\tstate: {\n  \t\tservicesList: [],\n   \t\tmenuData: {\n      \t\tsubfolders: []\n    \t},\n  \t},\n\n\t*fetchMenuData(_, { call, put }) {\n      const res = yield call(queryMenuData);\n      if (res.status === 'success') {\n        const subFolders = res.data.subfolders || [];\n        res.data.subfolders = [ { name: '所有服务', path: '-1'}, ...subFolders ]\n        yield put({\n          type: 'saveMenuData',\n          payload: res.data,\n        });\n      }\n    },\n\tsaveMenuData(state, { payload }) {\n      return {\n        ...state,\n        menuData: payload,\n      };\n    },\n\t...\n\t//页面渲染前获取数据\n\tcomponentWillMount() {\n\t\t\t this.setState({\n      \t\t\tfetchList: this.props.match.path.indexOf('pubAccess') > -1 ? 'fetchPubList' : 'fetchTotalList',\n    \t\t}, () =>{\n      \t\tthis.props.dispatch({\n        \t\ttype: `demo/${this.state.fetchList}`,\n      \t\t});\n    });\n      this.props.dispatch({\n      \ttype: \"demo/fetchMenuData\",\n    \t});\n  \t}\n\t//处理菜单项的点击事件，获取对应的表单数据，需要注意的是SubMenu也需要绑定click事件\n\t handleClickSider(e) {\n    \tconst { dispatch, currentUser } = this.props;\n    \tthis.setState({\n      \t\tdirPath: e.key\n    \t}, () => {\n      \tconst query = {\n        \tdirPath: this.state.dirPath,\n      \t}\n      \tdispatch({\n        \ttype: `demo/${this.state.fetchList}`,\n        \tquery: e.key === '-1' ? null : query,\n      \t});\n    \t})\n  \t}\n\tconst { servicesList,dispatch,menuData} = this.props;\n\t...\n \tmenuItem (item) {\n   \t if (this.isSubfiles) {\n      \tif (item.subfolders && item.subfolders.length) {\n        \treturn (\n          \t\t<SubMenu key={item.path} title={<span><span>{item.name}</span></span>}>\n            {\n              item.subfiles.map(v => this.fileItem(v))\n            }\n            {\n              item.subfolders.map(v => this.menuItem(v))\n            }\n          </SubMenu>\n        )\n      } else if (item.subfiles && item.subfiles.length){\n        return (\n          <SubMenu key={item.path} title={<span><span>{item.name}</span></span>}>\n            {\n              item.subfiles.map(v => this.fileItem(v))\n            }\n          </SubMenu>\n        )\n      } else {\n        return <Menu.Item key={item.path} disabled>{item.name}</Menu.Item>\n      }\n    } else {\n      if (item.subfolders && item.subfolders.length) {\n        return (\n          <SubMenu onTitleClick={this.handleClickSider.bind(this)} key={item.path} title={<span><span>{item.name}</span></span>}>\n            {\n              item.subfolders.length === 0 ? null :\n              item.subfolders.map(v => this.menuItem(v))\n            }\n          </SubMenu>\n        )\n      } else {\n        return <Menu.Item key={item.path}>{item.name}</Menu.Item>\n      }\n    }\n  \t}\n\t <Menu\n\t\tonClick={this.handleClickSider.bind(this)}\n        mode=\"inline\"\n       \tdefaultSelectedKeys={[ '-1' ]}\n       \tclassName={Styles.menu}\n      \t>\n        {\n          \tmenuData.subfiles === undefined ? null :\n          \tmenuData.subfiles.map(item => this.fileItem(item))\n        }\n        {\n          \tmenuData.subfolders === undefined ? null:\n          \tmenuData.subfolders.map(item => this.menuItem(item))\n        }\n      \t</Menu>`\n\n到此左边菜单栏的交互也完成\n\n最后一步就是搜索栏，这部分需要对ant的form组件熟悉掌握，form.create以及this.props.form自带api的使用\n\n    `class SearchPanel extends Component {\n\t   handleSubmit = (e) => {\n    \te && e.preventDefault && e.preventDefault();\n \t \tthis.props.form.validateFields((err, values) => {\n      \t\tif (err === null && this.props.fetchDataFunc) {\n        \t\tthis.props.fetchDataFunc(values);\n      \t\t}\n    \t});\n\n  \t\t};\n\t\thandleReset = () => {\n    \t\tthis.props.form.resetFields();\n    \t\tif (this.props.fetchDataFunc) {\n      \t\t\tthis.props.fetchDataFunc();\n    \t\t}\n  \t\t};\n  \trender(){\n  \t \tconst ctrlStyle = {\n        \ttextAlign: 'right'\n      \t};\n      \tconst { getFieldDecorator } = this.props.form;\n       \tconst name=\"name\"\n       \tconst options= [\n        \t{\n          \ttype: 'input',\n          \tname: 'name',\n          \tplaceholder: '请输入服务名称搜索',\n        \t},\n      \t]\n\n  \t\treturn (<Form\n  \t\t\tclassName={classNames(Styles.searchPanel)}\n  \t\t\tonSubmit={this.handleSubmit}\n  \t\t\t>\n  \t\t\t<Row gutter={24}>\n  \t\t\t\t<Col span={8}>\n  \t\t\t\t\t<Form.Item\n  \t\t\t\t\t\twrapperCol={{span:18}}\n  \t\t\t\t\t\tname={name}\n  \t\t\t\t\t>  {\n              \t\tgetFieldDecorator(name, options)(<Input placeholder={\"请输入服务名称搜索\"}/>)\n            \t\t}\n\n  \t\t\t\t\t</Form.Item>\n  \t\t\t\t</Col>\n  \t\t\t\t<Col span={16} style={ctrlStyle}>\n  \t\t\t\t<Form.Item\n  \t\t\t\t>\n  \t\t\t\t<Button key='primary' type='primary' htmlType='submit'>搜索</Button>\n  \t\t\t\t<Button key='reset' style={{ marginLeft: 8 }} onClick={this.handleReset}>重置</Button>\n  \t\t\t\t</Form.Item>\n  \t\t\t\t</Col>\n  \t\t\t</Row>\n  \t\t</Form>)\n  \t\t}\n\t}\n\tSearchPanel = Form.create({})(SearchPanel);\n`\n\n到此我们完成了一个常见的表单展示页面，包含search+sider+table\n\n总结一下过程中的注意的问题点\n1、整体布局需优先考虑好，采用antd的栅格来完成\n2、searchPanel是对From组件的封装，需熟悉掌握Form.create的使用以及this.props.form的api\n3、侧边栏即menu组件的使用\n4、table组件的使用，主要就是dataSource、columns、pagination等属性的定义，别忘了rowKey\n5、所有状态均在models中处理，通过props传入view组件\n\n最后需要说明的是在实际项目中，这种功能模块的页面会有很多，所以通常会把searchPanel和sider分别抽离成一级组件；table+searchPanel+sider抽离为二级组件，通过属性配置来实现不同场景的展示与交互。\n","slug":"reta","published":1,"updated":"2018-04-24T03:04:14.012Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgevausf0005e0vw833nh99i","content":"<h2 id=\"reta使用\"><a href=\"#reta使用\" class=\"headerlink\" title=\"reta使用\"></a>reta使用</h2><h3 id=\"功能模块开发流程总结\"><a href=\"#功能模块开发流程总结\" class=\"headerlink\" title=\"功能模块开发流程总结\"></a>功能模块开发流程总结</h3><h4 id=\"以服务列表页面开发为例\"><a href=\"#以服务列表页面开发为例\" class=\"headerlink\" title=\"以服务列表页面开发为例\"></a>以服务列表页面开发为例</h4><p>1、分析布局<br>确定BasicLayout布局<br>2、定义router组件<br>现在routes文件夹中定义空组件Demo备用<br>    `</p>\n<pre><code>import React, { Component } from &apos;react&apos;\nclass Demo extends Component {\n      constructor(props) {\n        super(props);\n      }\n\n      componentWillMount() {\n\n      }\n      render() {\n        return (\n              &lt;div&gt;\n               demo页面\n              &lt;/div&gt;\n        )\n      }\n}\n\nexport default Demo`\n</code></pre><p>在nav.js中添加页面路由配置<br>    `</p>\n<pre><code>{\n    name: &apos;测试页面&apos;,\n    path: &apos;demo&apos;,\n    component: dynamicWrapper(app, [], () =&gt; import(&apos;../routes/ServicesList&apos;)),\n  }`\n</code></pre><p>在headerMenu中添加菜单项<br>    `</p>\n<pre><code>{\n    text: &apos;测试页面&apos;,\n    path: &apos;/demo&apos;,\n    useLink: true,\n    replace: false,\n  },\n</code></pre><p><code>3、定义model组件\n在models定义demo.js备用，并在nav中demo组件中绑定[&#39;demo&#39;]</code></p>\n<pre><code>export default {\n      namespace: &apos;demo&apos;,\n\n      state: {\n\n      },\n\n      effects: {\n\n      },\n\n      reducers: {\n\n      },\n\n      subscriptions: {\n\n      },\n}`\n</code></pre><p>完成上面3步后，我们页面里面已经有空白的测试页面了<br><img src=\"http://lxlimg.gz.bcebos.com/list01.png\" alt=\"\"></p>\n<p>4、开始页面开发</p>\n<p>1）分析页面<br><img src=\"http://lxlimg.gz.bcebos.com/list.png\" alt=\"\"><br>服务列表页面可划分为四部分，<br>1：面包屑，已在layout中实现，不需要考虑；<br>2：searchpanel<br>3：左边siderbar<br>4: 右边table<br>注：对于实际项目，类似功能已抽离为组件形式，这里我还是不引用现成组件，从零开始开发，首先完成静态页面的搭建。</p>\n<p>第一部分searchpanel<br>不解释直接上代码</p>\n<pre><code>`render() {\n       const ctrlStyle = {\n        textAlign: &apos;right&apos;\n      };\n    return (\n       &lt;Form\n           className={classNames(Styles.searchPanel)}\n      &gt;\n        &lt;Row gutter={24}&gt;\n               &lt;Col span={8}&gt;\n                  &lt;Form.Item\n                      wrapperCol={{span:18}}\n                  &gt;\n                       &lt;Input placeholder={&quot;请输入服务名称搜索&quot;}/&gt;\n                  &lt;/Form.Item&gt;\n            &lt;/Col&gt;\n            &lt;Col span={16} style={ctrlStyle}&gt;\n                 &lt;Form.Item\n                 &gt;\n                    &lt;Button key=&apos;primary&apos; type=&apos;primary&apos; &gt;搜索&lt;/Button&gt;\n                    &lt;Button key=&apos;reset&apos; style={{ marginLeft: 8 }}&gt;重置&lt;/Button&gt;\n                   &lt;/Form.Item&gt;\n            &lt;/Col&gt;\n        &lt;/Row&gt;\n      &lt;/Form&gt;\n    )\n  }`\n</code></pre><p>第二部分sider</p>\n<pre><code>`//\n    &lt;Row gutter={24} style={{ margin: 0 }}&gt;\n      &lt;Col span={4} key=&apos;child&apos; style={{ paddingLeft: 0 }}&gt;\n                     &lt;Menu\n                mode=&quot;inline&quot;\n                defaultSelectedKeys={[ &apos;-1&apos; ]}\n                className={Styles.menu}\n              &gt;\n                {\n                  menuData.subfiles === undefined ? null :\n                  menuData.subfiles.map(item =&gt; this.fileItem(item))\n                }\n            {\n                  menuData.subfolders === undefined ? null:\n                  menuData.subfolders.map(item =&gt; this.menuItem(item))\n                }\n              &lt;/Menu&gt;\n      &lt;/Col&gt;\n      &lt;Col span={20} key=&apos;table&apos; style={{ paddingRight: 0 }}&gt;table&lt;/Col&gt;\n    &lt;/Row&gt;`\n\n\n\n`fileItem(item) {\n    return (\n          &lt;Menu.Item key={item.id}&gt;{item.name}&lt;/Menu.Item&gt;\n    )\n  }\n  menuItem (item) {\n    if (this.isSubfiles) {\n          if (item.subfolders &amp;&amp; item.subfolders.length) {\n            return (\n                  &lt;SubMenu key={item.path} title={&lt;span&gt;&lt;span&gt;{item.name}&lt;/span&gt;&lt;/span&gt;}&gt;\n                {\n                      item.subfiles.map(v =&gt; this.fileItem(v))\n                }\n                {\n                      item.subfolders.map(v =&gt; this.menuItem(v))\n                }\n                  &lt;/SubMenu&gt;\n            )\n          } else if (item.subfiles &amp;&amp; item.subfiles.length){\n            return (\n                  &lt;SubMenu key={item.path} title={&lt;span&gt;&lt;span&gt;{item.name}&lt;/span&gt;&lt;/span&gt;}&gt;\n                {\n                      item.subfiles.map(v =&gt; this.fileItem(v))\n                }\n                  &lt;/SubMenu&gt;\n            )\n          } else {\n            return &lt;Menu.Item key={item.path} disabled&gt;{item.name}&lt;/Menu.Item&gt;\n          }\n        } else {\n          if (item.subfolders &amp;&amp; item.subfolders.length) {\n            return (\n                  &lt;SubMenu onTitleClick={this.props.onClick} key={item.path} title={&lt;span&gt;&lt;span&gt;{item.name}&lt;/span&gt;&lt;/span&gt;}&gt;\n                {\n                  item.subfolders.length === 0 ? null :\n                  item.subfolders.map(v =&gt; this.menuItem(v))\n                }\n                  &lt;/SubMenu&gt;\n            )\n      } else {\n        return &lt;Menu.Item key={item.path}&gt;{item.name}&lt;/Menu.Item&gt;\n      }\n    }\n  }`\n\n\n`//模拟数据\n\n const menuData = {\n\n          &quot;path&quot;:&quot;/5&quot;,\n          &quot;name&quot;:&quot;api&quot;,\n          &quot;subfolders&quot;:[\n              { name: &apos;所有服务&apos;, path: &apos;-1&apos;},\n             {&quot;path&quot;:&quot;/5/1064&quot;,\n                  &quot;name&quot;:&quot;交通出行&quot;,\n                   &quot;code&quot;:&quot;traffic&quot;,\n                  &quot;description&quot;:&quot;绿色出行 低碳生活1&quot;,\n                  &quot;subfolders&quot;:[]\n            },\n            {&quot;path&quot;:&quot;/5/1006&quot;,\n                &quot;name&quot;:&quot;金融理财&quot;,\n                &quot;code&quot;:&quot;jinrong&quot;,\n                &quot;description&quot;:&quot;金融&quot;,\n                &quot;subfolders&quot;:[\n                    {&quot;path&quot;:&quot;/5/1006/1023&quot;,\n                        &quot;name&quot;:&quot;农业市场&quot;,\n                        &quot;code&quot;:&quot;farmmarket&quot;,\n                        &quot;description&quot;:&quot;&quot;,\n                        &quot;subfolders&quot;:[\n                        {&quot;path&quot;:&quot;/5/1006/1023/1024&quot;,\n                            &quot;name&quot;:&quot;水果经济&quot;,\n                            &quot;code&quot;:&quot;fruitEnco&quot;,\n                            &quot;description&quot;:&quot;&quot;,\n                            &quot;subfolders&quot;:[]\n                          }]\n                    }\n            ]},\n            {&quot;path&quot;:&quot;/5/1151&quot;,\n                &quot;name&quot;:&quot;我在东北玩泥巴&quot;,\n                &quot;code&quot;:&quot;niba&quot;,\n                &quot;description&quot;:&quot;我在大连没有家&quot;,\n                &quot;subfolders&quot;:[]},\n            {&quot;path&quot;:&quot;/5/1007&quot;,\n                &quot;name&quot;:&quot;便民生活&quot;,\n                &quot;code&quot;:&quot;life&quot;,\n                &quot;description&quot;:&quot;便民生活的&quot;,\n                &quot;subfolders&quot;:[]}]\n        }`\n</code></pre><p>第三部分：table，此处省略了模拟数据的定义<br>    `</p>\n<pre><code>&lt;Col span={20} key=&apos;table&apos; style={{ paddingRight: 0 }}&gt;\n    &lt;Table\n        className={Styles.frontTable}\n          dataSource={tableData}\n          columns={this.listColums}\n          rowKey={record =&gt; record.id}\n        span={12}\n          /&gt;\n      &lt;/Col&gt;`\n</code></pre><p>上面三部分主要完成了整个静态页面，看一下页面的效果</p>\n<p><img src=\"http://lxlimg.gz.bcebos.com/demo002.png\" alt=\"\"></p>\n<p>接下来就是要分析页面内的逻辑，处理前后端交互的部分<br>按照我自己的习惯，一般是先主后次，先易后难。<br>涉及交互实际上也包含了搜索、侧边栏展示及选择、表单的展示。<br>显然表单是我们页面的最主要的部分，同时单独去处理表单的显示交互是比较简单的，如果去处理搜索功能，它会影响到表单的展示，反而是属于复杂的部分。所以我们先处理表单数据的渲染。<br>表单涉及三个交互：1、数据的动态获取；2、分页的获取；3、查看详情</p>\n<p>在处理交互之前，先明确reta把所有数据的处理已经放在models中，通过props传递给组件，因此对应的数据需要在models里面定义并讲store与组件关联</p>\n<p>1、数据的动态获取<br>    `</p>\n<pre><code>//routers/Demo/index.js\n componentWillMount() {\n        this.props.dispatch({\n            type: `demo/fetchTotalList`,\n          });\n  }\nconst { servicesList,dispatch} = this.props;\n    ...\n&lt;Table\n    className={Styles.frontTable}\n    dataSource={servicesList.list}\n    columns={this.listColums}\n    rowKey={record =&gt; record.id}\n    span={12}\n  /&gt;\n    ...\nexport default connect(state =&gt; ({\n      servicesList: state.demo.servicesList\n}))(Demo);\n\n//models/demo.js\n\n state: {\n      servicesList: [],\n  },\n\neffects: {\n   *fetchTotalList({ query }, { call, put }) {\n      const res = yield call(queryTotalList, query);//queryTotalList是一个fetch请求，可以本地写模拟数据\n      if (res.status == &apos;success&apos;) {\n        yield put({\n          type: &apos;saveTotalListData&apos;,\n          payload: res.data,\n        });\n      } else {\n        yield put({\n              type: &apos;saveTotalListData&apos;,\n              payload: [],\n        });\n      }\n    },\n  },\n\nreducers: {\n       saveTotalListData(state, { payload }) {\n          return {\n            ...state,\n            servicesList: payload,\n          };\n    },\n  },`\n</code></pre><p>到此简单的异步请求表单数据并并展示已经完成。</p>\n<p>第二步：分页器设置<br>    `//routers/Demo/index.js</p>\n<pre><code> paginationChange = (page, pageSize) =&gt; {\n    const query = {\n          offset: pageSize * (page - 1),\n          limit: pageSize,\n    };\n     this.props.dispatch({\n        type: `demo/fetchTotalList`,\n        query: {\n             ...query,\n            dirPath: this.state.dirPath,\n        }\n      });\n\n  };\n...\n\nconst paginationData = {\n  total: 0,\n  total: servicesList.totalCount,\n  current: servicesList.pageNum,\n  pageSize: servicesList.limit,\n  showSizeChanger: true,\n  showQuickJumper: true,\n  pageSizeOptions: [&quot;10&quot;, &quot;20&quot;, &quot;50&quot;, &quot;100&quot;],\n  onChange: this.paginationChange,\n  onShowSizeChange: this.paginationChange,\n  showTotal: (total) =&gt; (`共有${total}条记录`),\n};\n\n...\n&lt;Table\n    className={Styles.frontTable}\n    dataSource={servicesList.list}\n    columns={this.listColums}\n    pagination={paginationData}\n    rowKey={record =&gt; record.id}\n    span={12}\n          /&gt;`\n</code></pre><p>到此第二步分页展示完成。</p>\n<p>第三步是查看详情实现<br>这个很简单，只要在表单的列属性里配置链接即可<br>    `</p>\n<pre><code> this.listColums = [\n  {\n    title: &apos;服务名称&apos;,\n    dataIndex: &apos;abilityName&apos;,\n    className: &apos;no-right-border&apos;,\n    width: &apos;20%&apos;,\n  },\n  {\n    title: &apos;部门名称&apos;,\n    dataIndex: &apos;deptName&apos;,\n    className: &apos;no-right-border&apos;,\n    width: &apos;20%&apos;,\n  },\n  {\n    title: &apos;所属目录&apos;,\n    dataIndex: &apos;dirName&apos;,\n    className: &apos;no-right-border&apos;,\n    width: &apos;10%&apos;,\n  },\n  {\n    title: &apos;分级&apos;,\n    dataIndex: &apos;clsName&apos;,\n    className: &apos;no-right-border&apos;,\n    width: &apos;10%&apos;,\n  },\n  {\n    title: &apos;服务简介&apos;,\n    dataIndex: &apos;briefDescription&apos;,\n    className: &apos;no-right-border&apos;,\n  },\n  {\n    title: &apos;操作&apos;,\n    dataIndex: &apos;action&apos;,\n    width: this.props.match.path.indexOf(&apos;/devAccess/applyService&apos;) &gt; -1 ? 140 : 100,\n    render: (text, record) =&gt; (\n      &lt;span&gt;\n        &lt;Link\n          to={this.renderDetailLink(record.id)}\n        &gt;\n          查看详情\n        &lt;/Link&gt;\n      &lt;/span&gt;\n    ),\n  }\n]\n this.renderDetailLink = id =&gt; {\n  const path = this.props.match.path;\n  if(path.indexOf(&apos;/devAccess/applyService&apos;) &gt; -1) {\n    return `/devAccess/applyService/${this.props.match.params.appId}/serviceInfo/${id}`\n  } else if (path.indexOf(&apos;/devAccess&apos;) &gt; -1) {\n    return `/devAccess/servicesList/serviceInfo/${id}`;\n  } else if (path.indexOf(&apos;/pubAccess&apos;) &gt; -1) {\n    return `/pubAccess/servicesList/serviceDetails/${id}`\n  } else {\n    return `/servicesList/serviceInfo/${id}`;\n  }\n}`\n</code></pre><p>上面三步完成了表单涉及的交互（当然还有些细节需要去完善，比如增加loading状态）</p>\n<p>接下来去完成左侧菜单栏的动态获取</p>\n<pre><code>`//models中处理数据请求\n  namespace: &apos;demo&apos;,\n\n      state: {\n      servicesList: [],\n       menuData: {\n          subfolders: []\n    },\n  },\n\n*fetchMenuData(_, { call, put }) {\n  const res = yield call(queryMenuData);\n  if (res.status === &apos;success&apos;) {\n    const subFolders = res.data.subfolders || [];\n    res.data.subfolders = [ { name: &apos;所有服务&apos;, path: &apos;-1&apos;}, ...subFolders ]\n    yield put({\n      type: &apos;saveMenuData&apos;,\n      payload: res.data,\n    });\n  }\n},\nsaveMenuData(state, { payload }) {\n  return {\n    ...state,\n    menuData: payload,\n  };\n},\n...\n//页面渲染前获取数据\ncomponentWillMount() {\n         this.setState({\n              fetchList: this.props.match.path.indexOf(&apos;pubAccess&apos;) &gt; -1 ? &apos;fetchPubList&apos; : &apos;fetchTotalList&apos;,\n        }, () =&gt;{\n          this.props.dispatch({\n            type: `demo/${this.state.fetchList}`,\n          });\n});\n  this.props.dispatch({\n      type: &quot;demo/fetchMenuData&quot;,\n    });\n  }\n//处理菜单项的点击事件，获取对应的表单数据，需要注意的是SubMenu也需要绑定click事件\n handleClickSider(e) {\n    const { dispatch, currentUser } = this.props;\n    this.setState({\n          dirPath: e.key\n    }, () =&gt; {\n      const query = {\n        dirPath: this.state.dirPath,\n      }\n      dispatch({\n        type: `demo/${this.state.fetchList}`,\n        query: e.key === &apos;-1&apos; ? null : query,\n      });\n    })\n  }\nconst { servicesList,dispatch,menuData} = this.props;\n...\n menuItem (item) {\n    if (this.isSubfiles) {\n      if (item.subfolders &amp;&amp; item.subfolders.length) {\n        return (\n              &lt;SubMenu key={item.path} title={&lt;span&gt;&lt;span&gt;{item.name}&lt;/span&gt;&lt;/span&gt;}&gt;\n        {\n          item.subfiles.map(v =&gt; this.fileItem(v))\n        }\n        {\n          item.subfolders.map(v =&gt; this.menuItem(v))\n        }\n      &lt;/SubMenu&gt;\n    )\n  } else if (item.subfiles &amp;&amp; item.subfiles.length){\n    return (\n      &lt;SubMenu key={item.path} title={&lt;span&gt;&lt;span&gt;{item.name}&lt;/span&gt;&lt;/span&gt;}&gt;\n        {\n          item.subfiles.map(v =&gt; this.fileItem(v))\n        }\n      &lt;/SubMenu&gt;\n    )\n  } else {\n    return &lt;Menu.Item key={item.path} disabled&gt;{item.name}&lt;/Menu.Item&gt;\n  }\n} else {\n  if (item.subfolders &amp;&amp; item.subfolders.length) {\n    return (\n      &lt;SubMenu onTitleClick={this.handleClickSider.bind(this)} key={item.path} title={&lt;span&gt;&lt;span&gt;{item.name}&lt;/span&gt;&lt;/span&gt;}&gt;\n        {\n          item.subfolders.length === 0 ? null :\n          item.subfolders.map(v =&gt; this.menuItem(v))\n        }\n      &lt;/SubMenu&gt;\n    )\n  } else {\n    return &lt;Menu.Item key={item.path}&gt;{item.name}&lt;/Menu.Item&gt;\n  }\n}\n  }\n &lt;Menu\n    onClick={this.handleClickSider.bind(this)}\n    mode=&quot;inline&quot;\n       defaultSelectedKeys={[ &apos;-1&apos; ]}\n       className={Styles.menu}\n      &gt;\n    {\n          menuData.subfiles === undefined ? null :\n          menuData.subfiles.map(item =&gt; this.fileItem(item))\n    }\n    {\n          menuData.subfolders === undefined ? null:\n          menuData.subfolders.map(item =&gt; this.menuItem(item))\n    }\n      &lt;/Menu&gt;`\n</code></pre><p>到此左边菜单栏的交互也完成</p>\n<p>最后一步就是搜索栏，这部分需要对ant的form组件熟悉掌握，form.create以及this.props.form自带api的使用</p>\n<pre><code>`class SearchPanel extends Component {\n   handleSubmit = (e) =&gt; {\n    e &amp;&amp; e.preventDefault &amp;&amp; e.preventDefault();\n      this.props.form.validateFields((err, values) =&gt; {\n          if (err === null &amp;&amp; this.props.fetchDataFunc) {\n            this.props.fetchDataFunc(values);\n          }\n    });\n\n      };\n    handleReset = () =&gt; {\n        this.props.form.resetFields();\n        if (this.props.fetchDataFunc) {\n              this.props.fetchDataFunc();\n        }\n      };\n  render(){\n       const ctrlStyle = {\n        textAlign: &apos;right&apos;\n      };\n      const { getFieldDecorator } = this.props.form;\n       const name=&quot;name&quot;\n       const options= [\n        {\n          type: &apos;input&apos;,\n          name: &apos;name&apos;,\n          placeholder: &apos;请输入服务名称搜索&apos;,\n        },\n      ]\n\n      return (&lt;Form\n          className={classNames(Styles.searchPanel)}\n          onSubmit={this.handleSubmit}\n          &gt;\n          &lt;Row gutter={24}&gt;\n              &lt;Col span={8}&gt;\n                  &lt;Form.Item\n                      wrapperCol={{span:18}}\n                      name={name}\n                  &gt;  {\n                  getFieldDecorator(name, options)(&lt;Input placeholder={&quot;请输入服务名称搜索&quot;}/&gt;)\n                }\n\n                  &lt;/Form.Item&gt;\n              &lt;/Col&gt;\n              &lt;Col span={16} style={ctrlStyle}&gt;\n              &lt;Form.Item\n              &gt;\n              &lt;Button key=&apos;primary&apos; type=&apos;primary&apos; htmlType=&apos;submit&apos;&gt;搜索&lt;/Button&gt;\n              &lt;Button key=&apos;reset&apos; style={{ marginLeft: 8 }} onClick={this.handleReset}&gt;重置&lt;/Button&gt;\n              &lt;/Form.Item&gt;\n              &lt;/Col&gt;\n          &lt;/Row&gt;\n      &lt;/Form&gt;)\n      }\n}\nSearchPanel = Form.create({})(SearchPanel);\n</code></pre><p>`</p>\n<p>到此我们完成了一个常见的表单展示页面，包含search+sider+table</p>\n<p>总结一下过程中的注意的问题点<br>1、整体布局需优先考虑好，采用antd的栅格来完成<br>2、searchPanel是对From组件的封装，需熟悉掌握Form.create的使用以及this.props.form的api<br>3、侧边栏即menu组件的使用<br>4、table组件的使用，主要就是dataSource、columns、pagination等属性的定义，别忘了rowKey<br>5、所有状态均在models中处理，通过props传入view组件</p>\n<p>最后需要说明的是在实际项目中，这种功能模块的页面会有很多，所以通常会把searchPanel和sider分别抽离成一级组件；table+searchPanel+sider抽离为二级组件，通过属性配置来实现不同场景的展示与交互。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"reta使用\"><a href=\"#reta使用\" class=\"headerlink\" title=\"reta使用\"></a>reta使用</h2><h3 id=\"功能模块开发流程总结\"><a href=\"#功能模块开发流程总结\" class=\"headerlink\" title=\"功能模块开发流程总结\"></a>功能模块开发流程总结</h3><h4 id=\"以服务列表页面开发为例\"><a href=\"#以服务列表页面开发为例\" class=\"headerlink\" title=\"以服务列表页面开发为例\"></a>以服务列表页面开发为例</h4><p>1、分析布局<br>确定BasicLayout布局<br>2、定义router组件<br>现在routes文件夹中定义空组件Demo备用<br>    `</p>\n<pre><code>import React, { Component } from &apos;react&apos;\nclass Demo extends Component {\n      constructor(props) {\n        super(props);\n      }\n\n      componentWillMount() {\n\n      }\n      render() {\n        return (\n              &lt;div&gt;\n               demo页面\n              &lt;/div&gt;\n        )\n      }\n}\n\nexport default Demo`\n</code></pre><p>在nav.js中添加页面路由配置<br>    `</p>\n<pre><code>{\n    name: &apos;测试页面&apos;,\n    path: &apos;demo&apos;,\n    component: dynamicWrapper(app, [], () =&gt; import(&apos;../routes/ServicesList&apos;)),\n  }`\n</code></pre><p>在headerMenu中添加菜单项<br>    `</p>\n<pre><code>{\n    text: &apos;测试页面&apos;,\n    path: &apos;/demo&apos;,\n    useLink: true,\n    replace: false,\n  },\n</code></pre><p><code>3、定义model组件\n在models定义demo.js备用，并在nav中demo组件中绑定[&#39;demo&#39;]</code></p>\n<pre><code>export default {\n      namespace: &apos;demo&apos;,\n\n      state: {\n\n      },\n\n      effects: {\n\n      },\n\n      reducers: {\n\n      },\n\n      subscriptions: {\n\n      },\n}`\n</code></pre><p>完成上面3步后，我们页面里面已经有空白的测试页面了<br><img src=\"http://lxlimg.gz.bcebos.com/list01.png\" alt=\"\"></p>\n<p>4、开始页面开发</p>\n<p>1）分析页面<br><img src=\"http://lxlimg.gz.bcebos.com/list.png\" alt=\"\"><br>服务列表页面可划分为四部分，<br>1：面包屑，已在layout中实现，不需要考虑；<br>2：searchpanel<br>3：左边siderbar<br>4: 右边table<br>注：对于实际项目，类似功能已抽离为组件形式，这里我还是不引用现成组件，从零开始开发，首先完成静态页面的搭建。</p>\n<p>第一部分searchpanel<br>不解释直接上代码</p>\n<pre><code>`render() {\n       const ctrlStyle = {\n        textAlign: &apos;right&apos;\n      };\n    return (\n       &lt;Form\n           className={classNames(Styles.searchPanel)}\n      &gt;\n        &lt;Row gutter={24}&gt;\n               &lt;Col span={8}&gt;\n                  &lt;Form.Item\n                      wrapperCol={{span:18}}\n                  &gt;\n                       &lt;Input placeholder={&quot;请输入服务名称搜索&quot;}/&gt;\n                  &lt;/Form.Item&gt;\n            &lt;/Col&gt;\n            &lt;Col span={16} style={ctrlStyle}&gt;\n                 &lt;Form.Item\n                 &gt;\n                    &lt;Button key=&apos;primary&apos; type=&apos;primary&apos; &gt;搜索&lt;/Button&gt;\n                    &lt;Button key=&apos;reset&apos; style={{ marginLeft: 8 }}&gt;重置&lt;/Button&gt;\n                   &lt;/Form.Item&gt;\n            &lt;/Col&gt;\n        &lt;/Row&gt;\n      &lt;/Form&gt;\n    )\n  }`\n</code></pre><p>第二部分sider</p>\n<pre><code>`//\n    &lt;Row gutter={24} style={{ margin: 0 }}&gt;\n      &lt;Col span={4} key=&apos;child&apos; style={{ paddingLeft: 0 }}&gt;\n                     &lt;Menu\n                mode=&quot;inline&quot;\n                defaultSelectedKeys={[ &apos;-1&apos; ]}\n                className={Styles.menu}\n              &gt;\n                {\n                  menuData.subfiles === undefined ? null :\n                  menuData.subfiles.map(item =&gt; this.fileItem(item))\n                }\n            {\n                  menuData.subfolders === undefined ? null:\n                  menuData.subfolders.map(item =&gt; this.menuItem(item))\n                }\n              &lt;/Menu&gt;\n      &lt;/Col&gt;\n      &lt;Col span={20} key=&apos;table&apos; style={{ paddingRight: 0 }}&gt;table&lt;/Col&gt;\n    &lt;/Row&gt;`\n\n\n\n`fileItem(item) {\n    return (\n          &lt;Menu.Item key={item.id}&gt;{item.name}&lt;/Menu.Item&gt;\n    )\n  }\n  menuItem (item) {\n    if (this.isSubfiles) {\n          if (item.subfolders &amp;&amp; item.subfolders.length) {\n            return (\n                  &lt;SubMenu key={item.path} title={&lt;span&gt;&lt;span&gt;{item.name}&lt;/span&gt;&lt;/span&gt;}&gt;\n                {\n                      item.subfiles.map(v =&gt; this.fileItem(v))\n                }\n                {\n                      item.subfolders.map(v =&gt; this.menuItem(v))\n                }\n                  &lt;/SubMenu&gt;\n            )\n          } else if (item.subfiles &amp;&amp; item.subfiles.length){\n            return (\n                  &lt;SubMenu key={item.path} title={&lt;span&gt;&lt;span&gt;{item.name}&lt;/span&gt;&lt;/span&gt;}&gt;\n                {\n                      item.subfiles.map(v =&gt; this.fileItem(v))\n                }\n                  &lt;/SubMenu&gt;\n            )\n          } else {\n            return &lt;Menu.Item key={item.path} disabled&gt;{item.name}&lt;/Menu.Item&gt;\n          }\n        } else {\n          if (item.subfolders &amp;&amp; item.subfolders.length) {\n            return (\n                  &lt;SubMenu onTitleClick={this.props.onClick} key={item.path} title={&lt;span&gt;&lt;span&gt;{item.name}&lt;/span&gt;&lt;/span&gt;}&gt;\n                {\n                  item.subfolders.length === 0 ? null :\n                  item.subfolders.map(v =&gt; this.menuItem(v))\n                }\n                  &lt;/SubMenu&gt;\n            )\n      } else {\n        return &lt;Menu.Item key={item.path}&gt;{item.name}&lt;/Menu.Item&gt;\n      }\n    }\n  }`\n\n\n`//模拟数据\n\n const menuData = {\n\n          &quot;path&quot;:&quot;/5&quot;,\n          &quot;name&quot;:&quot;api&quot;,\n          &quot;subfolders&quot;:[\n              { name: &apos;所有服务&apos;, path: &apos;-1&apos;},\n             {&quot;path&quot;:&quot;/5/1064&quot;,\n                  &quot;name&quot;:&quot;交通出行&quot;,\n                   &quot;code&quot;:&quot;traffic&quot;,\n                  &quot;description&quot;:&quot;绿色出行 低碳生活1&quot;,\n                  &quot;subfolders&quot;:[]\n            },\n            {&quot;path&quot;:&quot;/5/1006&quot;,\n                &quot;name&quot;:&quot;金融理财&quot;,\n                &quot;code&quot;:&quot;jinrong&quot;,\n                &quot;description&quot;:&quot;金融&quot;,\n                &quot;subfolders&quot;:[\n                    {&quot;path&quot;:&quot;/5/1006/1023&quot;,\n                        &quot;name&quot;:&quot;农业市场&quot;,\n                        &quot;code&quot;:&quot;farmmarket&quot;,\n                        &quot;description&quot;:&quot;&quot;,\n                        &quot;subfolders&quot;:[\n                        {&quot;path&quot;:&quot;/5/1006/1023/1024&quot;,\n                            &quot;name&quot;:&quot;水果经济&quot;,\n                            &quot;code&quot;:&quot;fruitEnco&quot;,\n                            &quot;description&quot;:&quot;&quot;,\n                            &quot;subfolders&quot;:[]\n                          }]\n                    }\n            ]},\n            {&quot;path&quot;:&quot;/5/1151&quot;,\n                &quot;name&quot;:&quot;我在东北玩泥巴&quot;,\n                &quot;code&quot;:&quot;niba&quot;,\n                &quot;description&quot;:&quot;我在大连没有家&quot;,\n                &quot;subfolders&quot;:[]},\n            {&quot;path&quot;:&quot;/5/1007&quot;,\n                &quot;name&quot;:&quot;便民生活&quot;,\n                &quot;code&quot;:&quot;life&quot;,\n                &quot;description&quot;:&quot;便民生活的&quot;,\n                &quot;subfolders&quot;:[]}]\n        }`\n</code></pre><p>第三部分：table，此处省略了模拟数据的定义<br>    `</p>\n<pre><code>&lt;Col span={20} key=&apos;table&apos; style={{ paddingRight: 0 }}&gt;\n    &lt;Table\n        className={Styles.frontTable}\n          dataSource={tableData}\n          columns={this.listColums}\n          rowKey={record =&gt; record.id}\n        span={12}\n          /&gt;\n      &lt;/Col&gt;`\n</code></pre><p>上面三部分主要完成了整个静态页面，看一下页面的效果</p>\n<p><img src=\"http://lxlimg.gz.bcebos.com/demo002.png\" alt=\"\"></p>\n<p>接下来就是要分析页面内的逻辑，处理前后端交互的部分<br>按照我自己的习惯，一般是先主后次，先易后难。<br>涉及交互实际上也包含了搜索、侧边栏展示及选择、表单的展示。<br>显然表单是我们页面的最主要的部分，同时单独去处理表单的显示交互是比较简单的，如果去处理搜索功能，它会影响到表单的展示，反而是属于复杂的部分。所以我们先处理表单数据的渲染。<br>表单涉及三个交互：1、数据的动态获取；2、分页的获取；3、查看详情</p>\n<p>在处理交互之前，先明确reta把所有数据的处理已经放在models中，通过props传递给组件，因此对应的数据需要在models里面定义并讲store与组件关联</p>\n<p>1、数据的动态获取<br>    `</p>\n<pre><code>//routers/Demo/index.js\n componentWillMount() {\n        this.props.dispatch({\n            type: `demo/fetchTotalList`,\n          });\n  }\nconst { servicesList,dispatch} = this.props;\n    ...\n&lt;Table\n    className={Styles.frontTable}\n    dataSource={servicesList.list}\n    columns={this.listColums}\n    rowKey={record =&gt; record.id}\n    span={12}\n  /&gt;\n    ...\nexport default connect(state =&gt; ({\n      servicesList: state.demo.servicesList\n}))(Demo);\n\n//models/demo.js\n\n state: {\n      servicesList: [],\n  },\n\neffects: {\n   *fetchTotalList({ query }, { call, put }) {\n      const res = yield call(queryTotalList, query);//queryTotalList是一个fetch请求，可以本地写模拟数据\n      if (res.status == &apos;success&apos;) {\n        yield put({\n          type: &apos;saveTotalListData&apos;,\n          payload: res.data,\n        });\n      } else {\n        yield put({\n              type: &apos;saveTotalListData&apos;,\n              payload: [],\n        });\n      }\n    },\n  },\n\nreducers: {\n       saveTotalListData(state, { payload }) {\n          return {\n            ...state,\n            servicesList: payload,\n          };\n    },\n  },`\n</code></pre><p>到此简单的异步请求表单数据并并展示已经完成。</p>\n<p>第二步：分页器设置<br>    `//routers/Demo/index.js</p>\n<pre><code> paginationChange = (page, pageSize) =&gt; {\n    const query = {\n          offset: pageSize * (page - 1),\n          limit: pageSize,\n    };\n     this.props.dispatch({\n        type: `demo/fetchTotalList`,\n        query: {\n             ...query,\n            dirPath: this.state.dirPath,\n        }\n      });\n\n  };\n...\n\nconst paginationData = {\n  total: 0,\n  total: servicesList.totalCount,\n  current: servicesList.pageNum,\n  pageSize: servicesList.limit,\n  showSizeChanger: true,\n  showQuickJumper: true,\n  pageSizeOptions: [&quot;10&quot;, &quot;20&quot;, &quot;50&quot;, &quot;100&quot;],\n  onChange: this.paginationChange,\n  onShowSizeChange: this.paginationChange,\n  showTotal: (total) =&gt; (`共有${total}条记录`),\n};\n\n...\n&lt;Table\n    className={Styles.frontTable}\n    dataSource={servicesList.list}\n    columns={this.listColums}\n    pagination={paginationData}\n    rowKey={record =&gt; record.id}\n    span={12}\n          /&gt;`\n</code></pre><p>到此第二步分页展示完成。</p>\n<p>第三步是查看详情实现<br>这个很简单，只要在表单的列属性里配置链接即可<br>    `</p>\n<pre><code> this.listColums = [\n  {\n    title: &apos;服务名称&apos;,\n    dataIndex: &apos;abilityName&apos;,\n    className: &apos;no-right-border&apos;,\n    width: &apos;20%&apos;,\n  },\n  {\n    title: &apos;部门名称&apos;,\n    dataIndex: &apos;deptName&apos;,\n    className: &apos;no-right-border&apos;,\n    width: &apos;20%&apos;,\n  },\n  {\n    title: &apos;所属目录&apos;,\n    dataIndex: &apos;dirName&apos;,\n    className: &apos;no-right-border&apos;,\n    width: &apos;10%&apos;,\n  },\n  {\n    title: &apos;分级&apos;,\n    dataIndex: &apos;clsName&apos;,\n    className: &apos;no-right-border&apos;,\n    width: &apos;10%&apos;,\n  },\n  {\n    title: &apos;服务简介&apos;,\n    dataIndex: &apos;briefDescription&apos;,\n    className: &apos;no-right-border&apos;,\n  },\n  {\n    title: &apos;操作&apos;,\n    dataIndex: &apos;action&apos;,\n    width: this.props.match.path.indexOf(&apos;/devAccess/applyService&apos;) &gt; -1 ? 140 : 100,\n    render: (text, record) =&gt; (\n      &lt;span&gt;\n        &lt;Link\n          to={this.renderDetailLink(record.id)}\n        &gt;\n          查看详情\n        &lt;/Link&gt;\n      &lt;/span&gt;\n    ),\n  }\n]\n this.renderDetailLink = id =&gt; {\n  const path = this.props.match.path;\n  if(path.indexOf(&apos;/devAccess/applyService&apos;) &gt; -1) {\n    return `/devAccess/applyService/${this.props.match.params.appId}/serviceInfo/${id}`\n  } else if (path.indexOf(&apos;/devAccess&apos;) &gt; -1) {\n    return `/devAccess/servicesList/serviceInfo/${id}`;\n  } else if (path.indexOf(&apos;/pubAccess&apos;) &gt; -1) {\n    return `/pubAccess/servicesList/serviceDetails/${id}`\n  } else {\n    return `/servicesList/serviceInfo/${id}`;\n  }\n}`\n</code></pre><p>上面三步完成了表单涉及的交互（当然还有些细节需要去完善，比如增加loading状态）</p>\n<p>接下来去完成左侧菜单栏的动态获取</p>\n<pre><code>`//models中处理数据请求\n  namespace: &apos;demo&apos;,\n\n      state: {\n      servicesList: [],\n       menuData: {\n          subfolders: []\n    },\n  },\n\n*fetchMenuData(_, { call, put }) {\n  const res = yield call(queryMenuData);\n  if (res.status === &apos;success&apos;) {\n    const subFolders = res.data.subfolders || [];\n    res.data.subfolders = [ { name: &apos;所有服务&apos;, path: &apos;-1&apos;}, ...subFolders ]\n    yield put({\n      type: &apos;saveMenuData&apos;,\n      payload: res.data,\n    });\n  }\n},\nsaveMenuData(state, { payload }) {\n  return {\n    ...state,\n    menuData: payload,\n  };\n},\n...\n//页面渲染前获取数据\ncomponentWillMount() {\n         this.setState({\n              fetchList: this.props.match.path.indexOf(&apos;pubAccess&apos;) &gt; -1 ? &apos;fetchPubList&apos; : &apos;fetchTotalList&apos;,\n        }, () =&gt;{\n          this.props.dispatch({\n            type: `demo/${this.state.fetchList}`,\n          });\n});\n  this.props.dispatch({\n      type: &quot;demo/fetchMenuData&quot;,\n    });\n  }\n//处理菜单项的点击事件，获取对应的表单数据，需要注意的是SubMenu也需要绑定click事件\n handleClickSider(e) {\n    const { dispatch, currentUser } = this.props;\n    this.setState({\n          dirPath: e.key\n    }, () =&gt; {\n      const query = {\n        dirPath: this.state.dirPath,\n      }\n      dispatch({\n        type: `demo/${this.state.fetchList}`,\n        query: e.key === &apos;-1&apos; ? null : query,\n      });\n    })\n  }\nconst { servicesList,dispatch,menuData} = this.props;\n...\n menuItem (item) {\n    if (this.isSubfiles) {\n      if (item.subfolders &amp;&amp; item.subfolders.length) {\n        return (\n              &lt;SubMenu key={item.path} title={&lt;span&gt;&lt;span&gt;{item.name}&lt;/span&gt;&lt;/span&gt;}&gt;\n        {\n          item.subfiles.map(v =&gt; this.fileItem(v))\n        }\n        {\n          item.subfolders.map(v =&gt; this.menuItem(v))\n        }\n      &lt;/SubMenu&gt;\n    )\n  } else if (item.subfiles &amp;&amp; item.subfiles.length){\n    return (\n      &lt;SubMenu key={item.path} title={&lt;span&gt;&lt;span&gt;{item.name}&lt;/span&gt;&lt;/span&gt;}&gt;\n        {\n          item.subfiles.map(v =&gt; this.fileItem(v))\n        }\n      &lt;/SubMenu&gt;\n    )\n  } else {\n    return &lt;Menu.Item key={item.path} disabled&gt;{item.name}&lt;/Menu.Item&gt;\n  }\n} else {\n  if (item.subfolders &amp;&amp; item.subfolders.length) {\n    return (\n      &lt;SubMenu onTitleClick={this.handleClickSider.bind(this)} key={item.path} title={&lt;span&gt;&lt;span&gt;{item.name}&lt;/span&gt;&lt;/span&gt;}&gt;\n        {\n          item.subfolders.length === 0 ? null :\n          item.subfolders.map(v =&gt; this.menuItem(v))\n        }\n      &lt;/SubMenu&gt;\n    )\n  } else {\n    return &lt;Menu.Item key={item.path}&gt;{item.name}&lt;/Menu.Item&gt;\n  }\n}\n  }\n &lt;Menu\n    onClick={this.handleClickSider.bind(this)}\n    mode=&quot;inline&quot;\n       defaultSelectedKeys={[ &apos;-1&apos; ]}\n       className={Styles.menu}\n      &gt;\n    {\n          menuData.subfiles === undefined ? null :\n          menuData.subfiles.map(item =&gt; this.fileItem(item))\n    }\n    {\n          menuData.subfolders === undefined ? null:\n          menuData.subfolders.map(item =&gt; this.menuItem(item))\n    }\n      &lt;/Menu&gt;`\n</code></pre><p>到此左边菜单栏的交互也完成</p>\n<p>最后一步就是搜索栏，这部分需要对ant的form组件熟悉掌握，form.create以及this.props.form自带api的使用</p>\n<pre><code>`class SearchPanel extends Component {\n   handleSubmit = (e) =&gt; {\n    e &amp;&amp; e.preventDefault &amp;&amp; e.preventDefault();\n      this.props.form.validateFields((err, values) =&gt; {\n          if (err === null &amp;&amp; this.props.fetchDataFunc) {\n            this.props.fetchDataFunc(values);\n          }\n    });\n\n      };\n    handleReset = () =&gt; {\n        this.props.form.resetFields();\n        if (this.props.fetchDataFunc) {\n              this.props.fetchDataFunc();\n        }\n      };\n  render(){\n       const ctrlStyle = {\n        textAlign: &apos;right&apos;\n      };\n      const { getFieldDecorator } = this.props.form;\n       const name=&quot;name&quot;\n       const options= [\n        {\n          type: &apos;input&apos;,\n          name: &apos;name&apos;,\n          placeholder: &apos;请输入服务名称搜索&apos;,\n        },\n      ]\n\n      return (&lt;Form\n          className={classNames(Styles.searchPanel)}\n          onSubmit={this.handleSubmit}\n          &gt;\n          &lt;Row gutter={24}&gt;\n              &lt;Col span={8}&gt;\n                  &lt;Form.Item\n                      wrapperCol={{span:18}}\n                      name={name}\n                  &gt;  {\n                  getFieldDecorator(name, options)(&lt;Input placeholder={&quot;请输入服务名称搜索&quot;}/&gt;)\n                }\n\n                  &lt;/Form.Item&gt;\n              &lt;/Col&gt;\n              &lt;Col span={16} style={ctrlStyle}&gt;\n              &lt;Form.Item\n              &gt;\n              &lt;Button key=&apos;primary&apos; type=&apos;primary&apos; htmlType=&apos;submit&apos;&gt;搜索&lt;/Button&gt;\n              &lt;Button key=&apos;reset&apos; style={{ marginLeft: 8 }} onClick={this.handleReset}&gt;重置&lt;/Button&gt;\n              &lt;/Form.Item&gt;\n              &lt;/Col&gt;\n          &lt;/Row&gt;\n      &lt;/Form&gt;)\n      }\n}\nSearchPanel = Form.create({})(SearchPanel);\n</code></pre><p>`</p>\n<p>到此我们完成了一个常见的表单展示页面，包含search+sider+table</p>\n<p>总结一下过程中的注意的问题点<br>1、整体布局需优先考虑好，采用antd的栅格来完成<br>2、searchPanel是对From组件的封装，需熟悉掌握Form.create的使用以及this.props.form的api<br>3、侧边栏即menu组件的使用<br>4、table组件的使用，主要就是dataSource、columns、pagination等属性的定义，别忘了rowKey<br>5、所有状态均在models中处理，通过props传入view组件</p>\n<p>最后需要说明的是在实际项目中，这种功能模块的页面会有很多，所以通常会把searchPanel和sider分别抽离成一级组件；table+searchPanel+sider抽离为二级组件，通过属性配置来实现不同场景的展示与交互。</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}